{"version":3,"sources":["../JavaScript/JavaScriptSDK.Interfaces/IConfig.ts","../JavaScript/JavaScriptSDK.Interfaces/Contracts/Generated/Base.ts","../JavaScript/JavaScriptSDK.Interfaces/Contracts/Generated/Envelope.ts","../JavaScript/JavaScriptSDK.Interfaces/Context/IApplication.ts","../JavaScript/JavaScriptSDK.Interfaces/Context/IDevice.ts","../JavaScript/JavaScriptSDK.Interfaces/Context/IInternal.ts","../JavaScript/JavaScriptSDK.Interfaces/Context/ILocation.ts","../JavaScript/JavaScriptSDK.Interfaces/Context/IOperation.ts","../JavaScript/JavaScriptSDK.Interfaces/Context/ISample.ts","../JavaScript/JavaScriptSDK.Interfaces/Context/IUser.ts","../JavaScript/JavaScriptSDK.Interfaces/Context/ISession.ts","../JavaScript/JavaScriptSDK.Interfaces/Telemetry/ISerializable.ts","../JavaScript/JavaScriptSDK.Interfaces/Telemetry/IEnvelope.ts","../JavaScript/JavaScriptSDK.Interfaces/ITelemetryContext.ts","../JavaScript/JavaScriptSDK.Interfaces/Contracts/Generated/SeverityLevel.ts","../JavaScript/JavaScriptSDK.Interfaces/IAppInsights.ts","../JavaScript/JavaScriptSDK/Logging.ts","../JavaScript/JavaScriptSDK/Util.ts","../JavaScript/JavaScriptSDK/Serializer.ts","../JavaScript/JavaScriptSDK/Telemetry/Common/Envelope.ts","../JavaScript/JavaScriptSDK/Telemetry/Common/Base.ts","../JavaScript/JavaScriptSDK.Interfaces/Contracts/Generated/ContextTagKeys.ts","../JavaScript/JavaScriptSDK/Context/Application.ts","../JavaScript/JavaScriptSDK/Context/Device.ts","../JavaScript/JavaScriptSDK/Context/Internal.ts","../JavaScript/JavaScriptSDK/Context/Location.ts","../JavaScript/JavaScriptSDK/Context/Operation.ts","../JavaScript/JavaScriptSDK/HashCodeScoreGenerator.ts","../JavaScript/JavaScriptSDK/SamplingScoreGenerator.ts","../JavaScript/JavaScriptSDK/Context/Sample.ts","../JavaScript/JavaScriptSDK.Interfaces/Contracts/Generated/SessionState.ts","../JavaScript/JavaScriptSDK/Context/Session.ts","../JavaScript/JavaScriptSDK/Context/User.ts","../JavaScript/JavaScriptSDK/ajax/ajaxUtils.ts","../JavaScript/JavaScriptSDK/ajax/ajaxRecord.ts","../JavaScript/JavaScriptSDK/ajax/ajax.ts","../JavaScript/JavaScriptSDK/SendBuffer.ts","../JavaScript/JavaScriptSDK/Sender.ts","../JavaScript/JavaScriptSDK.Interfaces/Contracts/Generated/Domain.ts","../JavaScript/JavaScriptSDK.Interfaces/Contracts/Generated/MessageData.ts","../JavaScript/JavaScriptSDK/Telemetry/Common/DataSanitizer.ts","../JavaScript/JavaScriptSDK/Telemetry/Trace.ts","../JavaScript/JavaScriptSDK.Interfaces/Contracts/Generated/EventData.ts","../JavaScript/JavaScriptSDK/Telemetry/Event.ts","../JavaScript/JavaScriptSDK.Interfaces/Contracts/Generated/ExceptionDetails.ts","../JavaScript/JavaScriptSDK.Interfaces/Contracts/Generated/ExceptionData.ts","../JavaScript/JavaScriptSDK.Interfaces/Contracts/Generated/StackFrame.ts","../JavaScript/JavaScriptSDK/Telemetry/Exception.ts","../JavaScript/JavaScriptSDK.Interfaces/Contracts/Generated/MetricData.ts","../JavaScript/JavaScriptSDK.Interfaces/Contracts/Generated/DataPointType.ts","../JavaScript/JavaScriptSDK.Interfaces/Contracts/Generated/DataPoint.ts","../JavaScript/JavaScriptSDK/Telemetry/Common/DataPoint.ts","../JavaScript/JavaScriptSDK/Telemetry/Metric.ts","../JavaScript/JavaScriptSDK.Interfaces/Contracts/Generated/PageViewData.ts","../JavaScript/JavaScriptSDK/Telemetry/PageView.ts","../JavaScript/JavaScriptSDK.Interfaces/Contracts/Generated/PageViewPerfData.ts","../JavaScript/JavaScriptSDK/Telemetry/PageViewPerformance.ts","../JavaScript/JavaScriptSDK/TelemetryContext.ts","../JavaScript/JavaScriptSDK.Interfaces/Contracts/Generated/Data.ts","../JavaScript/JavaScriptSDK/Telemetry/Common/Data.ts","../JavaScript/JavaScriptSDK/Telemetry/PageViewManager.ts","../JavaScript/JavaScriptSDK/Telemetry/PageVisitTimeManager.ts","../JavaScript/JavaScriptSDK.Interfaces/Contracts/Generated/DependencyKind.ts","../JavaScript/JavaScriptSDK.Interfaces/Contracts/Generated/DependencySourceType.ts","../JavaScript/JavaScriptSDK.Interfaces/Contracts/Generated/RemoteDependencyData.ts","../JavaScript/JavaScriptSDK/Telemetry/RemoteDependencyData.ts","../JavaScript/JavaScriptSDK/SplitTest.ts","../JavaScript/JavaScriptSDK/AppInsights.ts","../JavaScript/JavaScriptSDK/DataLossAnalyzer.ts","../JavaScript/JavaScriptSDK/Initialization.ts","../JavaScript/JavaScriptSDK/Init.ts"],"names":["Microsoft","ApplicationInsights","Telemetry","Base","Envelope","this","ver","sampleRate","tags","Context","AI","SeverityLevel","LoggingSeverity","_InternalMessageId","_InternalLogMessage","msgId","msg","isUserAct","properties","messageId","message","AiUserActionablePrefix","AiNonUserActionablePrefix","toString","diagnosticText","sanitizeDiagnosticText","JSON","stringify","text","replace","_InternalLogging","throwInternal","severity","enableDebugExceptions","messageKey","_messageLogged","verboseLogging","warnToConsole","logInternalMessage","console","warn","log","resetInternalMessageCount","_messageCount","clearInternalMessageLoggedTypes","Util","canUseSessionStorage","sessionStorageKeys","getSessionStorageKeys","i","length","indexOf","AIInternalMessagePrefix","removeSessionStorage","setMaxInternalMessageLimit","limit","Error","MAX_INTERNAL_MESSAGE_LIMIT","_areInternalMessagesThrottled","logMessage","getSessionStorage","setSessionStorage","CRITICAL","queue","push","throttleLimitMessage","throttleMessage","MessageLimitPerPVExceeded","StorageType","disableStorage","_canUseLocalStorage","_canUseSessionStorage","_getLocalStorageObject","canUseLocalStorage","_getVerifiedStorageObject","LocalStorage","storageType","fail","uid","storage","Date","window","localStorage","sessionStorage","setItem","getItem","removeItem","exception","undefined","getStorage","name","e","WARNING","BrowserCannotReadLocalStorage","getExceptionName","dump","setStorage","data","BrowserCannotWriteLocalStorage","removeStorage","BrowserFailedRemovalFromLocalStorage","_getSessionStorageObject","SessionStorage","keys","key","BrowserCannotReadSessionStorage","BrowserCannotWriteSessionStorage","BrowserFailedRemovalFromSessionStorage","disableCookies","_canUseCookies","canUseCookies","document","cookie","CannotAccessCookie","setCookie","value","domain","domainAttrib","secureAttrib","location","protocol","stringToBoolOrDefault","str","defaultValue","toLowerCase","getCookie","cookieName","cookies","split","trim","substring","deleteCookie","newId","base64chars","result","random","Math","charAt","floor","isArray","obj","Object","prototype","call","isError","isDate","toISOStringForIE8","date","toISOString","pad","number","r","String","getUTCFullYear","getUTCMonth","getUTCDate","getUTCHours","getUTCMinutes","getUTCSeconds","getUTCMilliseconds","toFixed","slice","getIEVersion","userAgentStr","myNav","navigator","userAgent","parseInt","msToTimeSpan","totalms","isNaN","round","ms","sec","min","hour","days","isCrossOriginError","url","lineNumber","columnNumber","error","object","objectTypeDump","propertyValueDump","stack","addEventHandler","eventName","callback","verbEventName","addEventListener","IsBeaconApiSupported","sendBeacon","NotSpecified","UrlHelper","parseUrl","htmlAnchorElement","createElement","href","getAbsoluteUrl","a","getPathName","pathname","getCompleteUrl","method","absoluteUrl","toUpperCase","FieldType","Serializer","serialize","input","output","_serializeObject","source","CannotSerializeObject","CircularReferenceDetected","aiDataContract","_serializeStringMap","_serializeArray","CannotSerializeObjectNonSerializable","field","contract","isRequired","Required","isHidden","Hidden","Array","isPresent","isObject","MissingRequiredFieldSpecification","sources","item","ItemNotInArray","map","expectedType","num","parseFloat","Common","_super","_this","DataSanitizer","sanitizeString","time","iKey","__extends","apply","arguments","ContextTagKeys","applicationVersion","applicationBuild","applicationTypeId","applicationId","deviceId","deviceIp","deviceLanguage","deviceLocale","deviceModel","deviceNetwork","deviceNetworkName","deviceOEMName","deviceOS","deviceOSVersion","deviceRoleInstance","deviceRoleName","deviceScreenResolution","deviceType","deviceMachineName","deviceVMName","locationIp","operationId","operationName","operationParentId","operationRootId","operationSyntheticSource","operationIsSynthetic","operationCorrelationVector","sessionId","sessionIsFirst","sessionIsNew","userAccountAcquisitionDate","userAccountId","userId","userStoreRegion","userAuthUserId","userAnonymousUserAcquisitionDate","userAuthenticatedUserAcquisitionDate","cloudName","cloudRoleVer","cloudEnvironment","cloudLocation","cloudDeploymentUnit","serverDeviceOS","serverDeviceOSVer","internalSdkVersion","internalAgentVersion","internalDataCollectorReceivedTime","internalProfileId","internalProfileClassId","internalAccountId","internalApplicationName","internalInstrumentationKey","internalTelemetryItemId","internalApplicationType","internalRequestSource","internalFlowType","internalIsAudit","internalTrackingSourceId","internalTrackingType","internalIsDiagnosticExample","Application","Device","id","type","Internal","config","sdkVersion","sdkExtension","Version","Location","Operation","HashCodeScoreGenerator","getHashCodeScore","getHashCode","INT_MAX_VALUE","MIN_INPUT_LENGTH","concat","hash","charCodeAt","abs","SamplingScoreGenerator","hashCodeGeneragor","getSamplingScore","envelope","tagKeys","Sample","SampleRateOutOfRange","samplingRate","samplingScoreGenerator","isSampledIn","SessionState","Session","_SessionManager","sessionExpirationMs","acquisitionSpan","sessionRenewalMs","renewalSpan","automaticSession","update","initializeAutomaticSession","now","dateTime","Now","acquisitionExpired","acquisitionDate","renewalExpired","renewalDate","isFirst","renew","cookieUpdatedTimestamp","cookieUpdateInterval","backup","initializeAutomaticSessionWithData","sessionData","params","acq","renewal","ErrorParsingAISessionCookie","SessionRenewalDateIsZero","BrowserDoesNotSupportLocalStorage","guid","acquisitionExpiry","renewalExpiry","cookieExpiry","setTime","cookieDomnain","cookieDomain","join","toUTCString","User","userCookieName","cookieSeparator","acqStr","accountAcquisitionDate","getTime","newCookie","accountId","authCookie","authUserCookieName","decodeURI","authCookieString","authenticatedId","setAuthenticatedUserContext","authenticatedUserId","storeInCookie","validateUserInput","SetAuthContextFailedAccountName","encodeURI","clearAuthenticatedUserContext","match","extensions","IsNullOrUndefined","stringUtils","GetLength","strObject","res","stringified","ex","performance","timing","navigationStart","GetDuration","start","end","EventHelper","AttachEvent","eventNameWithoutOn","handlerRef","attachEvent","DetachEvent","detachEvent","removeEventListener","XHRMonitoringState","openDone","setRequestHeaderDone","sendDone","abortDone","onreadystatechangeCallbackAttached","ajaxRecord","completed","requestHeadersSize","ttfb","responseReceivingDuration","callbackDuration","ajaxTotalDuration","aborted","pageUrl","requestUrl","requestSize","status","requestSentTime","responseStartedTime","responseFinishedTime","callbackFinishedTime","endTime","originalOnreadystatechage","xhrMonitoringState","clientFailure","CalculateMetrics","self","sanitizeUrl","AjaxMonitor","appInsights","currentWindowHost","host","initialized","Init","supportsMonitoring","instrumentOpen","instrumentSend","instrumentAbort","isMonitoredInstance","xhr","excludeAjaxDataValidation","ajaxData","DisabledPropertyName","XMLHttpRequest","open","send","abort","originalOpen","ajaxMonitorInstance","async","openHandler","FailedMonitorAjaxOpen","ajaxDiagnosticsMessage","getFailedAjaxDiagnosticsMessage","attachToOnReadyStateChange","originalSend","content","sendHandler","FailedMonitorAjaxSend","disableCorrelationHeaders","rootId","context","operation","setRequestHeader","originalAbort","FailedMonitorAjaxAbort","readyState","onAjaxComplete","exceptionText","FailedMonitorAjaxRSC","FailedMonitorAjaxDur","trackDependency","instrumentedByAppInsightsName","ArraySendBuffer","_config","_buffer","enqueue","payload","count","clear","getItems","batchPayloads","emitLineDelimitedJson","markAsSent","clearSent","SessionStorageSendBuffer","_bufferFullMessageSent","bufferItems","getBuffer","BUFFER_KEY","notDeliveredItems","SENT_BUFFER_KEY","MAX_BUFFER_SIZE","setBuffer","SessionStorageBufferFull","removePayloadsFromBuffer","sentElements","payloads","buffer","remaining","contains","j","bufferJson","parse","FailedToRestoreStorageBuffer","FailedToSetStorageBuffer","Sender","_XMLHttpRequestSupported","_consecutiveErrors","_retryAt","_lastSend","_sender","enableSessionStorageBuffer","isBeaconApiDisabled","_beaconSender","testXhr","_xhrSender","XDomainRequest","_xdrSender","disableTelemetry","CannotSendEmptyTelemetry","SenderNotInitialized","bufferPayload","batch","maxBatchSizeInBytes","triggerSend","_setupTimer","FailedAddingTelemetryToBuffer","_timeoutHandle","retryInterval","max","timerValue","maxBatchInterval","setTimeout","_getSizeInBytes","list","size","clearTimeout","TransmissionFailed","_setRetryTime","delayInSeconds","backOffSlot","pow","backOffDelay","retryAfterTimeSpan","_parseResponse","response","itemsReceived","itemsAccepted","errors","InvalidBackendResponse","_isRetriable","statusCode","_resendPayload","_i","payload_1","_formatErrorMessageXhr","responseText","_formatErrorMessageXdr","xdr","isAsync","endpointUrl","onreadystatechange","_xhrReadyStateChange","onerror","event","_onError","onload","_xdrOnLoad","hostingProtocol","lastIndexOf","countOfItemsInPayload","isRetryDisabled","_onPartialSuccess","_onSuccess","results","failed","retry","reverse","errors_1","extracted","splice","index","OnError","MaxBeaconPayloadSize","Domain","MessageData","sanitizeKeyAndAddUniqueness","origLength","sanitizeKey","uniqueField","MAX_NAME_LENGTH","padNumber","NameTooLong","MAX_STRING_LENGTH","StringValueTooLong","MAX_URL_LENGTH","UrlTooLong","sanitizeMessage","MAX_MESSAGE_LENGTH","MessageTruncated","sanitizeException","MAX_EXCEPTION_LENGTH","ExceptionTruncated","sanitizeProperties","tempProps","prop","sanitizeMeasurements","measurements","tempMeasurements","measure","s","substr","Trace","severityLevel","Default","envelopeType","dataType","EventData","Event","ExceptionDetails","hasFullStack","parsedStack","ExceptionData","exceptions","StackFrame","Exception","handledAt","_ExceptionDetails","CreateSimpleException","typeName","assembly","fileName","details","line","outerId","parseStack","frames","level","totalSizeInBytes","frame","_StackFrame","regex","test","parsedFrame","sizeInBytes","left","right","acceptedLeft","acceptedRight","lSize","rSize","howMany","matches","baseSize","MetricData","metrics","DataPointType","DataPoint","kind","Measurement","stdDev","Metric","dataPoint","PageViewData","PageView","durationMs","duration","PageViewPerfData","PageViewPerformance","unused","perfTotal","networkConnect","sentRequest","receivedResponse","domProcessing","isValid","getPerformanceTiming","total","getDuration","loadEventEnd","network","connectEnd","request","requestStart","responseStart","responseEnd","dom","ErrorPVCalc","shouldCollectDuration","ClientPerformanceMathError","InvalidDurationValue","getIsValid","getDurationMs","isPerformanceTimingSupported","isPerformanceTimingDataReady","domainLookupStart","domLoading","durations","MAX_DURATION_ALLOWED","TelemetryContext","telemetryInitializers","_sessionManager","application","device","internal","user","session","sample","_addDefaultTelemetryInitializers","addTelemetryInitializer","telemetryInitializer","track","_track","TrackArgumentsNotSpecified","isBrowserLinkTrackingEnabled","browserLinkPaths_1","dropBrowserLinkRequests","RemoteDependencyData","remoteData","baseData","_applySessionContext","_applyApplicationContext","_applyDeviceContext","_applyInternalContext","_applyLocationContext","_applySampleContext","_applyUserContext","_applyOperationContext","instrumentationKey","doNotSendItem","telemetryInitializersCount","TelemetryInitializerFailed","_fixDepricatedValues","iKeyNoDashes","TelemetrySampledAndNotSent","SampleRate","appContext","build","deviceContext","ip","language","locale","model","oemName","os","osversion","resolution","internalContext","agentVersion","locationContext","operationContext","parentId","syntheticSource","sampleContext","sessionContext","userContext","agent","storeRegion","baseType","rddData","_fixRDDDepricatedValues","FailedToFixDepricatedValues","commandName","dependencyTypeName","dependencySource","dependencyKind","Data","PageViewManager","overridePageViewDuration","pageViewPerformanceSent","trackPageView","title","pageViewSent","customDuration","sendPageViewInternal","flush","NavigationTimingNotSupported","handle","setInterval","clearInterval","pageViewPerformance","sendPageViewPerformanceInternal","TrackPVFailedCalc","PageVisitTimeManager","pageVisitTimeTrackingHandler","prevPageVisitDataKeyName","trackPreviousPageVisit","currentPageName","currentPageUrl","prevPageVisitTimeData","restartPageVisitTimer","pageName","pageVisitTime","prevPageVisitData","stopPageVisitTimer","startPageVisitTimer","currPageVisitData","PageVisitData","currPageVisitDataStr","pageVisitEndTime","pageVisitDataJsonStr","pageVisitStartTime","DependencyKind","DependencySourceType","Aggregation","Other","success","Apmc","resultCode","target","Http","parsedUrl","pathName","SplitTest","isEnabled","percentEnabled","AppInsights","_trackAjaxAttempts","defaults","defaultConfig","enableDebug","configGetters","samplingPercentage","isCookieUseDisabled","isStorageUseDisabled","_pageViewManager","_eventTracking","Timing","action","_pageTracking","_pageVisitTimeManager","trackPageVisitTime","disableAjaxTracking","_ajaxMonitor","pageView","pageViewPerformanceData","pageViewPerformanceEnvelope","startTrackPage","StartTrackFailed","stopTrackPage","stop","autoTrackPageVisitTime","StopTrackFailed","TrackPVFailed","startTrackEvent","StartTrackEventFailed","stopTrackEvent","StopTrackEventFailed","trackEvent","eventTelemetry","TrackEventFailed","totalTime","maxAjaxCallsPerView","dependency","dependencyData","MaxAjaxPerPVExceeded","trackAjax","trackException","exceptionTelemetry","TrackExceptionFailed","trackMetric","average","sampleCount","telemetry","TrackMetricFailed","trackTrace","TrackTraceFailed","PageName","PageUrl","FlushFailed","SetAuthContextFailed","SendCORSException","exceptionData","_onerror","URL","errorString","exceptionDump","ExceptionWhileLoggingError","_name","_events","StartCalledMoreThanOnce","StopCalledWithoutStart","DataLossAnalyzer","reset","ITEMS_QUEUED_KEY","ISSUES_REPORTED_KEY","itemsRestoredFromSessionBuffer","enabled","getIssuesReported","incrementItemsQueued","itemsQueued","getNumberOfLostItems","decrementItemsQueued","countOfItemsSentSuccessfully","reportLostItems","LIMIT_PER_SESSION","lostItems","issuesReported","FailedToReportDataLoss","Initialization","snippet","getDefaultConfig","loadAppInsights","originalTrackPageView","pagePath","emptyQueue","FailedToSendQueuedTelemetry","pollInteralLogs","appInsightsInstance","diagnosticLogInterval","addHousekeepingBeforeUnload","disableFlushOnBeforeUnload","performHousekeeping","FailedToAddHandlerForOnBeforeUnload","disableExceptionTracking","init","appInsightsLocal"],"mappings":"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","file":"ai.0.js","sourcesContent":["module Microsoft.ApplicationInsights {\r\n\r\n    \"use strict\";\r\n\r\n    export interface IConfig {\r\n        instrumentationKey?: string;\r\n        endpointUrl?: string;\r\n        emitLineDelimitedJson?: boolean;\r\n        accountId?: string;\r\n        sessionRenewalMs?: number;\r\n        sessionExpirationMs?: number;\r\n        maxBatchSizeInBytes?: number;\r\n        maxBatchInterval?: number;\r\n        enableDebug?: boolean;\r\n        disableExceptionTracking?: boolean;\r\n        disableTelemetry?: boolean;\r\n        verboseLogging?: boolean;\r\n        diagnosticLogInterval?: number;\r\n        samplingPercentage?: number;\r\n        autoTrackPageVisitTime?: boolean;\r\n        disableAjaxTracking?: boolean;\r\n        overridePageViewDuration?: boolean;\r\n        maxAjaxCallsPerView?: number;\r\n        disableDataLossAnalysis?: boolean;\r\n        disableCorrelationHeaders?: boolean;\r\n        disableFlushOnBeforeUnload?: boolean;\r\n        enableSessionStorageBuffer?: boolean;\r\n        isCookieUseDisabled?: boolean;\r\n        cookieDomain?: string;\r\n        isRetryDisabled?: boolean;\r\n        url?: string;\r\n        isStorageUseDisabled?: boolean;\r\n        isBeaconApiDisabled?: boolean;\r\n        sdkExtension?: string;\r\n        isBrowserLinkTrackingEnabled?: boolean;\r\n    }\r\n}","// THIS TYPE WAS AUTOGENERATED\r\nmodule Microsoft.Telemetry\r\n{\r\n\"use strict\";\r\n    export class Base\r\n    {\r\n        public baseType: string;\r\n        \r\n        constructor()\r\n        {\r\n        }\r\n    }\r\n}\r\n","// THIS TYPE WAS AUTOGENERATED\r\n/// <reference path=\"Base.ts\" />\r\nmodule Microsoft.Telemetry\r\n{\r\n\"use strict\";\r\n    export class Envelope\r\n    {\r\n        public ver: number;\r\n        public name: string;\r\n        public time: string;\r\n        public sampleRate: number;\r\n        public seq: string;\r\n        public iKey: string;\r\n        public flags: number;\r\n        public deviceId: string;\r\n        public os: string;\r\n        public osVer: string;\r\n        public appId: string;\r\n        public appVer: string;\r\n        public userId: string;\r\n        public tags: any;\r\n        public data: Base;\r\n        \r\n        constructor()\r\n        {\r\n            this.ver = 1;\r\n            this.sampleRate = 100.0;\r\n            this.tags = {};\r\n        }\r\n    }\r\n}\r\n","module Microsoft.ApplicationInsights.Context {\r\n\r\n    \"use strict\";\r\n\r\n    export interface IApplication {\r\n        /**\r\n         * The application version.\r\n         */\r\n        ver: string;\r\n\r\n        /**\r\n         * The application build version.\r\n         */\r\n        build: string;\r\n    }\r\n}","module Microsoft.ApplicationInsights.Context {\r\n\r\n    \"use strict\";\r\n\r\n    export interface IDevice {\r\n        /**\r\n         * The type for the current device.\r\n         */\r\n        type: string;\r\n\r\n        /**\r\n         * A device unique ID.\r\n         */\r\n        id: string;\r\n\r\n        /**\r\n         * The device OEM for the current device.\r\n         */\r\n        oemName: string;\r\n\r\n        /**\r\n         * The device model for the current device.\r\n         */\r\n        model: string;\r\n\r\n        /**\r\n         * The IANA interface type for the internet connected network adapter.\r\n         */\r\n        network: number;\r\n\r\n        /**\r\n         * The application screen resolution.\r\n         */\r\n        resolution: string;\r\n\r\n        /**\r\n         * The current display language of the operating system.\r\n         */\r\n        locale: string;\r\n\r\n        /**\r\n         * The IP address.\r\n         */\r\n        ip: string;\r\n\r\n        /**\r\n         * The device language.\r\n         */\r\n        language: string;\r\n\r\n        /**\r\n         * The OS name.\r\n         */\r\n        os: string;\r\n\r\n        /**\r\n         * The OS version.\r\n         */\r\n        osversion: string;\r\n    }\r\n}","module Microsoft.ApplicationInsights.Context {\r\n\r\n    \"use strict\";\r\n\r\n    export interface IInternal {\r\n        /**\r\n        * The SDK version used to create this telemetry item.\r\n        */\r\n        sdkVersion: string;\r\n\r\n        /**\r\n         * The SDK agent version.\r\n         */\r\n        agentVersion: string;\r\n    }\r\n}","module Microsoft.ApplicationInsights.Context {\r\n\r\n    \"use strict\";\r\n\r\n    export interface ILocation {\r\n        /**\r\n         * Client IP address for reverse lookup\r\n         */\r\n        ip: string;\r\n    }\r\n}","module Microsoft.ApplicationInsights.Context {\r\n\r\n    \"use strict\";\r\n\r\n    export interface IOperation {\r\n        /**\r\n         * Operation id\r\n         */\r\n        id: string;\r\n\r\n        /**\r\n         * Operation name\r\n         */\r\n        name: string;\r\n\r\n        /**\r\n         * Parent operation id\r\n         */\r\n        parentId: string;\r\n\r\n        /**\r\n         * Root operation id\r\n         */\r\n        rootId: string;\r\n\r\n        /**\r\n         * Synthetic source of the operation\r\n         */\r\n        syntheticSource: string;\r\n    }\r\n}","module Microsoft.ApplicationInsights.Context {\r\n\r\n    \"use strict\";\r\n\r\n    export interface ISample {\r\n        /**\r\n        * Sample rate\r\n        */\r\n        sampleRate: number;\r\n    }\r\n}","module Microsoft.ApplicationInsights.Context {\r\n\r\n    \"use strict\";\r\n\r\n    export interface IUser {\r\n        /**\r\n        * The telemetry configuration.\r\n        */\r\n        config: any;\r\n\r\n        /**\r\n         * The user ID.\r\n         */\r\n        id: string;\r\n\r\n        /**\r\n         * Authenticated user id\r\n         */\r\n        authenticatedId: string;\r\n\r\n        /**\r\n         * The account ID.\r\n         */\r\n        accountId: string;\r\n\r\n        /**\r\n         * The account acquisition date.\r\n         */\r\n        accountAcquisitionDate: string;\r\n\r\n        /**\r\n         * The user agent string.\r\n         */\r\n        agent: string;\r\n\r\n        /**\r\n         * The store region.\r\n         */\r\n        storeRegion: string;\r\n    }\r\n}","module Microsoft.ApplicationInsights.Context {\r\n\r\n    \"use strict\";\r\n\r\n    export interface ISession {\r\n        /**\r\n        * The session ID.\r\n        */\r\n        id: string;\r\n\r\n        /**  \r\n         * The true if this is the first session  \r\n         */\r\n        isFirst: boolean;\r\n\r\n        /**\r\n         * The date at which this guid was genereated.\r\n         * Per the spec the ID will be regenerated if more than acquisitionSpan milliseconds ellapse from this time.\r\n         */\r\n        acquisitionDate: number;\r\n\r\n        /**\r\n         * The date at which this session ID was last reported.\r\n         * This value should be updated whenever telemetry is sent using this ID.\r\n         * Per the spec the ID will be regenerated if more than renewalSpan milliseconds elapse from this time with no activity.\r\n         */\r\n        renewalDate: number;\r\n    }\r\n}","module Microsoft.ApplicationInsights {\r\n\r\n    \"use strict\";\r\n\r\n    export interface ISerializable {\r\n        /**\r\n         * The set of fields for a serializable object. \r\n         * This defines the serialization order and a value of true/false\r\n         * for each field defines whether the field is required or not.\r\n         */\r\n        aiDataContract: any;\r\n    }\r\n}\r\n","/// <reference path=\"./ISerializable.ts\" />\r\n\r\nmodule Microsoft.ApplicationInsights {\r\n\r\n    \"use strict\";\r\n\r\n    export interface IEnvelope extends ISerializable {\r\n        ver: number;\r\n        name: string;\r\n        time: string;\r\n        sampleRate: number;\r\n        seq: string;\r\n        iKey: string;\r\n        flags: number;\r\n        deviceId: string;\r\n        os: string;\r\n        osVer: string;\r\n        appId: string;\r\n        appVer: string;\r\n        userId: string;\r\n        tags: { [name: string]: any };\r\n        data: any;\r\n    }\r\n}\r\n","/// <reference path=\"./Contracts/Generated/Envelope.ts\" />\r\n/// <reference path=\"./Context/IApplication.ts\"/>\r\n/// <reference path=\"./Context/IDevice.ts\"/>\r\n/// <reference path=\"./Context/IInternal.ts\"/>\r\n/// <reference path=\"./Context/ILocation.ts\"/>\r\n/// <reference path=\"./Context/IOperation.ts\"/>\r\n/// <reference path=\"./Context/ISample.ts\"/>\r\n/// <reference path=\"./Context/IUser.ts\"/>\r\n/// <reference path=\"./Context/ISession.ts\"/>\r\n/// <reference path=\"./Telemetry/IEnvelope.ts\"/>\r\n\r\nmodule Microsoft.ApplicationInsights {\r\n\r\n    \"use strict\";\r\n\r\n    export interface ITelemetryContext {\r\n         /**\r\n         * The object describing a component tracked by this object.\r\n         */\r\n        application: Context.IApplication;\r\n\r\n        /**\r\n         * The object describing a device tracked by this object.\r\n         */\r\n        device: Context.IDevice;\r\n\r\n        /**\r\n        * The object describing internal settings.\r\n        */\r\n        internal: Context.IInternal;\r\n\r\n        /**\r\n         * The object describing a location tracked by this object.\r\n         */\r\n        location: Context.ILocation;\r\n\r\n        /**\r\n         * The object describing a operation tracked by this object.\r\n         */\r\n        operation: Context.IOperation;\r\n\r\n        /**\r\n        * The object describing sampling settings.\r\n        */\r\n        sample: Context.ISample;\r\n\r\n        /**\r\n         * The object describing a user tracked by this object.\r\n         */\r\n        user: Context.IUser;\r\n\r\n        /**\r\n         * The object describing a session tracked by this object.\r\n         */\r\n        session: Context.ISession;\r\n\r\n        /**\r\n        * Adds a telemetry initializer to the collection. Telemetry initializers will be called one by one, \r\n        * in the order they were added, before the telemetry item is pushed for sending. \r\n        * If one of the telemetry initializers returns false or throws an error then the telemetry item will not be sent. \r\n        * If it returns true or doesn't return any value the event will be passed to the next telemetry initializer and\r\n        * send to the cloud (if not rejected by other initializers). \r\n        */\r\n        addTelemetryInitializer(telemetryInitializer: (envelope: Microsoft.ApplicationInsights.IEnvelope) => boolean | void);\r\n\r\n         /**\r\n         * Tracks telemetry object.\r\n         */\r\n        track(envelope: Microsoft.ApplicationInsights.IEnvelope);\r\n    }\r\n}","// THIS TYPE WAS AUTOGENERATED\r\nmodule AI\r\n{\r\n\"use strict\";\r\n    export enum SeverityLevel\r\n    {\r\n        Verbose = 0,\r\n        Information = 1,\r\n        Warning = 2,\r\n        Error = 3,\r\n        Critical = 4,\r\n    }\r\n}\r\n","/// <reference path=\"./IConfig.ts\" />\r\n/// <reference path=\"./ITelemetryContext.ts\" />\r\n/// <reference path=\"./Contracts/Generated/SeverityLevel.ts\" />\r\n\r\n\r\nmodule Microsoft.ApplicationInsights {\r\n\r\n    \"use strict\";\r\n\r\n    export interface IAppInsights {\r\n\r\n        /*\r\n        * Config object used to initialize AppInsights\r\n        */\r\n        config: IConfig;\r\n\r\n        context: ITelemetryContext;\r\n\r\n        /*\r\n        * Initialization queue. Contains functions to run when appInsights initializes\r\n        */\r\n        queue: Array<() => void>;\r\n\r\n        /**\r\n        * Starts timing how long the user views a page or other item. Call this when the page opens. \r\n        * This method doesn't send any telemetry. Call {@link stopTrackTelemetry} to log the page when it closes.\r\n        * @param   name  A string that idenfities this item, unique within this HTML document. Defaults to the document title.\r\n        */\r\n        startTrackPage(name?: string);\r\n\r\n        /**\r\n        * Logs how long a page or other item was visible, after {@link startTrackPage}. Call this when the page closes. \r\n        * @param   name  The string you used as the name in startTrackPage. Defaults to the document title.\r\n        * @param   url   String - a relative or absolute URL that identifies the page or other item. Defaults to the window location.\r\n        * @param   properties  map[string, string] - additional data used to filter pages and metrics in the portal. Defaults to empty.\r\n        * @param   measurements    map[string, number] - metrics associated with this page, displayed in Metrics Explorer on the portal. Defaults to empty.\r\n        */\r\n        stopTrackPage(name?: string, url?: string, properties?: { [name: string]: string; }, measurements?: { [name: string]: number; });\r\n\r\n        /**\r\n         * Logs that a page or other item was viewed. \r\n         * @param   name  The string you used as the name in startTrackPage. Defaults to the document title.\r\n         * @param   url   String - a relative or absolute URL that identifies the page or other item. Defaults to the window location.\r\n         * @param   properties  map[string, string] - additional data used to filter pages and metrics in the portal. Defaults to empty.\r\n         * @param   measurements    map[string, number] - metrics associated with this page, displayed in Metrics Explorer on the portal. Defaults to empty.\r\n         * @param   duration    number - the number of milliseconds it took to load the page. Defaults to undefined. If set to default value, page load time is calculated internally.\r\n         */\r\n        trackPageView(name?: string, url?: string, properties?: { [name: string]: string; }, measurements?: { [name: string]: number; }, duration?: number);\r\n\r\n        /**\r\n         * Start timing an extended event. Call {@link stopTrackEvent} to log the event when it ends.\r\n         * @param   name    A string that identifies this event uniquely within the document.\r\n         */\r\n        startTrackEvent(name: string);\r\n\r\n\r\n        /** \r\n         * Log an extended event that you started timing with {@link startTrackEvent}.\r\n         * @param   name    The string you used to identify this event in startTrackEvent.\r\n         * @param   properties  map[string, string] - additional data used to filter events and metrics in the portal. Defaults to empty.\r\n         * @param   measurements    map[string, number] - metrics associated with this event, displayed in Metrics Explorer on the portal. Defaults to empty.\r\n         */\r\n        stopTrackEvent(name: string, properties?: { [name: string]: string; }, measurements?: { [name: string]: number; });\r\n\r\n        /** \r\n        * Log a user action or other occurrence.\r\n        * @param   name    A string to identify this event in the portal.\r\n        * @param   properties  map[string, string] - additional data used to filter events and metrics in the portal. Defaults to empty.\r\n        * @param   measurements    map[string, number] - metrics associated with this event, displayed in Metrics Explorer on the portal. Defaults to empty.\r\n        */\r\n        trackEvent(name: string, properties?: { [name: string]: string; }, measurements?: { [name: string]: number; });\r\n\r\n        /**\r\n         * Log a dependency call\r\n         * @param id    unique id, this is used by the backend o correlate server requests. Use Util.newId() to generate a unique Id.\r\n         * @param method    represents request verb (GET, POST, etc.)\r\n         * @param absoluteUrl   absolute url used to make the dependency request\r\n         * @param pathName  the path part of the absolute url\r\n         * @param totalTime total request time\r\n         * @param success   indicates if the request was sessessful\r\n         * @param resultCode    response code returned by the dependency request\r\n         */\r\n        trackDependency(id: string, method: string, absoluteUrl: string, pathName: string, totalTime: number, success: boolean, resultCode: number);\r\n\r\n        /**\r\n         * Log an exception you have caught.\r\n         * @param   exception   An Error from a catch clause, or the string error message.\r\n         * @param   properties  map[string, string] - additional data used to filter events and metrics in the portal. Defaults to empty.\r\n         * @param   measurements    map[string, number] - metrics associated with this event, displayed in Metrics Explorer on the portal. Defaults to empty.\r\n         * @param   severityLevel   AI.SeverityLevel - severity level\r\n         */\r\n        trackException(exception: Error, handledAt?: string, properties?: { [name: string]: string; }, measurements?: { [name: string]: number; }, severityLevel?: AI.SeverityLevel);\r\n\r\n        /**\r\n         * Log a numeric value that is not associated with a specific event. Typically used to send regular reports of performance indicators.\r\n         * To send a single measurement, use just the first two parameters. If you take measurements very frequently, you can reduce the \r\n         * telemetry bandwidth by aggregating multiple measurements and sending the resulting average at intervals.\r\n         * @param   name    A string that identifies the metric.\r\n         * @param   average Number representing either a single measurement, or the average of several measurements.\r\n         * @param   sampleCount The number of measurements represented by the average. Defaults to 1.\r\n         * @param   min The smallest measurement in the sample. Defaults to the average.\r\n         * @param   max The largest measurement in the sample. Defaults to the average.\r\n         */\r\n        trackMetric(name: string, average: number, sampleCount?: number, min?: number, max?: number, properties?: { [name: string]: string; });\r\n\r\n        /**\r\n        * Log a diagnostic message. \r\n        * @param   message A message string \r\n        * @param   properties  map[string, string] - additional data used to filter traces in the portal. Defaults to empty.\r\n        * @param   severityLevel   AI.SeverityLevel - severity level\r\n        */\r\n        trackTrace(message: string, properties?: { [name: string]: string; }, severityLevel?: AI.SeverityLevel);\r\n\r\n\r\n        /**\r\n         * Immediately send all queued telemetry.\r\n         * @param {boolean} async - If flush should be call asynchronously\r\n         */\r\n        flush(async?: boolean);\r\n\r\n\r\n        /**\r\n        * Sets the autheticated user id and the account id in this session.\r\n        * User auth id and account id should be of type string. They should not contain commas, semi-colons, equal signs, spaces, or vertical-bars.\r\n        *   \r\n        * @param authenticatedUserId {string} - The authenticated user id. A unique and persistent string that represents each authenticated user in the service.\r\n        * @param accountId {string} - An optional string to represent the account associated with the authenticated user.\r\n        */\r\n        setAuthenticatedUserContext(authenticatedUserId: string, accountId?: string);\r\n\r\n\r\n        /**\r\n         * Clears the authenticated user id and the account id from the user context.\r\n         */\r\n        clearAuthenticatedUserContext();\r\n\r\n        /*\r\n        * Downloads and initializes AppInsights. You can override default script download location by specifying url property of `config`.\r\n        */\r\n        downloadAndSetup?(config: Microsoft.ApplicationInsights.IConfig): void;\r\n\r\n        /**\r\n         * The custom error handler for Application Insights\r\n         * @param {string} message - The error message\r\n         * @param {string} url - The url where the error was raised\r\n         * @param {number} lineNumber - The line number where the error was raised\r\n         * @param {number} columnNumber - The column number for the line where the error was raised\r\n         * @param {Error}  error - The Error object\r\n         */\r\n        _onerror(message: string, url: string, lineNumber: number, columnNumber: number, error: Error);\r\n    }\r\n}","module Microsoft.ApplicationInsights {\r\n\r\n    export enum LoggingSeverity {\r\n        /**\r\n         * Error will be sent as internal telemetry\r\n         */\r\n        CRITICAL = 0,\r\n\r\n        /**\r\n         * Error will NOT be sent as internal telemetry, and will only be shown in browser console\r\n         */\r\n        WARNING = 1\r\n    }\r\n\r\n    /**\r\n     * Internal message ID. Please create a new one for every conceptually different message. Please keep alphabetically ordered\r\n     */\r\n    export enum _InternalMessageId {\r\n        // Non user actionable\r\n        BrowserDoesNotSupportLocalStorage,\r\n        BrowserCannotReadLocalStorage,\r\n        BrowserCannotReadSessionStorage,\r\n        BrowserCannotWriteLocalStorage,\r\n        BrowserCannotWriteSessionStorage,\r\n        BrowserFailedRemovalFromLocalStorage,\r\n        BrowserFailedRemovalFromSessionStorage,\r\n        CannotSendEmptyTelemetry,\r\n        ClientPerformanceMathError,\r\n        ErrorParsingAISessionCookie,\r\n        ErrorPVCalc,\r\n        ExceptionWhileLoggingError,\r\n        FailedAddingTelemetryToBuffer,\r\n        FailedMonitorAjaxAbort,\r\n        FailedMonitorAjaxDur,\r\n        FailedMonitorAjaxOpen,\r\n        FailedMonitorAjaxRSC,\r\n        FailedMonitorAjaxSend,\r\n        FailedToAddHandlerForOnBeforeUnload,\r\n        FailedToSendQueuedTelemetry,\r\n        FailedToReportDataLoss,\r\n        FlushFailed,\r\n        MessageLimitPerPVExceeded,\r\n        MissingRequiredFieldSpecification,\r\n        NavigationTimingNotSupported,\r\n        OnError,\r\n        SessionRenewalDateIsZero,\r\n        SenderNotInitialized,\r\n        StartTrackEventFailed,\r\n        StopTrackEventFailed,\r\n        StartTrackFailed,\r\n        StopTrackFailed,\r\n        TelemetrySampledAndNotSent,\r\n        TrackEventFailed,\r\n        TrackExceptionFailed,\r\n        TrackMetricFailed,\r\n        TrackPVFailed,\r\n        TrackPVFailedCalc,\r\n        TrackTraceFailed,\r\n        TransmissionFailed,\r\n        FailedToSetStorageBuffer,\r\n        FailedToRestoreStorageBuffer,\r\n        InvalidBackendResponse,\r\n        FailedToFixDepricatedValues,\r\n        InvalidDurationValue,\r\n\r\n        // User actionable\r\n        CannotSerializeObject,\r\n        CannotSerializeObjectNonSerializable,\r\n        CircularReferenceDetected,\r\n        ClearAuthContextFailed,\r\n        ExceptionTruncated,\r\n        IllegalCharsInName,\r\n        ItemNotInArray,\r\n        MaxAjaxPerPVExceeded,\r\n        MessageTruncated,\r\n        NameTooLong,\r\n        SampleRateOutOfRange,\r\n        SetAuthContextFailed,\r\n        SetAuthContextFailedAccountName,\r\n        StringValueTooLong,\r\n        StartCalledMoreThanOnce,\r\n        StopCalledWithoutStart,\r\n        TelemetryInitializerFailed,\r\n        TrackArgumentsNotSpecified,\r\n        UrlTooLong,\r\n        SessionStorageBufferFull,\r\n        CannotAccessCookie,\r\n    }\r\n\r\n    export class _InternalLogMessage {\r\n        public message: string;\r\n        public messageId: _InternalMessageId;\r\n\r\n        /**\r\n         * For user non actionable traces use AI Internal prefix.\r\n         */\r\n        private static AiNonUserActionablePrefix = \"AI (Internal): \";\r\n\r\n        /**\r\n         * Prefix of the traces in portal.\r\n         */\r\n        private static AiUserActionablePrefix = \"AI: \";\r\n\r\n        constructor(msgId: _InternalMessageId, msg: string, isUserAct = false, properties?: Object) {\r\n\r\n            this.messageId = msgId;\r\n            this.message =\r\n                (isUserAct ? _InternalLogMessage.AiUserActionablePrefix : _InternalLogMessage.AiNonUserActionablePrefix) +\r\n                _InternalMessageId[msgId].toString();\r\n\r\n            var diagnosticText =\r\n                (msg ? \" message:\" + _InternalLogMessage.sanitizeDiagnosticText(msg) : \"\") +\r\n                (properties ? \" props:\" + _InternalLogMessage.sanitizeDiagnosticText(JSON.stringify(properties)) : \"\");\r\n\r\n            this.message += diagnosticText;\r\n        }\r\n\r\n        private static sanitizeDiagnosticText(text: string) {\r\n            return \"\\\"\" + text.replace(/\\\"/g, \"\") + \"\\\"\";\r\n        }\r\n    }\r\n\r\n    export class _InternalLogging {\r\n\r\n        /**\r\n        *  Session storage key for the prefix for the key indicating message type already logged\r\n        */\r\n        private static AIInternalMessagePrefix: string = \"AITR_\";\r\n\r\n        /**\r\n         * When this is true the SDK will throw exceptions to aid in debugging.\r\n         */\r\n        public static enableDebugExceptions = () => false;\r\n\r\n        /**\r\n         * When this is true the SDK will log more messages to aid in debugging.\r\n         */\r\n        public static verboseLogging = () => false;\r\n\r\n        /**\r\n         * The internal logging queue\r\n         */\r\n        public static queue: Array<_InternalLogMessage> = [];\r\n\r\n        /**\r\n         * The maximum number of internal messages allowed to be sent per page view\r\n         */\r\n        private static MAX_INTERNAL_MESSAGE_LIMIT = 25;\r\n\r\n        /**\r\n         * Count of internal messages sent\r\n         */\r\n        private static _messageCount = 0;\r\n\r\n        /**\r\n         * Holds information about what message types were already logged to console or sent to server.\r\n         */\r\n        private static _messageLogged: { [type: string]: boolean } = {};\r\n\r\n        /**\r\n         * This method will throw exceptions in debug mode or attempt to log the error as a console warning.\r\n         * @param severity {LoggingSeverity} - The severity of the log message\r\n         * @param message {_InternalLogMessage} - The log message.\r\n         */\r\n        public static throwInternal(severity: LoggingSeverity, msgId: _InternalMessageId, msg: string, properties?: Object, isUserAct = false) {\r\n            let message = new _InternalLogMessage(msgId, msg, isUserAct, properties);\r\n\r\n            if (this.enableDebugExceptions()) {\r\n                throw message;\r\n            } else {\r\n                if (typeof (message) !== \"undefined\" && !!message) {\r\n                    if (typeof (message.message) !== \"undefined\") {\r\n                        if (isUserAct) {\r\n                            // check if this message type was already logged to console for this page view and if so, don't log it again\r\n                            var messageKey = _InternalMessageId[message.messageId];\r\n\r\n                            if (!this._messageLogged[messageKey] || this.verboseLogging()) {\r\n                                this.warnToConsole(message.message);\r\n                                this._messageLogged[messageKey] = true;\r\n                            }\r\n                        } else {\r\n                            // don't log internal AI traces in the console, unless the verbose logging is enabled\r\n                            if (this.verboseLogging()) {\r\n                                this.warnToConsole(message.message);\r\n                            }\r\n                        }\r\n\r\n                        this.logInternalMessage(severity, message);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        /**\r\n         * This will write a warning to the console if possible\r\n         * @param message {string} - The warning message\r\n         */\r\n        public static warnToConsole(message: string) {\r\n            if (typeof console !== \"undefined\" && !!console) {\r\n                if (typeof console.warn === \"function\") {\r\n                    console.warn(message);\r\n                } else if (typeof console.log === \"function\") {\r\n                    console.log(message);\r\n                }\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Resets the internal message count\r\n         */\r\n        public static resetInternalMessageCount(): void {\r\n            this._messageCount = 0;\r\n            this._messageLogged = {};\r\n        }\r\n\r\n        /**\r\n         * Clears the list of records indicating that internal message type was already logged\r\n         */\r\n        public static clearInternalMessageLoggedTypes(): void {\r\n            if (Util.canUseSessionStorage()) {\r\n                var sessionStorageKeys = Util.getSessionStorageKeys();\r\n                for (var i = 0; i < sessionStorageKeys.length; i++) {\r\n                    if (sessionStorageKeys[i].indexOf(_InternalLogging.AIInternalMessagePrefix) === 0) {\r\n                        Util.removeSessionStorage(sessionStorageKeys[i]);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Sets the limit for the number of internal events before they are throttled\r\n         * @param limit {number} - The throttle limit to set for internal events\r\n         */\r\n        public static setMaxInternalMessageLimit(limit: number): void {\r\n            if (!limit) {\r\n                throw new Error('limit cannot be undefined.');\r\n            }\r\n\r\n            this.MAX_INTERNAL_MESSAGE_LIMIT = limit;\r\n        }\r\n\r\n        /**\r\n         * Logs a message to the internal queue.\r\n         * @param severity {LoggingSeverity} - The severity of the log message\r\n         * @param message {_InternalLogMessage} - The message to log.\r\n         */\r\n        private static logInternalMessage(severity: LoggingSeverity, message: _InternalLogMessage): void {\r\n            if (this._areInternalMessagesThrottled()) {\r\n                return;\r\n            }\r\n\r\n            // check if this message type was already logged for this session and if so, don't log it again\r\n            var logMessage = true;\r\n            var messageKey = _InternalLogging.AIInternalMessagePrefix + _InternalMessageId[message.messageId];\r\n\r\n            if (Util.canUseSessionStorage()) {\r\n                var internalMessageTypeLogRecord = Util.getSessionStorage(messageKey);\r\n                if (internalMessageTypeLogRecord) {\r\n                    logMessage = false;\r\n                } else {\r\n                    Util.setSessionStorage(messageKey, \"1\");\r\n                }\r\n            } else {\r\n                // if the session storage is not available, limit to only one message type per page view\r\n                if (this._messageLogged[messageKey]) {\r\n                    logMessage = false;\r\n                } else {\r\n                    this._messageLogged[messageKey] = true;\r\n                }\r\n            }\r\n\r\n            if (logMessage) {\r\n                // Push the event in the internal queue\r\n                if (this.verboseLogging() || severity === LoggingSeverity.CRITICAL) {\r\n                    this.queue.push(message);\r\n                    this._messageCount++;\r\n                }\r\n\r\n                // When throttle limit reached, send a special event\r\n                if (this._messageCount == this.MAX_INTERNAL_MESSAGE_LIMIT) {\r\n                    var throttleLimitMessage = \"Internal events throttle limit per PageView reached for this app.\";\r\n                    var throttleMessage = new _InternalLogMessage(_InternalMessageId.MessageLimitPerPVExceeded, throttleLimitMessage, false);\r\n\r\n                    this.queue.push(throttleMessage);\r\n                    this.warnToConsole(throttleLimitMessage);\r\n                }\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Indicates whether the internal events are throttled\r\n         */\r\n        private static _areInternalMessagesThrottled(): boolean {\r\n            return this._messageCount >= this.MAX_INTERNAL_MESSAGE_LIMIT;\r\n        }\r\n    }\r\n}","/// <reference path=\"./Logging.ts\" />\r\nmodule Microsoft.ApplicationInsights {\r\n\r\n    /**\r\n    * Type of storage to differentiate between local storage and session storage\r\n    */\r\n    enum StorageType {\r\n        LocalStorage,\r\n        SessionStorage\r\n    }\r\n\r\n    export class Util {\r\n        private static document: any = typeof document !== \"undefined\" ? document : {};\r\n        private static _canUseCookies: boolean = undefined;\r\n        private static _canUseLocalStorage: boolean = undefined;\r\n        private static _canUseSessionStorage: boolean = undefined;\r\n        public static NotSpecified = \"not_specified\";\r\n\r\n        /*\r\n         * Force the SDK not to use local and session storage\r\n        */\r\n        public static disableStorage() {\r\n            Util._canUseLocalStorage = false;\r\n            Util._canUseSessionStorage = false;\r\n        }\r\n\r\n        /**\r\n         * Gets the localStorage object if available\r\n         * @return {Storage} - Returns the storage object if available else returns null\r\n         */\r\n        private static _getLocalStorageObject(): Storage {\r\n            if (Util.canUseLocalStorage()) {\r\n                return Util._getVerifiedStorageObject(StorageType.LocalStorage);\r\n            }\r\n\r\n            return null;\r\n        }\r\n\r\n        /**\r\n         * Tests storage object (localStorage or sessionStorage) to verify that it is usable\r\n         * More details here: https://mathiasbynens.be/notes/localstorage-pattern\r\n         * @param storageType Type of storage\r\n         * @return {Storage} Returns storage object verified that it is usable\r\n         */\r\n        private static _getVerifiedStorageObject(storageType: StorageType): Storage {\r\n            var storage: Storage = null;\r\n            var fail: boolean;\r\n            var uid;\r\n            try {\r\n                uid = new Date;\r\n                storage = storageType === StorageType.LocalStorage ? window.localStorage : window.sessionStorage;\r\n                storage.setItem(uid, uid);\r\n                fail = storage.getItem(uid) != uid;\r\n                storage.removeItem(uid);\r\n                if (fail) {\r\n                    storage = null;\r\n                }\r\n            } catch (exception) {\r\n                storage = null;\r\n            }\r\n\r\n            return storage;\r\n        }\r\n\r\n        /**\r\n         *  Check if the browser supports local storage.\r\n         *\r\n         *  @returns {boolean} True if local storage is supported.\r\n         */\r\n        public static canUseLocalStorage(): boolean {\r\n            if (Util._canUseLocalStorage === undefined) {\r\n                Util._canUseLocalStorage = !!Util._getVerifiedStorageObject(StorageType.LocalStorage);\r\n            }\r\n\r\n            return Util._canUseLocalStorage;\r\n        }\r\n\r\n        /**\r\n         *  Get an object from the browser's local storage\r\n         *\r\n         *  @param {string} name - the name of the object to get from storage\r\n         *  @returns {string} The contents of the storage object with the given name. Null if storage is not supported.\r\n         */\r\n        public static getStorage(name: string): string {\r\n            var storage = Util._getLocalStorageObject();\r\n            if (storage !== null) {\r\n                try {\r\n                    return storage.getItem(name);\r\n                } catch (e) {\r\n                    Util._canUseLocalStorage = false;\r\n\r\n                    _InternalLogging.throwInternal(\r\n                        LoggingSeverity.WARNING,\r\n                        _InternalMessageId.BrowserCannotReadLocalStorage,\r\n                        \"Browser failed read of local storage. \" + Util.getExceptionName(e),\r\n                        { exception: Util.dump(e) });\r\n                }\r\n            }\r\n            return null;\r\n        }\r\n\r\n        /**\r\n         *  Set the contents of an object in the browser's local storage\r\n         *\r\n         *  @param {string} name - the name of the object to set in storage\r\n         *  @param {string} data - the contents of the object to set in storage\r\n         *  @returns {boolean} True if the storage object could be written.\r\n         */\r\n        public static setStorage(name: string, data: string): boolean {\r\n            var storage = Util._getLocalStorageObject();\r\n            if (storage !== null) {\r\n                try {\r\n                    storage.setItem(name, data);\r\n                    return true;\r\n                } catch (e) {\r\n                    Util._canUseLocalStorage = false;\r\n\r\n                    _InternalLogging.throwInternal(\r\n                        LoggingSeverity.WARNING,\r\n                        _InternalMessageId.BrowserCannotWriteLocalStorage,\r\n                        \"Browser failed write to local storage. \" + Util.getExceptionName(e),\r\n                        { exception: Util.dump(e) });\r\n                }\r\n            }\r\n            return false;\r\n        }\r\n\r\n        /**\r\n         *  Remove an object from the browser's local storage\r\n         *\r\n         *  @param {string} name - the name of the object to remove from storage\r\n         *  @returns {boolean} True if the storage object could be removed.\r\n         */\r\n        public static removeStorage(name: string): boolean {\r\n            var storage = Util._getLocalStorageObject();\r\n            if (storage !== null) {\r\n                try {\r\n                    storage.removeItem(name);\r\n                    return true;\r\n                } catch (e) {\r\n                    Util._canUseLocalStorage = false;\r\n\r\n                    _InternalLogging.throwInternal(\r\n                        LoggingSeverity.WARNING,\r\n                        _InternalMessageId.BrowserFailedRemovalFromLocalStorage,\r\n                        \"Browser failed removal of local storage item. \" + Util.getExceptionName(e),\r\n                        { exception: Util.dump(e) });\r\n                }\r\n            }\r\n            return false;\r\n        }\r\n\r\n        /**\r\n         * Gets the sessionStorage object if available\r\n         * @return {Storage} - Returns the storage object if available else returns null\r\n         */\r\n        private static _getSessionStorageObject(): Storage {\r\n            if (Util.canUseSessionStorage()) {\r\n                return Util._getVerifiedStorageObject(StorageType.SessionStorage);\r\n            }\r\n\r\n            return null;\r\n        }\r\n\r\n        /**\r\n         *  Check if the browser supports session storage.\r\n         *\r\n         *  @returns {boolean} True if session storage is supported.\r\n         */\r\n        public static canUseSessionStorage(): boolean {\r\n            if (Util._canUseSessionStorage === undefined) {\r\n                Util._canUseSessionStorage = !!Util._getVerifiedStorageObject(StorageType.SessionStorage);\r\n            }\r\n\r\n            return Util._canUseSessionStorage;\r\n        }\r\n\r\n        /**\r\n         *  Gets the list of session storage keys\r\n         *\r\n         *  @returns {string[]} List of session storage keys\r\n         */\r\n        public static getSessionStorageKeys(): string[] {\r\n            var keys = [];\r\n\r\n            if (Util.canUseSessionStorage()) {\r\n                for (var key in window.sessionStorage) {\r\n                    keys.push(key);\r\n                }\r\n            }\r\n            return keys;\r\n        }\r\n\r\n        /**\r\n         *  Get an object from the browser's session storage\r\n         *\r\n         *  @param {string} name - the name of the object to get from storage\r\n         *  @returns {string} The contents of the storage object with the given name. Null if storage is not supported.\r\n         */\r\n        public static getSessionStorage(name: string): string {\r\n            var storage = Util._getSessionStorageObject();\r\n            if (storage !== null) {\r\n                try {\r\n                    return storage.getItem(name);\r\n                } catch (e) {\r\n                    Util._canUseSessionStorage = false;\r\n\r\n                    _InternalLogging.throwInternal(\r\n                        LoggingSeverity.WARNING,\r\n                        _InternalMessageId.BrowserCannotReadSessionStorage,\r\n                        \"Browser failed read of session storage. \" + Util.getExceptionName(e),\r\n                        { exception: Util.dump(e) });\r\n                }\r\n            }\r\n            return null;\r\n        }\r\n\r\n        /**\r\n         *  Set the contents of an object in the browser's session storage\r\n         *\r\n         *  @param {string} name - the name of the object to set in storage\r\n         *  @param {string} data - the contents of the object to set in storage\r\n         *  @returns {boolean} True if the storage object could be written.\r\n         */\r\n        public static setSessionStorage(name: string, data: string): boolean {\r\n            var storage = Util._getSessionStorageObject();\r\n            if (storage !== null) {\r\n                try {\r\n                    storage.setItem(name, data);\r\n                    return true;\r\n                } catch (e) {\r\n                    Util._canUseSessionStorage = false;\r\n\r\n                    _InternalLogging.throwInternal(\r\n                        LoggingSeverity.WARNING,\r\n                        _InternalMessageId.BrowserCannotWriteSessionStorage,\r\n                        \"Browser failed write to session storage. \" + Util.getExceptionName(e),\r\n                        { exception: Util.dump(e) });\r\n                }\r\n            }\r\n            return false;\r\n        }\r\n\r\n        /**\r\n         *  Remove an object from the browser's session storage\r\n         *\r\n         *  @param {string} name - the name of the object to remove from storage\r\n         *  @returns {boolean} True if the storage object could be removed.\r\n         */\r\n        public static removeSessionStorage(name: string): boolean {\r\n            var storage = Util._getSessionStorageObject();\r\n            if (storage !== null) {\r\n                try {\r\n                    storage.removeItem(name);\r\n                    return true;\r\n                } catch (e) {\r\n                    Util._canUseSessionStorage = false;\r\n\r\n                    _InternalLogging.throwInternal(\r\n                        LoggingSeverity.WARNING,\r\n                        _InternalMessageId.BrowserFailedRemovalFromSessionStorage,\r\n                        \"Browser failed removal of session storage item. \" + Util.getExceptionName(e),\r\n                        { exception: Util.dump(e) });\r\n                }\r\n            }\r\n            return false;\r\n        }\r\n\r\n        /*\r\n         * Force the SDK not to store and read any data from cookies\r\n         */\r\n        public static disableCookies() {\r\n            Util._canUseCookies = false;\r\n        }\r\n\r\n        /*\r\n         * helper method to tell if document.cookie object is available\r\n         */\r\n        public static canUseCookies(): any {\r\n            if (Util._canUseCookies === undefined) {\r\n                Util._canUseCookies = false;\r\n\r\n                try {\r\n                    Util._canUseCookies = Util.document.cookie !== undefined;\r\n                } catch (e) {\r\n                    _InternalLogging.throwInternal(\r\n                        LoggingSeverity.WARNING,\r\n                        _InternalMessageId.CannotAccessCookie,\r\n                        \"Cannot access document.cookie - \" + Util.getExceptionName(e),\r\n                        { exception: Util.dump(e) });\r\n                };\r\n            }\r\n\r\n            return Util._canUseCookies;\r\n        }\r\n\r\n        /**\r\n         * helper method to set userId and sessionId cookie\r\n         */\r\n        public static setCookie(name, value, domain?) {\r\n            var domainAttrib = \"\";\r\n            var secureAttrib = \"\";\r\n\r\n            if (domain) {\r\n                domainAttrib = \";domain=\" + domain;\r\n            }\r\n\r\n            if (Util.document.location && Util.document.location.protocol === \"https:\") {\r\n                secureAttrib = \";secure\";\r\n            }\r\n\r\n            if (Util.canUseCookies()) {\r\n                Util.document.cookie = name + \"=\" + value + domainAttrib + \";path=/\" + secureAttrib;\r\n            }\r\n        }\r\n\r\n        public static stringToBoolOrDefault(str: any, defaultValue = false): boolean {\r\n            if (str === undefined || str === null) {\r\n                return defaultValue;\r\n            }\r\n\r\n            return str.toString().toLowerCase() === \"true\";\r\n        }\r\n\r\n        /**\r\n         * helper method to access userId and sessionId cookie\r\n         */\r\n        public static getCookie(name) {\r\n            if (!Util.canUseCookies()) {\r\n                return;\r\n            }\r\n\r\n            var value = \"\";\r\n            if (name && name.length) {\r\n                var cookieName = name + \"=\";\r\n                var cookies = Util.document.cookie.split(\";\");\r\n                for (var i = 0; i < cookies.length; i++) {\r\n                    var cookie = cookies[i];\r\n                    cookie = Util.trim(cookie);\r\n                    if (cookie && cookie.indexOf(cookieName) === 0) {\r\n                        value = cookie.substring(cookieName.length, cookies[i].length);\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n\r\n            return value;\r\n        }\r\n\r\n        /**\r\n         * Deletes a cookie by setting it's expiration time in the past.\r\n         * @param name - The name of the cookie to delete.\r\n         */\r\n        public static deleteCookie(name: string) {\r\n            if (Util.canUseCookies()) {\r\n                // Setting the expiration date in the past immediately removes the cookie\r\n                Util.document.cookie = name + \"=;path=/;expires=Thu, 01 Jan 1970 00:00:01 GMT;\";\r\n            }\r\n        }\r\n\r\n        /**\r\n         * helper method to trim strings (IE8 does not implement String.prototype.trim)\r\n         */\r\n        public static trim(str: any): string {\r\n            if (typeof str !== \"string\") return str;\r\n            return str.replace(/^\\s+|\\s+$/g, \"\");\r\n        }\r\n\r\n        /**\r\n         * generate random id string\r\n         */\r\n        public static newId(): string {\r\n            var base64chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\r\n\r\n            var result = \"\";\r\n            var random = Math.random() * 1073741824; //5 symbols in base64, almost maxint\r\n\r\n            while (random > 0) {\r\n                var char = base64chars.charAt(random % 64);\r\n                result += char;\r\n                random = Math.floor(random / 64);\r\n            }\r\n            return result;\r\n        }\r\n\r\n        /**\r\n         * Check if an object is of type Array\r\n         */\r\n        public static isArray(obj: any): boolean {\r\n            return Object.prototype.toString.call(obj) === \"[object Array]\";\r\n        }\r\n\r\n        /**\r\n         * Check if an object is of type Error\r\n         */\r\n        public static isError(obj: any): boolean {\r\n            return Object.prototype.toString.call(obj) === \"[object Error]\";\r\n        }\r\n\r\n        /**\r\n         * Check if an object is of type Date\r\n         */\r\n        public static isDate(obj: any): boolean {\r\n            return Object.prototype.toString.call(obj) === \"[object Date]\";\r\n        }\r\n\r\n        /**\r\n         * Convert a date to I.S.O. format in IE8\r\n         */\r\n        public static toISOStringForIE8(date: Date) {\r\n            if (Util.isDate(date)) {\r\n                if (Date.prototype.toISOString) {\r\n                    return date.toISOString();\r\n                } else {\r\n                    const pad = function(number) {\r\n                        var r = String(number);\r\n                        if (r.length === 1) {\r\n                            r = \"0\" + r;\r\n                        }\r\n\r\n                        return r;\r\n                    }\r\n\r\n                    return date.getUTCFullYear()\r\n                        + \"-\" + pad(date.getUTCMonth() + 1)\r\n                        + \"-\" + pad(date.getUTCDate())\r\n                        + \"T\" + pad(date.getUTCHours())\r\n                        + \":\" + pad(date.getUTCMinutes())\r\n                        + \":\" + pad(date.getUTCSeconds())\r\n                        + \".\" + String((date.getUTCMilliseconds() / 1000).toFixed(3)).slice(2, 5)\r\n                        + \"Z\";\r\n                }\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Gets IE version if we are running on IE, or null otherwise\r\n         */\r\n        public static getIEVersion(userAgentStr: string = null): number {\r\n            var myNav = userAgentStr ? userAgentStr.toLowerCase() : navigator.userAgent.toLowerCase();\r\n            return (myNav.indexOf('msie') != -1) ? parseInt(myNav.split('msie')[1]) : null;\r\n        }\r\n\r\n        /**\r\n         * Convert ms to c# time span format\r\n         */\r\n        public static msToTimeSpan(totalms: number): string {\r\n            if (isNaN(totalms) || totalms < 0) {\r\n                totalms = 0;\r\n            }\r\n\r\n            totalms = Math.round(totalms);\r\n\r\n            var ms = \"\" + totalms % 1000;\r\n            var sec = \"\" + Math.floor(totalms / 1000) % 60;\r\n            var min = \"\" + Math.floor(totalms / (1000 * 60)) % 60;\r\n            var hour = \"\" + Math.floor(totalms / (1000 * 60 * 60)) % 24;\r\n            var days = Math.floor(totalms / (1000 * 60 * 60 * 24));\r\n\r\n            ms = ms.length === 1 ? \"00\" + ms : ms.length === 2 ? \"0\" + ms : ms;\r\n            sec = sec.length < 2 ? \"0\" + sec : sec;\r\n            min = min.length < 2 ? \"0\" + min : min;\r\n            hour = hour.length < 2 ? \"0\" + hour : hour;\r\n\r\n            return (days > 0 ? days + \".\" : \"\") + hour + \":\" + min + \":\" + sec + \".\" + ms;\r\n        }\r\n\r\n        /**\t\t\r\n        * Checks if error has no meaningful data inside. Ususally such errors are received by window.onerror when error\t\t\r\n        * happens in a script from other domain (cross origin, CORS).\t\t\r\n        */\r\n        public static isCrossOriginError(message: string, url: string, lineNumber: number, columnNumber: number, error: Error): boolean {\r\n            return (message === \"Script error.\" || message === \"Script error\") && !error;\r\n        }\r\n\r\n        /**\r\n        * Returns string representation of an object suitable for diagnostics logging.\r\n        */\r\n        public static dump(object: any): string {\r\n            var objectTypeDump: string = Object.prototype.toString.call(object);\r\n            var propertyValueDump: string = JSON.stringify(object);\r\n            if (objectTypeDump === \"[object Error]\") {\r\n                propertyValueDump = \"{ stack: '\" + object.stack + \"', message: '\" + object.message + \"', name: '\" + object.name + \"'\";\r\n            }\r\n\r\n            return objectTypeDump + propertyValueDump;\r\n        }\r\n\r\n        /**\r\n        * Returns the name of object if it's an Error. Otherwise, returns empty string.\r\n        */\r\n        public static getExceptionName(object: any): string {\r\n            var objectTypeDump: string = Object.prototype.toString.call(object);\r\n            if (objectTypeDump === \"[object Error]\") {\r\n                return object.name;\r\n            }\r\n            return \"\";\r\n        }\r\n\r\n        /**\r\n         * Adds an event handler for the specified event\r\n         * @param eventName {string} - The name of the event\r\n         * @param callback {any} - The callback function that needs to be executed for the given event \r\n         * @return {boolean} - true if the handler was successfully added\r\n         */\r\n        public static addEventHandler(eventName: string, callback: any): boolean {\r\n            if (!window || typeof eventName !== 'string' || typeof callback !== 'function') {\r\n                return false;\r\n            }\r\n\r\n            // Create verb for the event\r\n            var verbEventName = 'on' + eventName;\r\n\r\n            // check if addEventListener is available\r\n            if (window.addEventListener) {\r\n                window.addEventListener(eventName, callback, false);\r\n            } else if (window[\"attachEvent\"]) { // For older browsers\r\n                window[\"attachEvent\"].call(verbEventName, callback);\r\n            } else { // if all else fails\r\n                return false;\r\n            }\r\n\r\n            return true;\r\n        }\r\n\r\n        /**\r\n         * Tells if a browser supports a Beacon API\r\n         */\r\n        public static IsBeaconApiSupported(): boolean {\r\n            return ('sendBeacon' in navigator && (<any>navigator).sendBeacon);\r\n        }\r\n    }\r\n\r\n    export class UrlHelper {\r\n        private static document: any = typeof document !== \"undefined\" ? document : {};\r\n        private static htmlAnchorElement: HTMLAnchorElement;\r\n\r\n        public static parseUrl(url): HTMLAnchorElement {\r\n            if (!UrlHelper.htmlAnchorElement) {\r\n                UrlHelper.htmlAnchorElement = !!UrlHelper.document.createElement ? UrlHelper.document.createElement('a') : {};\r\n            }\r\n\r\n            UrlHelper.htmlAnchorElement.href = url;\r\n\r\n            return UrlHelper.htmlAnchorElement;\r\n        }\r\n\r\n        public static getAbsoluteUrl(url): string {\r\n            var result: string;\r\n            var a = UrlHelper.parseUrl(url);\r\n            if (a) {\r\n                result = a.href;\r\n            }\r\n\r\n            return result;\r\n        }\r\n\r\n        public static getPathName(url): string {\r\n            var result: string;\r\n            var a = UrlHelper.parseUrl(url);\r\n            if (a) {\r\n                result = a.pathname;\r\n            }\r\n\r\n            return result;\r\n        }\r\n\r\n        public static getCompleteUrl(method: string, absoluteUrl: string) {\r\n            if (method) {\r\n                return method.toUpperCase() + \" \" + absoluteUrl;\r\n            } else {\r\n                return absoluteUrl;\r\n            }\r\n        }\r\n    }\r\n}\r\n","/// <reference path=\"../JavaScriptSDK.Interfaces/Telemetry/ISerializable.ts\" />\r\n/// <reference path=\"Logging.ts\" />\r\n/// <reference path=\"Util.ts\" />\r\n\r\nmodule Microsoft.ApplicationInsights {\r\n    \"use strict\";\r\n\r\n    /**\r\n     * Enum is used in aiDataContract to describe how fields are serialized. \r\n     * For instance: (Fieldtype.Required | FieldType.Array) will mark the field as required and indicate it's an array\r\n     */\r\n    export enum FieldType { Default = 0, Required = 1, Array = 2, Hidden = 4 };\r\n\r\n    export class Serializer {\r\n\r\n        /**\r\n         * Serializes the current object to a JSON string.\r\n         */\r\n        public static serialize(input: ISerializable): string {\r\n            var output = Serializer._serializeObject(input, \"root\");\r\n            return JSON.stringify(output);\r\n        }\r\n\r\n        private static _serializeObject(source: ISerializable, name: string): any {\r\n            var circularReferenceCheck = \"__aiCircularRefCheck\";\r\n            var output = {};\r\n\r\n            if (!source) {\r\n                _InternalLogging.throwInternal(LoggingSeverity.CRITICAL, _InternalMessageId.CannotSerializeObject, \"cannot serialize object because it is null or undefined\", { name: name }, true);\r\n                return output;\r\n            }\r\n\r\n            if (source[circularReferenceCheck]) {\r\n                _InternalLogging.throwInternal(LoggingSeverity.WARNING, _InternalMessageId.CircularReferenceDetected, \"Circular reference detected while serializing object\", { name: name }, true);\r\n                return output;\r\n            }\r\n\r\n            if (!source.aiDataContract) {\r\n                // special case for measurements/properties/tags\r\n                if (name === \"measurements\") {\r\n                    output = Serializer._serializeStringMap(source, \"number\", name);\r\n                } else if (name === \"properties\") {\r\n                    output = Serializer._serializeStringMap(source, \"string\", name);\r\n                } else if (name === \"tags\") {\r\n                    output = Serializer._serializeStringMap(source, \"string\", name);\r\n                } else if (Util.isArray(source)) {\r\n                    output = Serializer._serializeArray(<any>source, name);\r\n                } else {\r\n                    _InternalLogging.throwInternal(LoggingSeverity.WARNING, _InternalMessageId.CannotSerializeObjectNonSerializable, \"Attempting to serialize an object which does not implement ISerializable\", { name: name }, true);\r\n\r\n                    try {\r\n                        // verify that the object can be stringified\r\n                        JSON.stringify(source);\r\n                        output = source;\r\n                    } catch (e) {\r\n                        // if serialization fails return an empty string\r\n                        _InternalLogging.throwInternal(LoggingSeverity.CRITICAL, _InternalMessageId.CannotSerializeObject, (e && typeof e.toString === 'function') ? e.toString() : \"Error serializing object\", null, true);\r\n                    }\r\n                }\r\n\r\n                return output;\r\n            }\r\n            \r\n            source[circularReferenceCheck] = true;\r\n            for (var field in source.aiDataContract) {\r\n\r\n                var contract = source.aiDataContract[field];\r\n                var isRequired = (typeof contract === \"function\") ? (contract() & FieldType.Required) : (contract & FieldType.Required);\r\n                var isHidden = (typeof contract === \"function\") ? (contract() & FieldType.Hidden) : (contract & FieldType.Hidden);\r\n                var isArray = contract & FieldType.Array;\r\n\r\n                var isPresent = source[field] !== undefined;\r\n                var isObject = typeof source[field] === \"object\" && source[field] !== null;\r\n\r\n                if (isRequired && !isPresent && !isArray) {\r\n                    _InternalLogging.throwInternal(\r\n                        LoggingSeverity.CRITICAL,\r\n                        _InternalMessageId.MissingRequiredFieldSpecification,\r\n                        \"Missing required field specification. The field is required but not present on source\",\r\n                        { field: field, name: name });\r\n\r\n                    // If not in debug mode, continue and hope the error is permissible\r\n                    continue;\r\n                }\r\n\r\n                if (isHidden) {\r\n                    // Don't serialize hidden fields\r\n                    continue;\r\n                }\r\n\r\n                var value;\r\n                if (isObject) {\r\n                    if (isArray) {\r\n                        // special case; resurse on each object in the source array\r\n                        value = Serializer._serializeArray(source[field], field);\r\n                    } else {\r\n                        // recurse on the source object in this field\r\n                        value = Serializer._serializeObject(source[field], field);\r\n                    }\r\n                } else {\r\n                    // assign the source field to the output even if undefined or required\r\n                    value = source[field];\r\n                }\r\n\r\n                // only emit this field if the value is defined\r\n                if (value !== undefined) {\r\n                    output[field] = value;\r\n                }\r\n            }\r\n\r\n            delete source[circularReferenceCheck];\r\n            return output;\r\n        }\r\n\r\n        private static _serializeArray(sources: Array<ISerializable>, name: string): Array<any> {\r\n            var output = undefined;\r\n\r\n            if (!!sources) {\r\n                if (!Util.isArray(sources)) {\r\n                    _InternalLogging.throwInternal(\r\n                        LoggingSeverity.CRITICAL,\r\n                        _InternalMessageId.ItemNotInArray,\r\n                        \"This field was specified as an array in the contract but the item is not an array.\\r\\n\",\r\n                        { name: name }, true);\r\n                } else {\r\n                    output = [];\r\n                    for (var i = 0; i < sources.length; i++) {\r\n                        var source = sources[i];\r\n                        var item = Serializer._serializeObject(source, name + \"[\" + i + \"]\");\r\n                        output.push(item);\r\n                    }\r\n                }\r\n            }\r\n\r\n            return output;\r\n        }\r\n\r\n        private static _serializeStringMap(map, expectedType, name) {\r\n            var output = undefined;\r\n            if (map) {\r\n                output = {};\r\n                for (var field in map) {\r\n                    var value = map[field];\r\n                    if (expectedType === \"string\") {\r\n                        if (value === undefined) {\r\n                            output[field] = \"undefined\";\r\n                        } else if (value === null) {\r\n                            output[field] = \"null\";\r\n                        } else if (!value.toString) {\r\n                            output[field] = \"invalid field: toString() is not defined.\";\r\n                        }\r\n                        else {\r\n                            output[field] = value.toString();\r\n                        }\r\n                    }\r\n                    else if (expectedType === \"number\") {\r\n                        if (value === undefined) {\r\n                            output[field] = \"undefined\";\r\n                        } else if (value === null) {\r\n                            output[field] = \"null\";\r\n                        } else {\r\n                            var num = parseFloat(value);\r\n                            if (isNaN(num)) {\r\n                                output[field] = \"NaN\";\r\n                            }\r\n                            else {\r\n                                output[field] = num;\r\n                            }\r\n                        }\r\n                    }\r\n                    else {\r\n                        output[field] = \"invalid field: \" + name + \" is of unknown type.\";\r\n                        _InternalLogging.throwInternal(LoggingSeverity.CRITICAL, output[field], null, true);\r\n                    }\r\n                }\r\n            }\r\n\r\n            return output;\r\n        }\r\n    }\r\n}","/// <reference path=\"../../../JavaScriptSDK.Interfaces/Contracts/Generated/Envelope.ts\" />\r\n/// <reference path=\"../../../JavaScriptSDK.Interfaces/Contracts/Generated/Base.ts\" />\r\n/// <reference path=\"../../Util.ts\"/>\r\n\r\nmodule Microsoft.ApplicationInsights.Telemetry.Common {\r\n    \"use strict\";\r\n    export class Envelope extends Microsoft.Telemetry.Envelope implements IEnvelope {\r\n\r\n        /**\r\n         * The data contract for serializing this object.\r\n         */\r\n        public aiDataContract;\r\n\r\n        /**\r\n         * Constructs a new instance of telemetry data.\r\n         */\r\n        constructor(data: Microsoft.Telemetry.Base, name: string) {\r\n            super();\r\n\r\n            this.name = Common.DataSanitizer.sanitizeString(name) || Util.NotSpecified;\r\n            this.data = data;\r\n            this.time = Util.toISOStringForIE8(new Date());\r\n\r\n            this.aiDataContract = {\r\n                time: FieldType.Required,\r\n                iKey: FieldType.Required,\r\n                name: FieldType.Required,\r\n                sampleRate: () => {\r\n                    return (this.sampleRate == 100) ? FieldType.Hidden : FieldType.Required;\r\n                },\r\n                tags: FieldType.Required,\r\n                data: FieldType.Required\r\n            };\r\n        }\r\n    }\r\n}","/// <reference path=\"../../../JavaScriptSDK.Interfaces/Contracts/Generated/Base.ts\"/>\r\n\r\nmodule Microsoft.ApplicationInsights.Telemetry.Common {\r\n    \"use strict\";\r\n\r\n    export class Base extends Microsoft.Telemetry.Base implements ISerializable {\r\n        \r\n        /**\r\n         * The data contract for serializing this object.\r\n         */\r\n        public aiDataContract = {};\r\n    }\r\n}","// THIS TYPE WAS AUTOGENERATED\r\nmodule AI\r\n{\r\n\"use strict\";\r\n    export class ContextTagKeys\r\n    {\r\n        public applicationVersion: string;\r\n        public applicationBuild: string;\r\n        public applicationTypeId: string;\r\n        public applicationId: string;\r\n        public deviceId: string;\r\n        public deviceIp: string;\r\n        public deviceLanguage: string;\r\n        public deviceLocale: string;\r\n        public deviceModel: string;\r\n        public deviceNetwork: string;\r\n        public deviceNetworkName: string;\r\n        public deviceOEMName: string;\r\n        public deviceOS: string;\r\n        public deviceOSVersion: string;\r\n        public deviceRoleInstance: string;\r\n        public deviceRoleName: string;\r\n        public deviceScreenResolution: string;\r\n        public deviceType: string;\r\n        public deviceMachineName: string;\r\n        public deviceVMName: string;\r\n        public locationIp: string;\r\n        public operationId: string;\r\n        public operationName: string;\r\n        public operationParentId: string;\r\n        public operationRootId: string;\r\n        public operationSyntheticSource: string;\r\n        public operationIsSynthetic: string;\r\n        public operationCorrelationVector: string;\r\n        public sessionId: string;\r\n        public sessionIsFirst: string;\r\n        public sessionIsNew: string;\r\n        public userAccountAcquisitionDate: string;\r\n        public userAccountId: string;\r\n        public userAgent: string;\r\n        public userId: string;\r\n        public userStoreRegion: string;\r\n        public userAuthUserId: string;\r\n        public userAnonymousUserAcquisitionDate: string;\r\n        public userAuthenticatedUserAcquisitionDate: string;\r\n        public sampleRate: string;\r\n        public cloudName: string;\r\n        public cloudRoleVer: string;\r\n        public cloudEnvironment: string;\r\n        public cloudLocation: string;\r\n        public cloudDeploymentUnit: string;\r\n        public serverDeviceOS: string;\r\n        public serverDeviceOSVer: string;\r\n        public internalSdkVersion: string;\r\n        public internalAgentVersion: string;\r\n        public internalDataCollectorReceivedTime: string;\r\n        public internalProfileId: string;\r\n        public internalProfileClassId: string;\r\n        public internalAccountId: string;\r\n        public internalApplicationName: string;\r\n        public internalInstrumentationKey: string;\r\n        public internalTelemetryItemId: string;\r\n        public internalApplicationType: string;\r\n        public internalRequestSource: string;\r\n        public internalFlowType: string;\r\n        public internalIsAudit: string;\r\n        public internalTrackingSourceId: string;\r\n        public internalTrackingType: string;\r\n        public internalIsDiagnosticExample: string;\r\n        \r\n        constructor()\r\n        {\r\n            this.applicationVersion = \"ai.application.ver\";\r\n            this.applicationBuild = \"ai.application.build\";\r\n            this.applicationTypeId = \"ai.application.typeId\";\r\n            this.applicationId = \"ai.application.applicationId\";\r\n            this.deviceId = \"ai.device.id\";\r\n            this.deviceIp = \"ai.device.ip\";\r\n            this.deviceLanguage = \"ai.device.language\";\r\n            this.deviceLocale = \"ai.device.locale\";\r\n            this.deviceModel = \"ai.device.model\";\r\n            this.deviceNetwork = \"ai.device.network\";\r\n            this.deviceNetworkName = \"ai.device.networkName\";\r\n            this.deviceOEMName = \"ai.device.oemName\";\r\n            this.deviceOS = \"ai.device.os\";\r\n            this.deviceOSVersion = \"ai.device.osVersion\";\r\n            this.deviceRoleInstance = \"ai.device.roleInstance\";\r\n            this.deviceRoleName = \"ai.device.roleName\";\r\n            this.deviceScreenResolution = \"ai.device.screenResolution\";\r\n            this.deviceType = \"ai.device.type\";\r\n            this.deviceMachineName = \"ai.device.machineName\";\r\n            this.deviceVMName = \"ai.device.vmName\";\r\n            this.locationIp = \"ai.location.ip\";\r\n            this.operationId = \"ai.operation.id\";\r\n            this.operationName = \"ai.operation.name\";\r\n            this.operationParentId = \"ai.operation.parentId\";\r\n            this.operationRootId = \"ai.operation.rootId\";\r\n            this.operationSyntheticSource = \"ai.operation.syntheticSource\";\r\n            this.operationIsSynthetic = \"ai.operation.isSynthetic\";\r\n            this.operationCorrelationVector = \"ai.operation.correlationVector\";\r\n            this.sessionId = \"ai.session.id\";\r\n            this.sessionIsFirst = \"ai.session.isFirst\";\r\n            this.sessionIsNew = \"ai.session.isNew\";\r\n            this.userAccountAcquisitionDate = \"ai.user.accountAcquisitionDate\";\r\n            this.userAccountId = \"ai.user.accountId\";\r\n            this.userAgent = \"ai.user.userAgent\";\r\n            this.userId = \"ai.user.id\";\r\n            this.userStoreRegion = \"ai.user.storeRegion\";\r\n            this.userAuthUserId = \"ai.user.authUserId\";\r\n            this.userAnonymousUserAcquisitionDate = \"ai.user.anonUserAcquisitionDate\";\r\n            this.userAuthenticatedUserAcquisitionDate = \"ai.user.authUserAcquisitionDate\";\r\n            this.sampleRate = \"ai.sample.sampleRate\";\r\n            this.cloudName = \"ai.cloud.name\";\r\n            this.cloudRoleVer = \"ai.cloud.roleVer\";\r\n            this.cloudEnvironment = \"ai.cloud.environment\";\r\n            this.cloudLocation = \"ai.cloud.location\";\r\n            this.cloudDeploymentUnit = \"ai.cloud.deploymentUnit\";\r\n            this.serverDeviceOS = \"ai.serverDevice.os\";\r\n            this.serverDeviceOSVer = \"ai.serverDevice.osVer\";\r\n            this.internalSdkVersion = \"ai.internal.sdkVersion\";\r\n            this.internalAgentVersion = \"ai.internal.agentVersion\";\r\n            this.internalDataCollectorReceivedTime = \"ai.internal.dataCollectorReceivedTime\";\r\n            this.internalProfileId = \"ai.internal.profileId\";\r\n            this.internalProfileClassId = \"ai.internal.profileClassId\";\r\n            this.internalAccountId = \"ai.internal.accountId\";\r\n            this.internalApplicationName = \"ai.internal.applicationName\";\r\n            this.internalInstrumentationKey = \"ai.internal.instrumentationKey\";\r\n            this.internalTelemetryItemId = \"ai.internal.telemetryItemId\";\r\n            this.internalApplicationType = \"ai.internal.applicationType\";\r\n            this.internalRequestSource = \"ai.internal.requestSource\";\r\n            this.internalFlowType = \"ai.internal.flowType\";\r\n            this.internalIsAudit = \"ai.internal.isAudit\";\r\n            this.internalTrackingSourceId = \"ai.internal.trackingSourceId\";\r\n            this.internalTrackingType = \"ai.internal.trackingType\";\r\n            this.internalIsDiagnosticExample = \"ai.internal.isDiagnosticExample\";\r\n        }\r\n    }\r\n}\r\n","/// <reference path=\"../../JavaScriptSDK.Interfaces/Context/IApplication.ts\" />\r\n\r\nmodule Microsoft.ApplicationInsights.Context {\r\n\r\n    \"use strict\";\r\n\r\n    export class Application implements IApplication {\r\n        /**\r\n         * The application version.\r\n         */\r\n        public ver: string;\r\n\r\n        /**\r\n         * The application build version.\r\n         */\r\n        public build: string;\r\n    }\r\n}","/// <reference path=\"../../JavaScriptSDK.Interfaces/Context/IDevice.ts\" />\r\n\r\nmodule Microsoft.ApplicationInsights.Context {\r\n\r\n    \"use strict\";\r\n\r\n    export class Device implements IDevice {\r\n\r\n        /**\r\n         * The type for the current device.\r\n         */\r\n        public type: string;\r\n\r\n        /**\r\n         * A device unique ID.\r\n         */\r\n        public id: string;\r\n\r\n        /**\r\n         * The device OEM for the current device.\r\n         */\r\n        public oemName: string;\r\n\r\n        /**\r\n         * The device model for the current device.\r\n         */\r\n        public model: string;\r\n\r\n        /**\r\n         * The IANA interface type for the internet connected network adapter.\r\n         */\r\n        public network: number;\r\n\r\n        /**\r\n         * The application screen resolution.\r\n         */\r\n        public resolution: string;\r\n\r\n        /**\r\n         * The current display language of the operating system.\r\n         */\r\n        public locale: string;\r\n        \r\n        /**\r\n         * The IP address.\r\n         */\r\n        public ip: string;\r\n\r\n        /**\r\n         * The device language.\r\n         */\r\n        public language: string;\r\n\r\n        /**\r\n         * The OS name.\r\n         */\r\n        public os: string;\r\n\r\n        /**\r\n         * The OS version.\r\n         */\r\n        public osversion: string;\r\n\r\n        /**\r\n         * Constructs a new instance of the Device class\r\n         */\r\n        constructor() {\r\n            // don't attempt to fingerprint browsers\r\n            this.id = \"browser\";\r\n\r\n            // Device type is a dimension in our data platform\r\n            // Setting it to 'Browser' allows to separate client and server dependencies/exceptions\r\n            this.type = \"Browser\";\r\n        }\r\n    }\r\n}\r\n","/// <reference path=\"../../JavaScriptSDK.Interfaces/Context/IInternal.ts\"/>\r\n\r\nmodule Microsoft.ApplicationInsights.Context {\r\n\r\n    \"use strict\";\r\n\r\n    export class Internal implements IInternal {\r\n\r\n        /**\r\n         * The SDK version used to create this telemetry item.\r\n         */\r\n        public sdkVersion: string;\r\n\r\n        /**\r\n         * The SDK agent version.\r\n         */\r\n        public agentVersion: string;\r\n\r\n         /**\r\n         * Constructs a new instance of the internal telemetry data class.\r\n         */\r\n        constructor(config: ITelemetryConfig) {\r\n            this.sdkVersion = (config.sdkExtension() ? config.sdkExtension() + \"_\" : \"\") + \"javascript:\" + Version;\r\n        }\r\n    }\r\n}","/// <reference path=\"../../JavaScriptSDK.Interfaces/Context/ILocation.ts\" />\r\n\r\nmodule Microsoft.ApplicationInsights.Context {\r\n\r\n    \"use strict\";\r\n\r\n    export class Location implements ILocation {\r\n\r\n        /**\r\n         * Client IP address for reverse lookup\r\n         */\r\n        public ip: string;\r\n    }\r\n}","/// <reference path=\"../Util.ts\" />\r\n/// <reference path=\"../../JavaScriptSDK.Interfaces/Context/IOperation.ts\" />\r\n\r\nmodule Microsoft.ApplicationInsights.Context {\r\n\r\n    \"use strict\";\r\n\r\n    export class Operation implements IOperation {\r\n\r\n        public id: string;\r\n        public name: string;\r\n        public parentId: string;\r\n        public rootId: string;\r\n        public syntheticSource: string;\r\n\r\n        constructor() {\r\n            this.id = Util.newId();\r\n            if (window && window.location && window.location.pathname) {\r\n                this.name = window.location.pathname;\r\n            }\r\n        }\r\n    }\r\n} ","module Microsoft.ApplicationInsights {\r\n    export class HashCodeScoreGenerator {\r\n        // We're using 32 bit math, hence max value is (2^31 - 1)\r\n        public static INT_MAX_VALUE: number = 2147483647;\r\n\r\n        // (Magic number) DJB algorithm can't work on shorter strings (results in poor distribution\r\n        private static MIN_INPUT_LENGTH: number = 8;\r\n\r\n        public getHashCodeScore(key: string): number {\r\n            var score = this.getHashCode(key) / HashCodeScoreGenerator.INT_MAX_VALUE;\r\n            return score * 100;\r\n        }\r\n\r\n        public getHashCode(input: string): number {\r\n            if (input == \"\") { return 0; }\r\n\r\n            while (input.length < HashCodeScoreGenerator.MIN_INPUT_LENGTH) {\r\n                input = input.concat(input);\r\n            }\r\n\r\n            // 5381 is a magic number: http://stackoverflow.com/questions/10696223/reason-for-5381-number-in-djb-hash-function\r\n            var hash: number = 5381;\r\n\r\n            for (var i: number = 0; i < input.length; ++i) {\r\n                hash = ((hash << 5) + hash) + input.charCodeAt(i);\r\n                // 'hash' is of number type which means 53 bit integer (http://www.ecma-international.org/ecma-262/6.0/#sec-ecmascript-language-types-number-type)\r\n                // 'hash & hash' will keep it 32 bit integer - just to make it clearer what the result is.\r\n                hash = hash & hash;\r\n            }\r\n\r\n            return Math.abs(hash);\r\n        }\r\n    }\r\n} ","/// <reference path=\"./HashCodeScoreGenerator.ts\" />\r\n/// <reference path=\"../JavaScriptSDK.Interfaces/Contracts/Generated/Envelope.ts\" />\r\n\r\nmodule Microsoft.ApplicationInsights {\r\n    export class SamplingScoreGenerator {\r\n        private hashCodeGeneragor: HashCodeScoreGenerator;\r\n\r\n        constructor() {\r\n            this.hashCodeGeneragor = new HashCodeScoreGenerator();\r\n        }\r\n\r\n        public getSamplingScore(envelope: Microsoft.ApplicationInsights.IEnvelope): number {\r\n            var tagKeys: AI.ContextTagKeys = new AI.ContextTagKeys();\r\n            var score: number = 0;\r\n            if (envelope.tags[tagKeys.userId]) {\r\n                score = this.hashCodeGeneragor.getHashCodeScore(envelope.tags[tagKeys.userId]);\r\n            } else if (envelope.tags[tagKeys.operationId]) {\r\n                score = this.hashCodeGeneragor.getHashCodeScore(envelope.tags[tagKeys.operationId]);\r\n            } else {\r\n                score = Math.random()\r\n            }\r\n\r\n            return score;\r\n        }\r\n    }\r\n} ","/// <reference path=\"../SamplingScoreGenerator.ts\" />\r\n/// <reference path=\"../../JavaScriptSDK.Interfaces/Contracts/Generated/Envelope.ts\" />\r\n/// <reference path=\"../../JavaScriptSDK.Interfaces/Context/ISample.ts\" />\r\n\r\nmodule Microsoft.ApplicationInsights.Context {\r\n\r\n    \"use strict\";\r\n\r\n    export class Sample implements ISample {\r\n        public sampleRate: number;\r\n        private samplingScoreGenerator: SamplingScoreGenerator;\r\n\r\n        // We're using 32 bit math, hence max value is (2^31 - 1)\r\n        public INT_MAX_VALUE: number = 2147483647;\r\n\r\n        constructor(sampleRate: number) {\r\n            if (sampleRate > 100 || sampleRate < 0) {\r\n                _InternalLogging.throwInternal(LoggingSeverity.WARNING,\r\n                    _InternalMessageId.SampleRateOutOfRange,\r\n                    \"Sampling rate is out of range (0..100). Sampling will be disabled, you may be sending too much data which may affect your AI service level.\",\r\n                    { samplingRate: sampleRate }, true);\r\n                this.sampleRate = 100;\r\n            }\r\n\r\n            this.sampleRate = sampleRate;\r\n            this.samplingScoreGenerator = new SamplingScoreGenerator();\r\n        }\r\n\r\n        /**\r\n        * Determines if an envelope is sampled in (i.e. will be sent) or not (i.e. will be dropped).\r\n        */\r\n        public isSampledIn(envelope: Microsoft.ApplicationInsights.IEnvelope): boolean {\r\n            if (this.sampleRate == 100) return true;\r\n\r\n            var score = this.samplingScoreGenerator.getSamplingScore(envelope);\r\n\r\n            return score < this.sampleRate;\r\n        }\r\n    }\r\n}","// THIS TYPE WAS AUTOGENERATED\r\nmodule AI\r\n{\r\n\"use strict\";\r\n    export enum SessionState\r\n    {\r\n        Start = 0,\r\n        End = 1,\r\n    }\r\n}\r\n","/// <reference path=\"../Util.ts\" />\r\n/// <reference path=\"../../JavaScriptSDK.Interfaces/Contracts/Generated/SessionState.ts\"/>\r\n/// <reference path=\"../../JavaScriptSDK.Interfaces/Context/ISession.ts\" />\r\n\r\nmodule Microsoft.ApplicationInsights.Context {\r\n\r\n    \"use strict\";\r\n\r\n    export interface ISessionConfig {\r\n        sessionRenewalMs: () => number;\r\n        sessionExpirationMs: () => number;\r\n        cookieDomain: () => string;\r\n    }\r\n\r\n    export class Session implements ISession {\r\n        /**\r\n         * The session ID.\r\n         */\r\n        public id: string;\r\n\r\n        /**  \r\n         * The true if this is the first session  \r\n         */\r\n        public isFirst: boolean;\r\n\r\n        /**\r\n         * The date at which this guid was genereated.\r\n         * Per the spec the ID will be regenerated if more than acquisitionSpan milliseconds ellapse from this time.\r\n         */\r\n        public acquisitionDate: number;\r\n\r\n        /**\r\n         * The date at which this session ID was last reported.\r\n         * This value should be updated whenever telemetry is sent using this ID.\r\n         * Per the spec the ID will be regenerated if more than renewalSpan milliseconds elapse from this time with no activity.\r\n         */\r\n        public renewalDate: number;\r\n    }\r\n\r\n    export class _SessionManager {\r\n\r\n        public static acquisitionSpan = 86400000; // 24 hours in ms\r\n        public static renewalSpan = 1800000; // 30 minutes in ms\r\n        public static cookieUpdateInterval = 60000 // 1 minute in ms\r\n        public automaticSession: Session;\r\n        public config: ISessionConfig;\r\n\r\n        private cookieUpdatedTimestamp: number;\r\n\r\n        constructor(config: ISessionConfig) {\r\n\r\n            if (!config) {\r\n                config = <any>{};\r\n            }\r\n\r\n            if (!(typeof config.sessionExpirationMs === \"function\")) {\r\n                config.sessionExpirationMs = () => _SessionManager.acquisitionSpan;\r\n            }\r\n\r\n            if (!(typeof config.sessionRenewalMs === \"function\")) {\r\n                config.sessionRenewalMs = () => _SessionManager.renewalSpan;\r\n            }\r\n\r\n            this.config = config;\r\n\r\n            this.automaticSession = new Session();\r\n        }\r\n\r\n        public update() {\r\n            if (!this.automaticSession.id) {\r\n                this.initializeAutomaticSession();\r\n            }\r\n\r\n            var now = dateTime.Now();\r\n\r\n            var acquisitionExpired = now - this.automaticSession.acquisitionDate > this.config.sessionExpirationMs();\r\n            var renewalExpired = now - this.automaticSession.renewalDate > this.config.sessionRenewalMs();\r\n\r\n            // renew if acquisitionSpan or renewalSpan has ellapsed\r\n            if (acquisitionExpired || renewalExpired) {\r\n                // update automaticSession so session state has correct id                \r\n                this.automaticSession.isFirst = undefined;\r\n                this.renew();\r\n            } else {\r\n                // do not update the cookie more often than cookieUpdateInterval\r\n                if (!this.cookieUpdatedTimestamp || now - this.cookieUpdatedTimestamp > _SessionManager.cookieUpdateInterval) {\r\n                    this.automaticSession.renewalDate = now;\r\n                    this.setCookie(this.automaticSession.id, this.automaticSession.acquisitionDate, this.automaticSession.renewalDate);\r\n                }\r\n            }\r\n        }\r\n\r\n        /**\r\n         *  Record the current state of the automatic session and store it in our cookie string format\r\n         *  into the browser's local storage. This is used to restore the session data when the cookie\r\n         *  expires.\r\n         */\r\n        public backup() {\r\n            this.setStorage(this.automaticSession.id, this.automaticSession.acquisitionDate, this.automaticSession.renewalDate);\r\n        }\r\n\r\n        /**\r\n         *  Use ai_session cookie data or local storage data (when the cookie is unavailable) to\r\n         *  initialize the automatic session.\r\n         */\r\n        private initializeAutomaticSession() {\r\n            var cookie = Util.getCookie('ai_session');\r\n            if (cookie && typeof cookie.split === \"function\") {\r\n                this.initializeAutomaticSessionWithData(cookie);\r\n            } else {\r\n                // There's no cookie, but we might have session data in local storage\r\n                // This can happen if the session expired or the user actively deleted the cookie\r\n                // We only want to recover data if the cookie is missing from expiry. We should respect the user's wishes if the cookie was deleted actively.\r\n                // The User class handles this for us and deletes our local storage object if the persistent user cookie was removed.\r\n                var storage = Util.getStorage('ai_session');\r\n                if (storage) {\r\n                    this.initializeAutomaticSessionWithData(storage);\r\n                }\r\n            }\r\n\r\n            if (!this.automaticSession.id) {\r\n                this.automaticSession.isFirst = true;\r\n                this.renew();\r\n            }\r\n        }\r\n\r\n        /**\r\n         *  Extract id, aquisitionDate, and renewalDate from an ai_session payload string and\r\n         *  use this data to initialize automaticSession.\r\n         *\r\n         *  @param {string} sessionData - The string stored in an ai_session cookie or local storage backup\r\n         */\r\n        private initializeAutomaticSessionWithData(sessionData: string) {\r\n            var params = sessionData.split(\"|\");\r\n\r\n            if (params.length > 0) {\r\n                this.automaticSession.id = params[0];\r\n            }\r\n\r\n            try {\r\n                if (params.length > 1) {\r\n                    var acq = +params[1];\r\n                    this.automaticSession.acquisitionDate = +new Date(acq);\r\n                    this.automaticSession.acquisitionDate = this.automaticSession.acquisitionDate > 0 ? this.automaticSession.acquisitionDate : 0;\r\n                }\r\n\r\n                if (params.length > 2) {\r\n                    var renewal = +params[2];\r\n                    this.automaticSession.renewalDate = +new Date(renewal);\r\n                    this.automaticSession.renewalDate = this.automaticSession.renewalDate > 0 ? this.automaticSession.renewalDate : 0;\r\n                }\r\n            } catch (e) {\r\n                _InternalLogging.throwInternal(LoggingSeverity.CRITICAL,\r\n\r\n                    _InternalMessageId.ErrorParsingAISessionCookie,\r\n                    \"Error parsing ai_session cookie, session will be reset: \" + Util.getExceptionName(e),\r\n                    { exception: Util.dump(e) });\r\n            }\r\n\r\n            if (this.automaticSession.renewalDate == 0) {\r\n                _InternalLogging.throwInternal(LoggingSeverity.WARNING,\r\n                    _InternalMessageId.SessionRenewalDateIsZero,\r\n                    \"AI session renewal date is 0, session will be reset.\");\r\n            }\r\n        }\r\n\r\n        private renew() {\r\n            var now = dateTime.Now();\r\n\r\n            this.automaticSession.id = Util.newId();\r\n            this.automaticSession.acquisitionDate = now;\r\n            this.automaticSession.renewalDate = now;\r\n\r\n            this.setCookie(this.automaticSession.id, this.automaticSession.acquisitionDate, this.automaticSession.renewalDate);\r\n\r\n            // If this browser does not support local storage, fire an internal log to keep track of it at this point\r\n            if (!Util.canUseLocalStorage()) {\r\n                _InternalLogging.throwInternal(LoggingSeverity.WARNING,\r\n                    _InternalMessageId.BrowserDoesNotSupportLocalStorage,\r\n                    \"Browser does not support local storage. Session durations will be inaccurate.\");\r\n            }\r\n        }\r\n\r\n        private setCookie(guid: string, acq: number, renewal: number) {\r\n            // Set cookie to expire after the session expiry time passes or the session renewal deadline, whichever is sooner\r\n            // Expiring the cookie will cause the session to expire even if the user isn't on the page\r\n            var acquisitionExpiry = acq + this.config.sessionExpirationMs();\r\n            var renewalExpiry = renewal + this.config.sessionRenewalMs();\r\n            var cookieExpiry = new Date();\r\n            var cookie = [guid, acq, renewal];\r\n\r\n            if (acquisitionExpiry < renewalExpiry) {\r\n                cookieExpiry.setTime(acquisitionExpiry);\r\n            } else {\r\n                cookieExpiry.setTime(renewalExpiry);\r\n            }\r\n\r\n            var cookieDomnain = this.config.cookieDomain ? this.config.cookieDomain() : null;\r\n\r\n            Util.setCookie('ai_session', cookie.join('|') + ';expires=' + cookieExpiry.toUTCString(), cookieDomnain);\r\n\r\n            this.cookieUpdatedTimestamp = dateTime.Now();\r\n        }\r\n\r\n        private setStorage(guid: string, acq: number, renewal: number) {\r\n            // Keep data in local storage to retain the last session id, allowing us to cleanly end the session when it expires\r\n            // Browsers that don't support local storage won't be able to end sessions cleanly from the client\r\n            // The server will notice this and end the sessions itself, with loss of accurate session duration\r\n            Util.setStorage('ai_session', [guid, acq, renewal].join('|'));\r\n        }\r\n    }\r\n} ","/// <reference path=\"../Util.ts\" />\r\n/// <reference path=\"../../JavaScriptSDK.Interfaces/Context/IUser.ts\" />\r\n\r\nmodule Microsoft.ApplicationInsights.Context {\r\n\r\n    \"use strict\";\r\n\r\n    export class User implements IUser {\r\n\r\n        static cookieSeparator: string = '|';\r\n        static userCookieName: string = 'ai_user';\r\n        static authUserCookieName: string = 'ai_authUser';\r\n\r\n        /**\r\n         * The telemetry configuration.\r\n         */\r\n        public config: ITelemetryConfig;\r\n\r\n        /**\r\n         * The user ID.\r\n         */\r\n        public id: string;\r\n\r\n        /**\r\n         * Authenticated user id\r\n         */\r\n        public authenticatedId: string;\r\n\r\n        /**\r\n         * The account ID.\r\n         */\r\n        public accountId: string;\r\n\r\n        /**\r\n         * The account acquisition date.\r\n         */\r\n        public accountAcquisitionDate: string;\r\n\r\n        /**\r\n         * The user agent string.\r\n         */\r\n        public agent: string;\r\n\r\n        /**\r\n         * The store region.\r\n         */\r\n        public storeRegion: string;\r\n\r\n        /**\r\n        * Sets the authenticated user id and the account id in this session.\r\n        *   \r\n        * @param authenticatedUserId {string} - The authenticated user id. A unique and persistent string that represents each authenticated user in the service.\r\n        * @param accountId {string} - An optional string to represent the account associated with the authenticated user.\r\n        */\r\n        public setAuthenticatedUserContext(authenticatedUserId: string, accountId?: string, storeInCookie = false) {\r\n\r\n            // Validate inputs to ensure no cookie control characters.\r\n            var isInvalidInput = !this.validateUserInput(authenticatedUserId) || (accountId && !this.validateUserInput(accountId));\r\n            if (isInvalidInput) {\r\n                _InternalLogging.throwInternal(\r\n                    LoggingSeverity.WARNING,\r\n                    _InternalMessageId.SetAuthContextFailedAccountName,\r\n                    \"Setting auth user context failed. \" +\r\n                    \"User auth/account id should be of type string, and not contain commas, semi-colons, equal signs, spaces, or vertical-bars.\",\r\n                    true);\r\n                return;\r\n            }\r\n\r\n            // Create cookie string.\r\n            this.authenticatedId = authenticatedUserId;\r\n            var authCookie = this.authenticatedId;\r\n            if (accountId) {\r\n                this.accountId = accountId;\r\n                authCookie = [this.authenticatedId, this.accountId].join(User.cookieSeparator);\r\n            }\r\n\r\n            if (storeInCookie) {\r\n                // Set the cookie. No expiration date because this is a session cookie (expires when browser closed).\r\n                // Encoding the cookie to handle unexpected unicode characters.\r\n                Util.setCookie(User.authUserCookieName, encodeURI(authCookie), this.config.cookieDomain());\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Clears the authenticated user id and the account id from the user context.\r\n         * @returns {} \r\n         */\r\n        public clearAuthenticatedUserContext() {\r\n            this.authenticatedId = null;\r\n            this.accountId = null;\r\n            Util.deleteCookie(User.authUserCookieName);\r\n        }\r\n\r\n        constructor(config: ITelemetryConfig) {\r\n\r\n            //get userId or create new one if none exists\r\n            var cookie = Util.getCookie(User.userCookieName);\r\n            if (cookie) {\r\n                var params = cookie.split(User.cookieSeparator);\r\n                if (params.length > 0) {\r\n                    this.id = params[0];\r\n                }\r\n            }\r\n\r\n            this.config = config;\r\n\r\n            if (!this.id) {\r\n                this.id = Util.newId();\r\n                var date = new Date();\r\n                var acqStr = Util.toISOStringForIE8(date);\r\n                this.accountAcquisitionDate = acqStr;\r\n                // without expiration, cookies expire at the end of the session\r\n                // set it to 365 days from now\r\n                // 365 * 24 * 60 * 60 * 1000 = 31536000000 \r\n                date.setTime(date.getTime() + 31536000000);\r\n                var newCookie = [this.id, acqStr];\r\n                var cookieDomain = this.config.cookieDomain ? this.config.cookieDomain() : undefined;\r\n\r\n                Util.setCookie(User.userCookieName, newCookie.join(User.cookieSeparator) + ';expires=' + date.toUTCString(), cookieDomain);\r\n\r\n                // If we have an ai_session in local storage this means the user actively removed our cookies.\r\n                // We should respect their wishes and clear ourselves from local storage\r\n                Util.removeStorage('ai_session');\r\n            }\r\n\r\n            // We still take the account id from the ctor param for backward compatibility. \r\n            // But if the the customer set the accountId through the newer setAuthenticatedUserContext API, we will override it.\r\n            this.accountId = config.accountId ? config.accountId() : undefined;\r\n\r\n            // Get the auth user id and account id from the cookie if exists\r\n            // Cookie is in the pattern: <authenticatedId>|<accountId>\r\n            var authCookie = Util.getCookie(User.authUserCookieName);\r\n            if (authCookie) {\r\n                authCookie = decodeURI(authCookie);\r\n                var authCookieString = authCookie.split(User.cookieSeparator);\r\n                if (authCookieString[0]) {\r\n                    this.authenticatedId = authCookieString[0];\r\n                }\r\n                if (authCookieString.length > 1 && authCookieString[1]) {\r\n                    this.accountId = authCookieString[1];\r\n                }\r\n            }\r\n        }\r\n\r\n        private validateUserInput(id: string): boolean {\r\n            // Validate:\r\n            // 1. Id is a non-empty string.\r\n            // 2. It does not contain special characters for cookies.\r\n            if (typeof id !== 'string' ||\r\n                !id ||\r\n                id.match(/,|;|=| |\\|/)) {\r\n                return false;\r\n            }\r\n\r\n            return true;\r\n        }\r\n    }\r\n\r\n}","/// <reference path=\"../Logging.ts\" />\r\n/// <reference path=\"../Util.ts\" />\r\n\r\nmodule Microsoft.ApplicationInsights {\r\n    \"use strict\";\r\n\r\n    export class extensions {\r\n        public static IsNullOrUndefined(obj) {\r\n            return typeof (obj) === \"undefined\" || obj === null;\r\n        }\r\n    }\r\n\r\n    export class stringUtils {\r\n        public static GetLength(strObject) {\r\n            var res = 0;\r\n            if (!extensions.IsNullOrUndefined(strObject)) {\r\n                var stringified = \"\";\r\n                try {\r\n                    stringified = strObject.toString();\r\n                } catch (ex) {\r\n                    // some troubles with complex object\r\n                }\r\n\r\n                res = stringified.length;\r\n                res = isNaN(res) ? 0 : res;\r\n            }\r\n\r\n            return res;\r\n        }\r\n    }\r\n\r\n    export class dateTime {\r\n        ///<summary>Return the number of milliseconds since 1970/01/01 in local timezon</summary>\r\n        public static Now = (window.performance && window.performance.now && window.performance.timing) ?\r\n            function () {\r\n                return window.performance.now() + window.performance.timing.navigationStart;\r\n            }\r\n            :\r\n            function () {\r\n                return new Date().getTime();\r\n            }\r\n\r\n        ///<summary>Gets duration between two timestamps</summary>\r\n        public static GetDuration = function (start: number, end: number): number {\r\n            var result = null;\r\n            if (start !== 0 && end !== 0 && !extensions.IsNullOrUndefined(start) && !extensions.IsNullOrUndefined(end)) {\r\n                result = end - start;\r\n            }\r\n\r\n            return result;\r\n        }\r\n    }\r\n\r\n    export class EventHelper {\r\n        ///<summary>Binds the specified function to an event, so that the function gets called whenever the event fires on the object</summary>\r\n        ///<param name=\"obj\">Object to which </param>\r\n        ///<param name=\"eventNameWithoutOn\">String that specifies any of the standard DHTML Events without \"on\" prefix</param>\r\n        ///<param name=\"handlerRef\">Pointer that specifies the function to call when event fires</param>\r\n        ///<returns>True if the function was bound successfully to the event, otherwise false</returns>\r\n        public static AttachEvent(obj, eventNameWithoutOn, handlerRef) {\r\n            var result = false;\r\n            if (!extensions.IsNullOrUndefined(obj)) {\r\n                if (!extensions.IsNullOrUndefined(obj.attachEvent)) {\r\n                    // IE before version 9                    \r\n                    obj.attachEvent(\"on\" + eventNameWithoutOn, handlerRef);\r\n                    result = true;\r\n                }\r\n                else {\r\n                    if (!extensions.IsNullOrUndefined(obj.addEventListener)) {\r\n                        // all browsers except IE before version 9\r\n                        obj.addEventListener(eventNameWithoutOn, handlerRef, false);\r\n                        result = true;\r\n                    }\r\n                }\r\n            }\r\n\r\n            return result;\r\n        }\r\n\r\n        public static DetachEvent(obj, eventNameWithoutOn, handlerRef) {\r\n            if (!extensions.IsNullOrUndefined(obj)) {\r\n                if (!extensions.IsNullOrUndefined(obj.detachEvent)) {\r\n                    obj.detachEvent(\"on\" + eventNameWithoutOn, handlerRef);\r\n                }\r\n                else {\r\n                    if (!extensions.IsNullOrUndefined(obj.removeEventListener)) {\r\n                        obj.removeEventListener(eventNameWithoutOn, handlerRef, false);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}","/// <reference path=\"../Logging.ts\" />\r\n/// <reference path=\"../Util.ts\" />\r\n/// <reference path=\"./ajaxUtils.ts\" />\r\n\r\nmodule Microsoft.ApplicationInsights {\r\n    \"use strict\";\r\n\r\n    export class XHRMonitoringState {\r\n        public openDone: boolean = false;\r\n        public setRequestHeaderDone: boolean = false;\r\n        public sendDone: boolean = false;\r\n        public abortDone: boolean = false;\r\n\r\n        //<summary>True, if onreadyStateChangeCallback function attached to xhr, otherwise false</summary>\r\n        public onreadystatechangeCallbackAttached = false;\r\n    }\r\n\r\n    export class ajaxRecord {\r\n        public completed = false;\r\n        public requestHeadersSize = null;\r\n        public ttfb = null;\r\n        public responseReceivingDuration = null;\r\n        public callbackDuration = null;\r\n        public ajaxTotalDuration = null;\r\n        public aborted = null;\r\n        public pageUrl = null;\r\n        public requestUrl = null;\r\n        public requestSize = 0;\r\n        public method = null;\r\n\r\n        ///<summary>Returns the HTTP status code.</summary>\r\n        public status = null;        \r\n        \r\n        //<summary>The timestamp when open method was invoked</summary>\r\n        public requestSentTime = null;\r\n\r\n        //<summary>The timestamps when first byte was received</summary>\r\n        public responseStartedTime = null;\r\n\r\n        //<summary>The timestamp when last byte was received</summary>\r\n        public responseFinishedTime = null;\r\n\r\n        //<summary>The timestamp when onreadystatechange callback in readyState 4 finished</summary>\r\n        public callbackFinishedTime = null;\r\n        \r\n        //<summary>The timestamp at which ajax was ended</summary>\r\n        public endTime = null;\r\n\r\n        //<summary>The original xhr onreadystatechange event</summary>\r\n        public originalOnreadystatechage = null;\r\n\r\n        public xhrMonitoringState: XHRMonitoringState = new XHRMonitoringState();\r\n\r\n        //<summary>Determines whether or not JavaScript exception occured in xhr.onreadystatechange code. 1 if occured, otherwise 0.</summary>\r\n        public clientFailure = 0;\r\n\r\n\r\n        public id: string;\r\n\r\n        constructor(id: string) {\r\n            this.id = id;\r\n        }\r\n\r\n\r\n        public getAbsoluteUrl() {\r\n            return this.requestUrl ? UrlHelper.getAbsoluteUrl(this.requestUrl) : null;\r\n        }\r\n\r\n        public getPathName() {\r\n            return this.requestUrl ? Telemetry.Common.DataSanitizer.sanitizeUrl(UrlHelper.getCompleteUrl(this.method, this.requestUrl)): null;\r\n        }\r\n\r\n        public CalculateMetrics = function () {\r\n            var self = this;\r\n            // round to 3 decimal points\r\n            self.ajaxTotalDuration = Math.round(dateTime.GetDuration(self.requestSentTime, self.responseFinishedTime)*1000)/1000;\r\n        }\r\n    };\r\n};           \r\n\r\n","/// <reference path=\"../Logging.ts\" />\r\n/// <reference path=\"../Util.ts\" />\r\n/// <reference path=\"./ajaxUtils.ts\" />\r\n/// <reference path=\"./ajaxRecord.ts\" />\r\n\r\nmodule Microsoft.ApplicationInsights {\r\n    \"use strict\";\r\n\r\n    export interface XMLHttpRequestInstrumented extends XMLHttpRequest {\r\n        ajaxData: ajaxRecord;\r\n    }\r\n\r\n    export class AjaxMonitor {\r\n        private appInsights: AppInsights;\r\n        private initialized: boolean;\r\n        private static instrumentedByAppInsightsName = \"InstrumentedByAppInsights\";\r\n        private currentWindowHost;\r\n\r\n        constructor(appInsights: Microsoft.ApplicationInsights.AppInsights) {\r\n            this.currentWindowHost = window.location.host;\r\n            this.appInsights = appInsights;\r\n            this.initialized = false;\r\n            this.Init();\r\n        }\r\n\r\n        ///<summary>The main function that needs to be called in order to start Ajax Monitoring</summary>\r\n        private Init() {\r\n            if (this.supportsMonitoring()) {\r\n                this.instrumentOpen();\r\n                this.instrumentSend();\r\n                this.instrumentAbort();\r\n                this.initialized = true;\r\n            }\r\n        }\r\n\r\n\r\n        ///<summary>Function that returns property name which will identify that monitoring for given instance of XmlHttpRequest is disabled</summary>\r\n        public static DisabledPropertyName: string = \"Microsoft_ApplicationInsights_BypassAjaxInstrumentation\";\r\n\r\n        ///<summary>Verifies that particalar instance of XMLHttpRequest needs to be monitored</summary>\r\n        ///<param name=\"excludeAjaxDataValidation\">Optional parameter. True if ajaxData must be excluded from verification</param>\r\n        ///<returns type=\"bool\">True if instance needs to be monitored, otherwise false</returns>\r\n        private isMonitoredInstance(xhr: XMLHttpRequestInstrumented, excludeAjaxDataValidation?: boolean): boolean {\r\n\r\n            // checking to see that all interested functions on xhr were instrumented\r\n            return this.initialized\r\n\r\n                // checking on ajaxData to see that it was not removed in user code\r\n                && (excludeAjaxDataValidation === true || !extensions.IsNullOrUndefined(xhr.ajaxData))\r\n\r\n                // check that this instance is not not used by ajax call performed inside client side monitoring to send data to collector\r\n                && xhr[AjaxMonitor.DisabledPropertyName] !== true;\r\n\r\n        }\r\n\r\n        ///<summary>Determines whether ajax monitoring can be enabled on this document</summary>\r\n        ///<returns>True if Ajax monitoring is supported on this page, otherwise false</returns>\r\n        private supportsMonitoring(): boolean {\r\n            var result = true;\r\n            if (extensions.IsNullOrUndefined(XMLHttpRequest) ||\r\n                extensions.IsNullOrUndefined(XMLHttpRequest.prototype) ||\r\n                extensions.IsNullOrUndefined(XMLHttpRequest.prototype.open) ||\r\n                extensions.IsNullOrUndefined(XMLHttpRequest.prototype.send) ||\r\n                extensions.IsNullOrUndefined(XMLHttpRequest.prototype.abort)) {\r\n                result = false;\r\n            }\r\n\r\n            // disable in IE8 or older (https://www.w3schools.com/jsref/jsref_trim_string.asp)\r\n            try {\r\n                \" a \".trim();\r\n            } catch (ex) {\r\n                result = false;\r\n            }\r\n\r\n            return result;\r\n        }\r\n\r\n        private instrumentOpen() {\r\n            var originalOpen = XMLHttpRequest.prototype.open;\r\n            var ajaxMonitorInstance = this;\r\n            XMLHttpRequest.prototype.open = function (method, url, async) {\r\n                try {\r\n                    if (ajaxMonitorInstance.isMonitoredInstance(this, true) &&\r\n                        (\r\n                            !(<XMLHttpRequestInstrumented>this).ajaxData ||\r\n                            !(<XMLHttpRequestInstrumented>this).ajaxData.xhrMonitoringState.openDone\r\n                        )) {\r\n                        ajaxMonitorInstance.openHandler(this, method, url, async);\r\n                    }\r\n                } catch (e) {\r\n                    _InternalLogging.throwInternal(\r\n                        LoggingSeverity.CRITICAL,\r\n                        _InternalMessageId.FailedMonitorAjaxOpen,\r\n                        \"Failed to monitor XMLHttpRequest.open, monitoring data for this ajax call may be incorrect.\",\r\n                        {\r\n                            ajaxDiagnosticsMessage: AjaxMonitor.getFailedAjaxDiagnosticsMessage(this),\r\n                            exception: Microsoft.ApplicationInsights.Util.dump(e)\r\n                        });\r\n                }\r\n\r\n                return originalOpen.apply(this, arguments);\r\n            };\r\n        }\r\n\r\n        private openHandler(xhr: XMLHttpRequestInstrumented, method, url, async) {\r\n            var ajaxData = new ajaxRecord(Util.newId());\r\n            ajaxData.method = method;\r\n            ajaxData.requestUrl = url;\r\n            ajaxData.xhrMonitoringState.openDone = true\r\n            xhr.ajaxData = ajaxData;\r\n\r\n            this.attachToOnReadyStateChange(xhr);\r\n        }\r\n\r\n        private static getFailedAjaxDiagnosticsMessage(xhr: XMLHttpRequestInstrumented): string {\r\n            var result = \"\";\r\n            try {\r\n                if (!extensions.IsNullOrUndefined(xhr) &&\r\n                    !extensions.IsNullOrUndefined(xhr.ajaxData) &&\r\n                    !extensions.IsNullOrUndefined(xhr.ajaxData.requestUrl)) {\r\n                    result += \"(url: '\" + xhr.ajaxData.requestUrl + \"')\";\r\n                }\r\n            } catch (e) { }\r\n\r\n            return result;\r\n        }\r\n\r\n        private instrumentSend() {\r\n            var originalSend = XMLHttpRequest.prototype.send;\r\n            var ajaxMonitorInstance = this;\r\n            XMLHttpRequest.prototype.send = function (content) {\r\n                try {\r\n                    if (ajaxMonitorInstance.isMonitoredInstance(this) && !(<XMLHttpRequestInstrumented>this).ajaxData.xhrMonitoringState.sendDone) {\r\n                        ajaxMonitorInstance.sendHandler(this, content);\r\n                    }\r\n                } catch (e) {\r\n                    _InternalLogging.throwInternal(\r\n                        LoggingSeverity.CRITICAL,\r\n                        _InternalMessageId.FailedMonitorAjaxSend,\r\n                        \"Failed to monitor XMLHttpRequest, monitoring data for this ajax call may be incorrect.\",\r\n                        {\r\n                            ajaxDiagnosticsMessage: AjaxMonitor.getFailedAjaxDiagnosticsMessage(this),\r\n                            exception: Microsoft.ApplicationInsights.Util.dump(e)\r\n                        });\r\n                }\r\n\r\n                return originalSend.apply(this, arguments);\r\n            };\r\n        }\r\n\r\n        private sendHandler(xhr: XMLHttpRequestInstrumented, content) {\r\n            xhr.ajaxData.requestSentTime = dateTime.Now();\r\n\r\n            // Add correlation headers only for requests within the same host and port number\r\n            // For cross- origin requests we need to ensure that x- ms -* headers are present in `Access-Control-Allow-Headers` header (OPTIONS response)\r\n            if (!this.appInsights.config.disableCorrelationHeaders && (UrlHelper.parseUrl(xhr.ajaxData.getAbsoluteUrl()).host == this.currentWindowHost)) {\r\n                var rootId = this.appInsights.context.operation.id;\r\n                xhr.setRequestHeader(\"x-ms-request-root-id\", rootId);\r\n                xhr.setRequestHeader(\"x-ms-request-id\", xhr.ajaxData.id);\r\n            }\r\n            xhr.ajaxData.xhrMonitoringState.sendDone = true;\r\n        }\r\n\r\n        private instrumentAbort() {\r\n            var originalAbort = XMLHttpRequest.prototype.abort;\r\n            var ajaxMonitorInstance = this;\r\n            XMLHttpRequest.prototype.abort = function () {\r\n                try {\r\n                    if (ajaxMonitorInstance.isMonitoredInstance(this) && !(<XMLHttpRequestInstrumented>this).ajaxData.xhrMonitoringState.abortDone) {\r\n                        (<XMLHttpRequestInstrumented>this).ajaxData.aborted = 1;\r\n                        (<XMLHttpRequestInstrumented>this).ajaxData.xhrMonitoringState.abortDone = true;\r\n                    }\r\n                } catch (e) {\r\n                    _InternalLogging.throwInternal(\r\n                        LoggingSeverity.CRITICAL,\r\n                        _InternalMessageId.FailedMonitorAjaxAbort,\r\n                        \"Failed to monitor XMLHttpRequest.abort, monitoring data for this ajax call may be incorrect.\",\r\n                        {\r\n                            ajaxDiagnosticsMessage: AjaxMonitor.getFailedAjaxDiagnosticsMessage(this),\r\n                            exception: Microsoft.ApplicationInsights.Util.dump(e)\r\n                        });\r\n                }\r\n\r\n                return originalAbort.apply(this, arguments);\r\n            };\r\n        }\r\n\r\n        private attachToOnReadyStateChange(xhr: XMLHttpRequestInstrumented) {\r\n            var ajaxMonitorInstance = this;\r\n            xhr.ajaxData.xhrMonitoringState.onreadystatechangeCallbackAttached = EventHelper.AttachEvent(xhr, \"readystatechange\", () => {\r\n                try {\r\n                    if (ajaxMonitorInstance.isMonitoredInstance(xhr)) {\r\n                        if (xhr.readyState === 4) {\r\n                            ajaxMonitorInstance.onAjaxComplete(xhr);\r\n                        }\r\n                    }\r\n                } catch (e) {\r\n                    var exceptionText = Microsoft.ApplicationInsights.Util.dump(e);\r\n\r\n                    // ignore messages with c00c023f, as this a known IE9 XHR abort issue\r\n                    if (!exceptionText || exceptionText.toLowerCase().indexOf(\"c00c023f\") == -1) {\r\n                        _InternalLogging.throwInternal(\r\n                            LoggingSeverity.CRITICAL,\r\n                            _InternalMessageId.FailedMonitorAjaxRSC,\r\n                            \"Failed to monitor XMLHttpRequest 'readystatechange' event handler, monitoring data for this ajax call may be incorrect.\",\r\n                            {\r\n                                ajaxDiagnosticsMessage: AjaxMonitor.getFailedAjaxDiagnosticsMessage(xhr),\r\n                                exception: Microsoft.ApplicationInsights.Util.dump(e)\r\n                            });\r\n                    }\r\n                }\r\n            });\r\n        }\r\n\r\n        private onAjaxComplete(xhr: XMLHttpRequestInstrumented) {\r\n            xhr.ajaxData.responseFinishedTime = dateTime.Now();\r\n            xhr.ajaxData.status = xhr.status;\r\n            xhr.ajaxData.CalculateMetrics();\r\n\r\n            if (xhr.ajaxData.ajaxTotalDuration < 0) {\r\n                _InternalLogging.throwInternal(\r\n                    LoggingSeverity.WARNING,\r\n                    _InternalMessageId.FailedMonitorAjaxDur,\r\n                    \"Failed to calculate the duration of the ajax call, monitoring data for this ajax call won't be sent.\",\r\n                    {\r\n                        ajaxDiagnosticsMessage: AjaxMonitor.getFailedAjaxDiagnosticsMessage(xhr),\r\n                        requestSentTime: xhr.ajaxData.requestSentTime,\r\n                        responseFinishedTime: xhr.ajaxData.responseFinishedTime\r\n                    });\r\n            }\r\n            else {\r\n                this.appInsights.trackDependency(\r\n                    xhr.ajaxData.id,\r\n                    xhr.ajaxData.method,\r\n                    xhr.ajaxData.getAbsoluteUrl(),\r\n                    xhr.ajaxData.getPathName(),\r\n                    xhr.ajaxData.ajaxTotalDuration,\r\n                    (+(xhr.ajaxData.status)) >= 200 && (+(xhr.ajaxData.status)) < 400,\r\n                    +xhr.ajaxData.status\r\n                );\r\n\r\n                xhr.ajaxData = null;\r\n            }\r\n        }\r\n\r\n    }\r\n}\r\n","/// <reference path=\"Serializer.ts\" />\r\n/// <reference path=\"Telemetry/Common/Envelope.ts\"/>\r\n/// <reference path=\"Telemetry/Common/Base.ts\" />\r\n/// <reference path=\"../JavaScriptSDK.Interfaces/Contracts/Generated/ContextTagKeys.ts\"/>\r\n/// <reference path=\"Context/Application.ts\"/>\r\n/// <reference path=\"Context/Device.ts\"/>\r\n/// <reference path=\"Context/Internal.ts\"/>\r\n/// <reference path=\"Context/Location.ts\"/>\r\n/// <reference path=\"Context/Operation.ts\"/>\r\n/// <reference path=\"Context/Sample.ts\"/>\r\n/// <reference path=\"Context/Session.ts\"/>\r\n/// <reference path=\"Context/User.ts\"/>\r\n/// <reference path=\"ajax/ajax.ts\"/>\r\n\r\nmodule Microsoft.ApplicationInsights {\r\n    \"use strict\";\r\n\r\n    export interface ISendBuffer {\r\n        /**\r\n         * Enqueue the payload\r\n         */\r\n        enqueue: (payload: string) => void;\r\n\r\n        /**\r\n         * Returns the number of elements in the buffer\r\n         */\r\n        count: () => number;\r\n\r\n        /**\r\n         * Clears the buffer\r\n         */\r\n        clear: () => void;\r\n\r\n        /**\r\n         * Returns items stored in the buffer\r\n         */\r\n        getItems: () => string[];\r\n\r\n        /**\r\n         * Build a batch of all elements in the payload array\r\n         */\r\n        batchPayloads: (payload: string[]) => string;\r\n\r\n        /**\r\n         * Moves items to the SENT_BUFFER.\r\n         * The buffer holds items which were sent, but we haven't received any response from the backend yet. \r\n         */\r\n        markAsSent: (payload: string[]) => void;\r\n\r\n        /**\r\n         * Removes items from the SENT_BUFFER. Should be called on successful response from the backend. \r\n         */\r\n        clearSent: (payload: string[]) => void;\r\n    }\r\n\r\n    /*\r\n     * An array based send buffer. \r\n     */\r\n    export class ArraySendBuffer implements ISendBuffer {\r\n        private _config: ISenderConfig;\r\n        private _buffer: string[];\r\n\r\n        constructor(config: ISenderConfig) {\r\n            this._config = config;\r\n\r\n            this._buffer = [];\r\n        }\r\n\r\n        public enqueue(payload: string) {\r\n            this._buffer.push(payload);\r\n        }\r\n\r\n        public count(): number {\r\n            return this._buffer.length;\r\n        }\r\n\r\n        public clear() {\r\n            this._buffer.length = 0;\r\n        }\r\n\r\n        public getItems(): string[] {\r\n            return this._buffer.slice(0);\r\n        }\r\n\r\n        public batchPayloads(payload: string[]): string {\r\n            if (payload && payload.length > 0) {\r\n                var batch = this._config.emitLineDelimitedJson() ?\r\n                    payload.join(\"\\n\") :\r\n                    \"[\" + payload.join(\",\") + \"]\";\r\n\r\n                return batch;\r\n            }\r\n\r\n            return null;\r\n        }\r\n\r\n        public markAsSent(payload: string[]) {\r\n            this.clear();\r\n        }\r\n\r\n        public clearSent(payload: string[]) {\r\n            // not supported\r\n        }\r\n    }\r\n\r\n    /*\r\n     * Session storege buffer holds a copy of all unsent items in the browser session storage.\r\n     */\r\n    export class SessionStorageSendBuffer implements ISendBuffer {\r\n        static BUFFER_KEY = \"AI_buffer\";\r\n        static SENT_BUFFER_KEY = \"AI_sentBuffer\";\r\n\r\n        // Maximum number of payloads stored in the buffer. If the buffer is full, new elements will be dropped. \r\n        static MAX_BUFFER_SIZE = 2000;\r\n        private _bufferFullMessageSent = false;\r\n\r\n        // An in-memory copy of the buffer. A copy is saved to the session storage on enqueue() and clear(). \r\n        // The buffer is restored in a constructor and contains unsent events from a previous page.\r\n        private _buffer: string[];\r\n        private _config: ISenderConfig;\r\n\r\n        constructor(config: ISenderConfig) {\r\n            this._config = config;\r\n\r\n            var bufferItems = this.getBuffer(SessionStorageSendBuffer.BUFFER_KEY);\r\n            var notDeliveredItems = this.getBuffer(SessionStorageSendBuffer.SENT_BUFFER_KEY);\r\n\r\n            this._buffer = bufferItems.concat(notDeliveredItems);\r\n\r\n            // If the buffer has too many items, drop items from the end.\r\n            if (this._buffer.length > SessionStorageSendBuffer.MAX_BUFFER_SIZE) {\r\n                this._buffer.length = SessionStorageSendBuffer.MAX_BUFFER_SIZE;\r\n            }\r\n\r\n            // update DataLossAnalyzer with the number of recovered items\r\n            // Uncomment if you want to use DataLossanalyzer\r\n            // DataLossAnalyzer.itemsRestoredFromSessionBuffer = this._buffer.length;\r\n\r\n            this.setBuffer(SessionStorageSendBuffer.SENT_BUFFER_KEY, []);\r\n            this.setBuffer(SessionStorageSendBuffer.BUFFER_KEY, this._buffer);\r\n        }\r\n\r\n        public enqueue(payload: string) {\r\n            if (this._buffer.length >= SessionStorageSendBuffer.MAX_BUFFER_SIZE) {\r\n                // sent internal log only once per page view\r\n                if (!this._bufferFullMessageSent) {\r\n                    _InternalLogging.throwInternal(\r\n                        LoggingSeverity.WARNING,\r\n                        _InternalMessageId.SessionStorageBufferFull,\r\n                        \"Maximum buffer size reached: \" + this._buffer.length,\r\n                        true);\r\n                    this._bufferFullMessageSent = true;\r\n                }\r\n                return;\r\n            }\r\n\r\n            this._buffer.push(payload);\r\n            this.setBuffer(SessionStorageSendBuffer.BUFFER_KEY, this._buffer);\r\n        }\r\n\r\n        public count(): number {\r\n            return this._buffer.length;\r\n        }\r\n\r\n        public clear() {\r\n            this._buffer.length = 0;\r\n            this.setBuffer(SessionStorageSendBuffer.BUFFER_KEY, []);\r\n            this.setBuffer(SessionStorageSendBuffer.SENT_BUFFER_KEY, []);\r\n\r\n            this._bufferFullMessageSent = false;\r\n        }\r\n\r\n        public getItems(): string[] {\r\n            return this._buffer.slice(0)\r\n        }\r\n\r\n        public batchPayloads(payload: string[]): string {\r\n            if (payload && payload.length > 0) {\r\n                var batch = this._config.emitLineDelimitedJson() ?\r\n                    payload.join(\"\\n\") :\r\n                    \"[\" + payload.join(\",\") + \"]\";\r\n\r\n                return batch;\r\n            }\r\n\r\n            return null;\r\n        }\r\n\r\n        public markAsSent(payload: string[]) {\r\n            this._buffer = this.removePayloadsFromBuffer(payload, this._buffer);\r\n            this.setBuffer(SessionStorageSendBuffer.BUFFER_KEY, this._buffer);\r\n\r\n            var sentElements = this.getBuffer(SessionStorageSendBuffer.SENT_BUFFER_KEY);\r\n            if (sentElements instanceof Array && payload instanceof Array) {\r\n                sentElements = sentElements.concat(payload);\r\n\r\n                if (sentElements.length > SessionStorageSendBuffer.MAX_BUFFER_SIZE) {\r\n                    // We send telemetry normally. If the SENT_BUFFER is too big we don't add new elements\r\n                    // until we receive a response from the backend and the buffer has free space again (see clearSent method)\r\n                    _InternalLogging.throwInternal(\r\n                        LoggingSeverity.CRITICAL,\r\n                        _InternalMessageId.SessionStorageBufferFull,\r\n                        \"Sent buffer reached its maximum size: \" + sentElements.length,\r\n                        true);\r\n\r\n                    sentElements.length = SessionStorageSendBuffer.MAX_BUFFER_SIZE;\r\n                }\r\n\r\n                this.setBuffer(SessionStorageSendBuffer.SENT_BUFFER_KEY, sentElements);\r\n            }\r\n        }\r\n\r\n        public clearSent(payload: string[]) {\r\n            var sentElements = this.getBuffer(SessionStorageSendBuffer.SENT_BUFFER_KEY);\r\n            sentElements = this.removePayloadsFromBuffer(payload, sentElements);\r\n\r\n            this.setBuffer(SessionStorageSendBuffer.SENT_BUFFER_KEY, sentElements);\r\n        }\r\n\r\n        private removePayloadsFromBuffer(payloads: string[], buffer: string[]): string[] {\r\n            var remaining: string[] = [];\r\n\r\n            for (var i in buffer) {\r\n                var contains = false;\r\n                for (var j in payloads) {\r\n                    if (payloads[j] === buffer[i]) {\r\n                        contains = true;\r\n                        break;\r\n                    }\r\n                }\r\n\r\n                if (!contains) {\r\n                    remaining.push(buffer[i]);\r\n                }\r\n            };\r\n\r\n            return remaining;\r\n        }\r\n\r\n        private getBuffer(key: string): string[] {\r\n            try {\r\n                var bufferJson = Util.getSessionStorage(key);\r\n                if (bufferJson) {\r\n                    var buffer: string[] = JSON.parse(bufferJson);\r\n                    if (buffer) {\r\n                        return buffer;\r\n                    }\r\n                }\r\n            } catch (e) {\r\n                _InternalLogging.throwInternal(LoggingSeverity.CRITICAL,\r\n                    _InternalMessageId.FailedToRestoreStorageBuffer,\r\n                        \" storage key: \" + key + \", \" + Util.getExceptionName(e),\r\n                        { exception: Util.dump(e) });\r\n            }\r\n\r\n            return [];\r\n        }\r\n\r\n        private setBuffer(key: string, buffer: string[]) {\r\n            try {\r\n                var bufferJson = JSON.stringify(buffer);\r\n                Util.setSessionStorage(key, bufferJson);\r\n            } catch (e) {\r\n                // if there was an error, clear the buffer\r\n                // telemetry is stored in the _buffer array so we won't loose any items\r\n                Util.setSessionStorage(key, JSON.stringify([]));\r\n\r\n                _InternalLogging.throwInternal(LoggingSeverity.WARNING,\r\n                    _InternalMessageId.FailedToSetStorageBuffer,\r\n                        \" storage key: \" + key + \", \" + Util.getExceptionName(e) + \". Buffer cleared\",\r\n                        { exception: Util.dump(e) });\r\n            }\r\n        }\r\n    }\r\n}","/// <reference path=\"Serializer.ts\" />\r\n/// <reference path=\"Telemetry/Common/Envelope.ts\"/>\r\n/// <reference path=\"Telemetry/Common/Base.ts\" />\r\n/// <reference path=\"../JavaScriptSDK.Interfaces/Contracts/Generated/ContextTagKeys.ts\"/>\r\n/// <reference path=\"../JavaScriptSDK.Interfaces/Contracts/Generated/Envelope.ts\" />\r\n/// <reference path=\"Context/Application.ts\"/>\r\n/// <reference path=\"Context/Device.ts\"/>\r\n/// <reference path=\"Context/Internal.ts\"/>\r\n/// <reference path=\"Context/Location.ts\"/>\r\n/// <reference path=\"Context/Operation.ts\"/>\r\n/// <reference path=\"Context/Sample.ts\"/>\r\n/// <reference path=\"Context/Session.ts\"/>\r\n/// <reference path=\"Context/User.ts\"/>\r\n/// <reference path=\"ajax/ajax.ts\"/>\r\n/// <reference path=\"SendBuffer.ts\"/>\r\n\r\ninterface XDomainRequest extends XMLHttpRequestEventTarget {\r\n    responseText: string;\r\n    send(payload: string);\r\n    open(method: string, url: string);\r\n};\r\n\r\ndeclare var XDomainRequest: {\r\n    prototype: XDomainRequest;\r\n    new (): XDomainRequest;\r\n};\r\n\r\nmodule Microsoft.ApplicationInsights {\r\n    \"use strict\";\r\n\r\n    export interface ISenderConfig {\r\n        /**\r\n         * The url to which payloads will be sent\r\n         */\r\n        endpointUrl: () => string;\r\n\r\n        /**\r\n        * The JSON format (normal vs line delimited). True means line delimited JSON.\r\n        */\r\n        emitLineDelimitedJson: () => boolean;\r\n\r\n        /**\r\n         * The maximum size of a batch in bytes\r\n         */\r\n        maxBatchSizeInBytes: () => number;\r\n\r\n        /**\r\n         * The maximum interval allowed between calls to batchInvoke\r\n         */\r\n        maxBatchInterval: () => number;\r\n\r\n        /**\r\n         * The master off switch.  Do not send any data if set to TRUE\r\n         */\r\n        disableTelemetry: () => boolean;\r\n\r\n        /**\r\n         * Store a copy of a send buffer in the session storage\r\n         */\r\n        enableSessionStorageBuffer: () => boolean;\r\n\r\n        /**\r\n         * Is retry handler disabled.\r\n         * If enabled, retry on 206 (partial success), 408 (timeout), 429 (too many requests), 500 (internal server error) and 503 (service unavailable).\r\n         */\r\n        isRetryDisabled: () => boolean;\r\n\r\n        isBeaconApiDisabled: () => boolean;\r\n    }\r\n\r\n    export interface IResponseError {\r\n        index: number;\r\n        statusCode: number;\r\n        message: string;\r\n    }\r\n\r\n    export interface IBackendResponse {\r\n        /**\r\n         * Number of items received by the backend\r\n         */\r\n        itemsReceived: number;\r\n\r\n        /**\r\n         * Number of items succesfuly accepted by the backend\r\n         */\r\n        itemsAccepted: number;\r\n\r\n        /**\r\n         * List of errors for items which were not accepted\r\n         */\r\n        errors: IResponseError[];\r\n    }\r\n\r\n    export class Sender {\r\n        /**\r\n         * How many times in a row a retryable error condition has occurred.\r\n         */\r\n        private _consecutiveErrors: number;\r\n\r\n        /**\r\n         * The time to retry at in milliseconds from 1970/01/01 (this makes the timer calculation easy).\r\n         */\r\n        private _retryAt: number;\r\n\r\n        /**\r\n         * The time of the last send operation.\r\n         */\r\n        private _lastSend: number;\r\n\r\n        /**\r\n         * Handle to the timer for delayed sending of batches of data.\r\n         */\r\n        private _timeoutHandle: any;\r\n\r\n        /**\r\n         * A send buffer object\r\n         */\r\n        public _buffer: ISendBuffer;\r\n\r\n        /**\r\n         * The configuration for this sender instance\r\n         */\r\n        public _config: ISenderConfig;\r\n\r\n        /**\r\n         * A method which will cause data to be send to the url\r\n         */\r\n\r\n        public _sender: (payload: string[], isAsync: boolean) => void;\r\n\r\n        /**\r\n         * Whether XMLHttpRequest object is supported. Older version of IE (8,9) do not support it.\r\n         */\r\n        public _XMLHttpRequestSupported: boolean = false;\r\n\r\n        /**\r\n         * The maximum Beacon API payload size.\r\n         * WC3 documentation allows browsers to set the limit. Chrome current has a limit of 64kb. \r\n         */\r\n        public static MaxBeaconPayloadSize = 65536; // 64kb\r\n\r\n        /**\r\n         * Constructs a new instance of the Sender class\r\n         */\r\n        constructor(config: ISenderConfig) {\r\n            this._consecutiveErrors = 0;\r\n            this._retryAt = null;\r\n            this._lastSend = 0;\r\n            this._config = config;\r\n            this._sender = null;\r\n            this._buffer = (Util.canUseSessionStorage() && this._config.enableSessionStorageBuffer())\r\n                ? new SessionStorageSendBuffer(config) : new ArraySendBuffer(config);\r\n\r\n            if (!this._config.isBeaconApiDisabled() && Util.IsBeaconApiSupported()) {\r\n                this._sender = this._beaconSender;\r\n            } else {\r\n                if (typeof XMLHttpRequest != \"undefined\") {\r\n                    var testXhr = new XMLHttpRequest();\r\n                    if (\"withCredentials\" in testXhr) {\r\n                        this._sender = this._xhrSender;\r\n                        this._XMLHttpRequestSupported = true;\r\n                    } else if (typeof XDomainRequest !== \"undefined\") {\r\n                        this._sender = this._xdrSender; //IE 8 and 9\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Add a telemetry item to the send buffer\r\n         */\r\n        public send(envelope: Microsoft.ApplicationInsights.IEnvelope) {\r\n            try {\r\n                // if master off switch is set, don't send any data\r\n                if (this._config.disableTelemetry()) {\r\n                    // Do not send/save data\r\n                    return;\r\n                }\r\n\r\n                // validate input\r\n                if (!envelope) {\r\n                    _InternalLogging.throwInternal(LoggingSeverity.CRITICAL, _InternalMessageId.CannotSendEmptyTelemetry, \"Cannot send empty telemetry\");\r\n                    return;\r\n                }\r\n\r\n                // ensure a sender was constructed\r\n                if (!this._sender) {\r\n                    _InternalLogging.throwInternal(LoggingSeverity.CRITICAL, _InternalMessageId.SenderNotInitialized, \"Sender was not initialized\");\r\n                    return;\r\n                }\r\n\r\n                // check if the incoming payload is too large, truncate if necessary\r\n                var payload: string = Serializer.serialize(envelope);\r\n\r\n                // flush if we would exceed the max-size limit by adding this item\r\n                var bufferPayload = this._buffer.getItems();\r\n                var batch = this._buffer.batchPayloads(bufferPayload);\r\n\r\n                if (batch && (batch.length + payload.length > this._config.maxBatchSizeInBytes())) {\r\n                    this.triggerSend();\r\n                }\r\n\r\n                // enqueue the payload\r\n                this._buffer.enqueue(payload);\r\n\r\n                // ensure an invocation timeout is set\r\n                this._setupTimer();\r\n\r\n                // Uncomment if you want to use DataLossanalyzer\r\n                // DataLossAnalyzer.incrementItemsQueued();\r\n            } catch (e) {\r\n                _InternalLogging.throwInternal(\r\n                    LoggingSeverity.WARNING,\r\n                    _InternalMessageId.FailedAddingTelemetryToBuffer,\r\n                    \"Failed adding telemetry to the sender's buffer, some telemetry will be lost: \" + Util.getExceptionName(e),\r\n                    { exception: Util.dump(e) });\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Sets up the timer which triggers actually sending the data.\r\n         */\r\n        private _setupTimer() {\r\n            if (!this._timeoutHandle) {\r\n                var retryInterval = this._retryAt ? Math.max(0, this._retryAt - Date.now()) : 0;\r\n                var timerValue = Math.max(this._config.maxBatchInterval(), retryInterval);\r\n\r\n                this._timeoutHandle = setTimeout(() => {\r\n                    this.triggerSend();\r\n                }, timerValue);\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Gets the size of the list in bytes.\r\n         * @param list {string[]} - The list to get the size in bytes of.\r\n         */\r\n        private _getSizeInBytes(list: string[]) {\r\n            var size = 0;\r\n            if (list && list.length) {\r\n                for (var i = 0; i < list.length; i++) {\r\n                    var item = list[i];\r\n                    if (item && item.length) {\r\n                        size += item.length;\r\n                    }\r\n                }\r\n            }\r\n\r\n            return size;\r\n        }\r\n\r\n        /**\r\n         * Immediately send buffered data\r\n         * @param async {boolean} - Indicates if the events should be sent asynchronously\r\n         */\r\n        public triggerSend(async = true) {\r\n            try {\r\n                // Send data only if disableTelemetry is false\r\n                if (!this._config.disableTelemetry()) {\r\n\r\n                    if (this._buffer.count() > 0) {\r\n                        var payload = this._buffer.getItems();\r\n\r\n                        // invoke send\r\n                        this._sender(payload, async);\r\n                    }\r\n\r\n                    // update lastSend time to enable throttling\r\n                    this._lastSend = +new Date;\r\n                } else {\r\n                    this._buffer.clear();\r\n                }\r\n\r\n                clearTimeout(this._timeoutHandle);\r\n                this._timeoutHandle = null;\r\n                this._retryAt = null;\r\n            } catch (e) {\r\n                /* Ignore this error for IE under v10 */\r\n                if (!Util.getIEVersion() || Util.getIEVersion() > 9) {\r\n                    _InternalLogging.throwInternal(\r\n                        LoggingSeverity.CRITICAL,\r\n                        _InternalMessageId.TransmissionFailed,\r\n                        \"Telemetry transmission failed, some telemetry will be lost: \" + Util.getExceptionName(e),\r\n                        { exception: Util.dump(e) });\r\n                }\r\n            }\r\n        }\r\n\r\n        /** Calculates the time to wait before retrying in case of an error based on\r\n         * http://en.wikipedia.org/wiki/Exponential_backoff\r\n         */\r\n        private _setRetryTime() {\r\n            const SlotDelayInSeconds = 10;\r\n            var delayInSeconds: number;\r\n\r\n            if (this._consecutiveErrors <= 1) {\r\n                delayInSeconds = SlotDelayInSeconds;\r\n            } else {\r\n                var backOffSlot = (Math.pow(2, this._consecutiveErrors) - 1) / 2;\r\n                var backOffDelay = Math.floor(Math.random() * backOffSlot * SlotDelayInSeconds) + 1;\r\n                delayInSeconds = Math.max(Math.min(backOffDelay, 3600), SlotDelayInSeconds);\r\n            }\r\n\r\n            // TODO: Log the backoff time like the C# version does.\r\n            var retryAfterTimeSpan = Date.now() + (delayInSeconds * 1000);\r\n\r\n            // TODO: Log the retry at time like the C# version does.\r\n            this._retryAt = retryAfterTimeSpan;\r\n        }\r\n\r\n        /**\r\n         * Parses the response from the backend. \r\n         * @param response - XMLHttpRequest or XDomainRequest response\r\n         */\r\n        private _parseResponse(response: any): IBackendResponse {\r\n            try {\r\n                var result = JSON.parse(response);\r\n\r\n                if (result && result.itemsReceived && result.itemsReceived >= result.itemsAccepted &&\r\n                    result.itemsReceived - result.itemsAccepted == result.errors.length) {\r\n                    return result;\r\n                }\r\n            } catch (e) {\r\n                _InternalLogging.throwInternal(\r\n                    LoggingSeverity.CRITICAL,\r\n                    _InternalMessageId.InvalidBackendResponse,\r\n                    \"Cannot parse the response. \" + Util.getExceptionName(e));\r\n            }\r\n\r\n            return null;\r\n        }\r\n\r\n        /**\r\n         * Checks if the SDK should resend the payload after receiving this status code from the backend.\r\n         * @param statusCode\r\n         */\r\n        private _isRetriable(statusCode: number): boolean {\r\n            return statusCode == 408 // Timeout\r\n                || statusCode == 429 // Too many requests.\r\n                || statusCode == 500 // Internal server error.\r\n                || statusCode == 503; // Service unavailable.\r\n        }\r\n\r\n        /**\r\n         * Resend payload. Adds payload back to the send buffer and setup a send timer (with exponential backoff).\r\n         * @param payload\r\n         */\r\n        private _resendPayload(payload: string[]) {\r\n            if (!payload || payload.length === 0) {\r\n                return;\r\n            }\r\n\r\n            this._buffer.clearSent(payload);\r\n            this._consecutiveErrors++;\r\n\r\n            for (var item of payload) {\r\n                this._buffer.enqueue(item);\r\n            }\r\n\r\n            // setup timer\r\n            this._setRetryTime();\r\n            this._setupTimer();\r\n        }\r\n\r\n        private _formatErrorMessageXhr(xhr: XMLHttpRequest, message?: string): string {\r\n            if (xhr) {\r\n                return \"XMLHttpRequest,Status:\" + xhr.status + \",Response:\" + xhr.responseText || xhr.response || \"\";\r\n            }\r\n\r\n            return message;\r\n        }\r\n\r\n        private _formatErrorMessageXdr(xdr: XDomainRequest, message?: string): string {\r\n            if (xdr) {\r\n                return \"XDomainRequest,Response:\" + xdr.responseText || \"\";\r\n            }\r\n\r\n            return message;\r\n        }\r\n\r\n        /**\r\n         * Send XMLHttpRequest\r\n         * @param payload {string} - The data payload to be sent.\r\n         * @param isAsync {boolean} - Indicates if the request should be sent asynchronously\r\n         */\r\n        private _xhrSender(payload: string[], isAsync: boolean) {\r\n            var xhr = new XMLHttpRequest();\r\n            xhr[AjaxMonitor.DisabledPropertyName] = true;\r\n            xhr.open(\"POST\", this._config.endpointUrl(), isAsync);\r\n            xhr.setRequestHeader(\"Content-type\", \"application/json\");\r\n            xhr.onreadystatechange = () => this._xhrReadyStateChange(xhr, payload, payload.length);\r\n            xhr.onerror = (event: ErrorEvent) => this._onError(payload, this._formatErrorMessageXhr(xhr), event);\r\n\r\n            // compose an array of payloads\r\n            var batch = this._buffer.batchPayloads(payload);\r\n            xhr.send(batch);\r\n\r\n            this._buffer.markAsSent(payload);\r\n        }\r\n\r\n        /**\r\n         * Send XDomainRequest\r\n         * @param payload {string} - The data payload to be sent.\r\n         * @param isAsync {boolean} - Indicates if the request should be sent asynchronously\r\n         * \r\n         * Note: XDomainRequest does not support sync requests. This 'isAsync' parameter is added\r\n         * to maintain consistency with the xhrSender's contract\r\n         */\r\n        private _xdrSender(payload: string[], isAsync: boolean) {\r\n            var xdr = new XDomainRequest();\r\n            xdr.onload = () => this._xdrOnLoad(xdr, payload);\r\n            xdr.onerror = (event: ErrorEvent) => this._onError(payload, this._formatErrorMessageXdr(xdr), event);\r\n\r\n            // XDomainRequest requires the same protocol as the hosting page. \r\n            // If the protocol doesn't match, we can't send the telemetry :(. \r\n            var hostingProtocol = window.location.protocol\r\n            if (this._config.endpointUrl().lastIndexOf(hostingProtocol, 0) !== 0) {\r\n                _InternalLogging.throwInternal(\r\n                    LoggingSeverity.WARNING,\r\n                    _InternalMessageId.TransmissionFailed, \". \" +\r\n                    \"Cannot send XDomain request. The endpoint URL protocol doesn't match the hosting page protocol.\");\r\n\r\n                this._buffer.clear();\r\n                return;\r\n            }\r\n\r\n            var endpointUrl = this._config.endpointUrl().replace(/^(https?:)/, \"\");\r\n            xdr.open('POST', endpointUrl);\r\n\r\n            // compose an array of payloads\r\n            var batch = this._buffer.batchPayloads(payload);\r\n            xdr.send(batch);\r\n\r\n            this._buffer.markAsSent(payload);\r\n        }\r\n\r\n        /**\r\n         * Send Beacon API request\r\n         * @param payload {string} - The data payload to be sent.\r\n         * @param isAsync {boolean} - not used\r\n         */\r\n        private _beaconSender(payload: string[], isAsync: boolean) {\r\n            var url = this._config.endpointUrl();\r\n            var batch = this._buffer.batchPayloads(payload);\r\n\r\n            // The sendBeacon method returns true if the user agent is able to successfully queue the data for transfer. Otherwise it returns false.\r\n            var queued = (<any>navigator).sendBeacon(url, batch);\r\n\r\n            if (queued) {\r\n                this._buffer.markAsSent(payload);\r\n            } else {\r\n                _InternalLogging.throwInternal(LoggingSeverity.CRITICAL, _InternalMessageId.TransmissionFailed, \". \" + \"Failed to send telemetry with Beacon API.\");\r\n            }\r\n        }\r\n\r\n        /**\r\n         * xhr state changes\r\n         */\r\n        public _xhrReadyStateChange(xhr: XMLHttpRequest, payload: string[], countOfItemsInPayload: number) {\r\n            if (xhr.readyState === 4) {\r\n                if ((xhr.status < 200 || xhr.status >= 300) && xhr.status !== 0) {\r\n                    if (!this._config.isRetryDisabled() && this._isRetriable(xhr.status)) {\r\n                        this._resendPayload(payload);\r\n\r\n                        _InternalLogging.throwInternal(\r\n                            LoggingSeverity.WARNING,\r\n                            _InternalMessageId.TransmissionFailed, \". \" +\r\n                            \"Response code \" + xhr.status + \". Will retry to send \" + payload.length + \" items.\");\r\n                    } else {\r\n                        this._onError(payload, this._formatErrorMessageXhr(xhr));\r\n                    }\r\n                } else {\r\n                    if (xhr.status === 206) {\r\n                        var response = this._parseResponse(xhr.responseText || xhr.response);\r\n\r\n                        if (response && !this._config.isRetryDisabled()) {\r\n                            this._onPartialSuccess(payload, response);\r\n                        } else {\r\n                            this._onError(payload, this._formatErrorMessageXhr(xhr));\r\n                        }\r\n                    } else {\r\n                        this._consecutiveErrors = 0;\r\n                        this._onSuccess(payload, countOfItemsInPayload);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        /**\r\n         * xdr state changes\r\n         */\r\n        public _xdrOnLoad(xdr: XDomainRequest, payload: string[]) {\r\n            if (xdr && (xdr.responseText + \"\" === \"200\" || xdr.responseText === \"\")) {\r\n                this._consecutiveErrors = 0;\r\n                this._onSuccess(payload, 0);\r\n            } else {\r\n                var results = this._parseResponse(xdr.responseText);\r\n\r\n                if (results && results.itemsReceived && results.itemsReceived > results.itemsAccepted\r\n                    && !this._config.isRetryDisabled()) {\r\n                    this._onPartialSuccess(payload, results);\r\n                } else {\r\n                    this._onError(payload, this._formatErrorMessageXdr(xdr));\r\n                }\r\n            }\r\n        }\r\n\r\n        /**\r\n         * partial success handler\r\n         */\r\n        public _onPartialSuccess(payload: string[], results: IBackendResponse) {\r\n            var failed = [];\r\n            var retry = [];\r\n\r\n            // Iterate through the reversed array of errors so that splicing doesn't have invalid indexes after the first item.\r\n            var errors = results.errors.reverse();\r\n            for (var error of errors) {\r\n                var extracted = payload.splice(error.index, 1)[0];\r\n                if (this._isRetriable(error.statusCode)) {\r\n                    retry.push(extracted);\r\n                } else {\r\n                    // All other errors, including: 402 (Monthly quota exceeded) and 439 (Too many requests and refresh cache).\r\n                    failed.push(extracted);\r\n                }\r\n            }\r\n\r\n            if (payload.length > 0) {\r\n                this._onSuccess(payload, results.itemsAccepted);\r\n            }\r\n\r\n            if (failed.length > 0) {\r\n                this._onError(failed, this._formatErrorMessageXhr(null, ['partial success', results.itemsAccepted, 'of', results.itemsReceived].join(' ')));\r\n            }\r\n\r\n            if (retry.length > 0) {\r\n                this._resendPayload(retry);\r\n\r\n                _InternalLogging.throwInternal(\r\n                    LoggingSeverity.WARNING,\r\n                    _InternalMessageId.TransmissionFailed, \"Partial success. \" +\r\n                    \"Delivered: \" + payload.length + \", Failed: \" + failed.length +\r\n                    \". Will retry to send \" + retry.length + \" our of \" + results.itemsReceived + \" items\");\r\n            }\r\n        }\r\n\r\n        /**\r\n         * error handler\r\n         */\r\n        public _onError(payload: string[], message: string, event?: ErrorEvent) {\r\n            _InternalLogging.throwInternal(\r\n                LoggingSeverity.WARNING,\r\n                _InternalMessageId.OnError,\r\n                \"Failed to send telemetry.\",\r\n                { message: message });\r\n\r\n            this._buffer.clearSent(payload);\r\n        }\r\n\r\n        /**\r\n         * success handler\r\n         */\r\n        public _onSuccess(payload: string[], countOfItemsInPayload: number) {\r\n            // Uncomment if you want to use DataLossanalyzer\r\n            // DataLossAnalyzer.decrementItemsQueued(countOfItemsInPayload);\r\n\r\n            this._buffer.clearSent(payload);\r\n        }\r\n    }\r\n\r\n    interface linkedListNode {\r\n        next: linkedListNode;\r\n        payload: string;\r\n    }\r\n}\r\n","// THIS TYPE WAS AUTOGENERATED\r\nmodule Microsoft.Telemetry\r\n{\r\n\"use strict\";\r\n    export class Domain\r\n    {\r\n        \r\n        constructor()\r\n        {\r\n        }\r\n    }\r\n}\r\n","// THIS TYPE WAS AUTOGENERATED\r\n/// <reference path=\"Domain.ts\" />\r\n/// <reference path=\"SeverityLevel.ts\" />\r\nmodule AI\r\n{\r\n\"use strict\";\r\n    export class MessageData extends Microsoft.Telemetry.Domain\r\n    {\r\n        public ver: number;\r\n        public message: string;\r\n        public severityLevel: AI.SeverityLevel;\r\n        public properties: any;\r\n        \r\n        constructor()\r\n        {\r\n            super();\r\n\r\n            this.ver = 2;\r\n            this.properties = {};\r\n            \r\n            super();\r\n        }\r\n    }\r\n}\r\n","/// <reference path=\"../../Logging.ts\" />\r\n/// <reference path=\"../../Util.ts\"/>\r\n\r\nmodule Microsoft.ApplicationInsights.Telemetry.Common {\r\n    \"use strict\";\r\n\r\n    export class DataSanitizer {\r\n\r\n        /**\r\n        * Max length allowed for custom names.\r\n        */\r\n        private static MAX_NAME_LENGTH = 150;\r\n\r\n        /**\r\n         * Max length allowed for custom values.\r\n         */\r\n        private static MAX_STRING_LENGTH = 1024;\r\n\r\n        /**\r\n         * Max length allowed for url.\r\n         */\r\n        private static MAX_URL_LENGTH = 2048;\r\n\r\n        /**\r\n         * Max length allowed for messages.\r\n         */\r\n        private static MAX_MESSAGE_LENGTH = 32768;\r\n\r\n        /**\r\n         * Max length allowed for exceptions.\r\n         */\r\n        private static MAX_EXCEPTION_LENGTH = 32768;\r\n\r\n        public static sanitizeKeyAndAddUniqueness(key, map) {\r\n            var origLength = key.length;\r\n            var field = DataSanitizer.sanitizeKey(key);\r\n\r\n            // validation truncated the length.  We need to add uniqueness\r\n            if (field.length !== origLength) {\r\n                var i = 0;\r\n                var uniqueField = field;\r\n                while (map[uniqueField] !== undefined) {\r\n                    i++;\r\n                    uniqueField = field.substring(0, DataSanitizer.MAX_NAME_LENGTH - 3) + DataSanitizer.padNumber(i);\r\n                }\r\n                field = uniqueField;\r\n            }\r\n            return field;\r\n        }\r\n\r\n        public static sanitizeKey(name) {\r\n            if (name) {\r\n                // Remove any leading or trailing whitepace\r\n                name = Util.trim(name.toString());\r\n\r\n                // truncate the string to 150 chars\r\n                if (name.length > DataSanitizer.MAX_NAME_LENGTH) {\r\n                    name = name.substring(0, DataSanitizer.MAX_NAME_LENGTH);\r\n                    _InternalLogging.throwInternal(\r\n                        LoggingSeverity.WARNING,\r\n                        _InternalMessageId.NameTooLong,\r\n                        \"name is too long.  It has been truncated to \" + DataSanitizer.MAX_NAME_LENGTH + \" characters.\",\r\n                        { name: name }, true);\r\n                }\r\n            }\r\n\r\n            return name;\r\n        }\r\n\r\n        public static sanitizeString(value) {\r\n            if (value) {\r\n                value = Util.trim(value);\r\n                if (value.toString().length > DataSanitizer.MAX_STRING_LENGTH) {\r\n                    value = value.toString().substring(0, DataSanitizer.MAX_STRING_LENGTH);\r\n                    _InternalLogging.throwInternal(\r\n                        LoggingSeverity.WARNING,\r\n                        _InternalMessageId.StringValueTooLong,\r\n                        \"string value is too long. It has been truncated to \" + DataSanitizer.MAX_STRING_LENGTH + \" characters.\",\r\n                        { value: value }, true);\r\n                }\r\n            }\r\n\r\n            return value;\r\n        }\r\n\r\n        public static sanitizeUrl(url) {\r\n            if (url) {\r\n                url = Util.trim(url);\r\n                if (url.length > DataSanitizer.MAX_URL_LENGTH) {\r\n                    url = url.substring(0, DataSanitizer.MAX_URL_LENGTH);\r\n                    _InternalLogging.throwInternal(\r\n                        LoggingSeverity.WARNING,\r\n                        _InternalMessageId.UrlTooLong,\r\n                        \"url is too long, it has been truncated to \" + DataSanitizer.MAX_URL_LENGTH + \" characters.\",\r\n                        { url: url },\r\n                        true);\r\n                }\r\n            }\r\n\r\n            return url;\r\n        }\r\n\r\n        public static sanitizeMessage(message) {\r\n            if (message) {\r\n                if (message.length > DataSanitizer.MAX_MESSAGE_LENGTH) {\r\n                    message = message.substring(0, DataSanitizer.MAX_MESSAGE_LENGTH);\r\n                    _InternalLogging.throwInternal(\r\n                        LoggingSeverity.WARNING, _InternalMessageId.MessageTruncated,\r\n                        \"message is too long, it has been truncated to \" + DataSanitizer.MAX_MESSAGE_LENGTH + \" characters.\",\r\n                        { message: message },\r\n                        true);\r\n                }\r\n            }\r\n\r\n            return message;\r\n        }\r\n\r\n        public static sanitizeException(exception) {\r\n            if (exception) {\r\n                if (exception.length > DataSanitizer.MAX_EXCEPTION_LENGTH) {\r\n                    exception = exception.substring(0, DataSanitizer.MAX_EXCEPTION_LENGTH);\r\n                    _InternalLogging.throwInternal(\r\n                        LoggingSeverity.WARNING, _InternalMessageId.ExceptionTruncated, \"exception is too long, it has been truncated to \" + DataSanitizer.MAX_EXCEPTION_LENGTH + \" characters.\",\r\n                        { exception: exception }, true);\r\n                }\r\n            }\r\n\r\n            return exception;\r\n        }\r\n\r\n        public static sanitizeProperties(properties) {\r\n            if (properties) {\r\n                var tempProps = {};\r\n                for (var prop in properties) {\r\n                    var value = DataSanitizer.sanitizeString(properties[prop]);\r\n                    prop = DataSanitizer.sanitizeKeyAndAddUniqueness(prop, tempProps);\r\n                    tempProps[prop] = value;\r\n                }\r\n                properties = tempProps;\r\n            }\r\n\r\n            return properties;\r\n        }\r\n\r\n        public static sanitizeMeasurements(measurements) {\r\n            if (measurements) {\r\n                var tempMeasurements = {};\r\n                for (var measure in measurements) {\r\n                    var value = measurements[measure];\r\n                    measure = DataSanitizer.sanitizeKeyAndAddUniqueness(measure, tempMeasurements);\r\n                    tempMeasurements[measure] = value;\r\n                }\r\n                measurements = tempMeasurements;\r\n            }\r\n\r\n            return measurements;\r\n        }\r\n\r\n        public static padNumber(num) {\r\n            var s = \"00\" + num;\r\n            return s.substr(s.length - 3);\r\n        }\r\n    }\r\n}","/// <reference path=\"../../JavaScriptSDK.Interfaces/Contracts/Generated/MessageData.ts\" />\r\n/// <reference path=\"./Common/DataSanitizer.ts\"/>\r\n\r\nmodule Microsoft.ApplicationInsights.Telemetry {\r\n    \"use strict\";\r\n\r\n    export class Trace extends AI.MessageData implements ISerializable {\r\n\r\n        public static envelopeType = \"Microsoft.ApplicationInsights.{0}.Message\";\r\n        public static dataType = \"MessageData\";\r\n\r\n        public aiDataContract = {\r\n            ver: FieldType.Required,\r\n            message: FieldType.Required,\r\n            severityLevel: FieldType.Default,\r\n            properties: FieldType.Default\r\n        };\r\n\r\n        /**\r\n         * Constructs a new instance of the TraceTelemetry object\r\n         */\r\n        constructor(message: string, properties?: any, severityLevel?: AI.SeverityLevel) {\r\n            super();\r\n            message = message || Util.NotSpecified;\r\n            this.message = Common.DataSanitizer.sanitizeMessage(message);\r\n            this.properties = Common.DataSanitizer.sanitizeProperties(properties);\r\n\r\n            if (severityLevel) {\r\n                this.severityLevel = severityLevel;\r\n            }\r\n        }\r\n    }\r\n}","// THIS TYPE WAS AUTOGENERATED\r\n/// <reference path=\"Domain.ts\" />\r\nmodule AI\r\n{\r\n\"use strict\";\r\n    export class EventData extends Microsoft.Telemetry.Domain\r\n    {\r\n        public ver: number;\r\n        public name: string;\r\n        public properties: any;\r\n        public measurements: any;\r\n        \r\n        constructor()\r\n        {\r\n            super();\r\n\r\n            this.ver = 2;\r\n            this.properties = {};\r\n            this.measurements = {};\r\n            \r\n            super();\r\n        }\r\n    }\r\n}\r\n","/// <reference path=\"../../JavaScriptSDK.Interfaces/Contracts/Generated/EventData.ts\" />\r\n/// <reference path=\"./Common/DataSanitizer.ts\"/>\r\n\r\nmodule Microsoft.ApplicationInsights.Telemetry {\r\n    \"use strict\";\r\n\r\n    export class Event extends AI.EventData implements ISerializable {\r\n\r\n        public static envelopeType = \"Microsoft.ApplicationInsights.{0}.Event\";\r\n        public static dataType = \"EventData\";\r\n\r\n        public aiDataContract = {\r\n            ver: FieldType.Required,\r\n            name: FieldType.Required,\r\n            properties: FieldType.Default,\r\n            measurements: FieldType.Default\r\n        }\r\n\r\n        /**\r\n         * Constructs a new instance of the EventTelemetry object\r\n         */\r\n        constructor(name: string, properties?: any, measurements?: any) {\r\n            \r\n            super();\r\n\r\n            this.name = ApplicationInsights.Telemetry.Common.DataSanitizer.sanitizeString(name) || Util.NotSpecified;\r\n            this.properties = ApplicationInsights.Telemetry.Common.DataSanitizer.sanitizeProperties(properties);\r\n            this.measurements = ApplicationInsights.Telemetry.Common.DataSanitizer.sanitizeMeasurements(measurements);\r\n        }\r\n    }\r\n}","// THIS TYPE WAS AUTOGENERATED\r\nmodule AI\r\n{\r\n\"use strict\";\r\n    export class ExceptionDetails\r\n    {\r\n        public id: number;\r\n        public outerId: number;\r\n        public typeName: string;\r\n        public message: string;\r\n        public hasFullStack: boolean;\r\n        public stack: string;\r\n        public parsedStack: StackFrame[];\r\n        \r\n        constructor()\r\n        {\r\n            this.hasFullStack = true;\r\n            this.parsedStack = [];\r\n        }\r\n    }\r\n}\r\n","// THIS TYPE WAS AUTOGENERATED\r\n/// <reference path=\"Domain.ts\" />\r\n/// <reference path=\"SeverityLevel.ts\" />\r\n/// <reference path=\"ExceptionDetails.ts\"/>\r\nmodule AI\r\n{\r\n\"use strict\";\r\n    export class ExceptionData extends Microsoft.Telemetry.Domain\r\n    {\r\n        public ver: number;\r\n        public handledAt: string;\r\n        public exceptions: ExceptionDetails[];\r\n        public severityLevel: AI.SeverityLevel;\r\n        public problemId: string;\r\n        public crashThreadId: number;\r\n        public properties: any;\r\n        public measurements: any;\r\n        \r\n        constructor()\r\n        {\r\n            super();\r\n\r\n            this.ver = 2;\r\n            this.exceptions = [];\r\n            this.properties = {};\r\n            this.measurements = {};\r\n            \r\n            super();\r\n        }\r\n    }\r\n}\r\n","// THIS TYPE WAS AUTOGENERATED\r\nmodule AI\r\n{\r\n\"use strict\";\r\n    export class StackFrame\r\n    {\r\n        public level: number;\r\n        public method: string;\r\n        public assembly: string;\r\n        public fileName: string;\r\n        public line: number;\r\n        \r\n        constructor()\r\n        {\r\n        }\r\n    }\r\n}\r\n","/// <reference path=\"../../JavaScriptSDK.Interfaces/Contracts/Generated/ExceptionData.ts\" />\r\n/// <reference path=\"../../JavaScriptSDK.Interfaces/Contracts/Generated/StackFrame.ts\" />\r\n/// <reference path=\"./Common/DataSanitizer.ts\"/>\r\n\r\nmodule Microsoft.ApplicationInsights.Telemetry {\r\n    \"use strict\";\r\n\r\n    export class Exception extends AI.ExceptionData implements ISerializable {\r\n\r\n        public static envelopeType = \"Microsoft.ApplicationInsights.{0}.Exception\";\r\n        public static dataType = \"ExceptionData\";\r\n\r\n\r\n        public aiDataContract = {\r\n            ver: FieldType.Required,\r\n            handledAt: FieldType.Required,\r\n            exceptions: FieldType.Required,\r\n            severityLevel: FieldType.Default,\r\n            properties: FieldType.Default,\r\n            measurements: FieldType.Default\r\n        }\r\n\r\n        /**\r\n        * Constructs a new isntance of the ExceptionTelemetry object\r\n        */\r\n        constructor(exception: Error, handledAt?: string, properties?: any, measurements?: any, severityLevel?: AI.SeverityLevel) {\r\n            super();\r\n\r\n            this.properties = ApplicationInsights.Telemetry.Common.DataSanitizer.sanitizeProperties(properties);\r\n            this.measurements = ApplicationInsights.Telemetry.Common.DataSanitizer.sanitizeMeasurements(measurements);\r\n\r\n            this.handledAt = handledAt || \"unhandled\";\r\n            this.exceptions = [new _ExceptionDetails(exception)];\r\n\r\n            if (severityLevel) {\r\n                this.severityLevel = severityLevel;\r\n            }\r\n        }\r\n        \r\n\r\n        /**\r\n        * Creates a simple exception with 1 stack frame. Useful for manual constracting of exception.\r\n        */\r\n        public static CreateSimpleException(message: string, typeName: string, assembly: string, fileName: string,\r\n            details: string, line: number, handledAt?: string): Telemetry.Exception {\r\n\r\n            return <Telemetry.Exception> {\r\n                handledAt: handledAt || \"unhandled\",\r\n                exceptions: [\r\n                    <AI.ExceptionDetails> {\r\n                        hasFullStack: true,\r\n                        message: message,\r\n                        stack: details,\r\n                        typeName: typeName\r\n                    }\r\n                ]\r\n            };\r\n        }\r\n    }\r\n\r\n    class _ExceptionDetails extends AI.ExceptionDetails implements ISerializable {\r\n\r\n        public aiDataContract = {\r\n            id: FieldType.Default,\r\n            outerId: FieldType.Default,\r\n            typeName: FieldType.Required,\r\n            message: FieldType.Required,\r\n            hasFullStack: FieldType.Default,\r\n            stack: FieldType.Default,\r\n            parsedStack: FieldType.Array\r\n        };\r\n\r\n        constructor(exception: Error) {\r\n            super();\r\n            this.typeName = Common.DataSanitizer.sanitizeString(exception.name) || Util.NotSpecified;\r\n            this.message = Common.DataSanitizer.sanitizeMessage(exception.message) || Util.NotSpecified;\r\n            var stack = exception[\"stack\"];\r\n            this.parsedStack = this.parseStack(stack);\r\n            this.stack = Common.DataSanitizer.sanitizeException(stack);\r\n            this.hasFullStack = Util.isArray(this.parsedStack) && this.parsedStack.length > 0;\r\n        }\r\n\r\n        private parseStack(stack): _StackFrame[] {\r\n            var parsedStack: _StackFrame[] = undefined;\r\n            if (typeof stack === \"string\") {\r\n                var frames = stack.split('\\n');\r\n                parsedStack = [];\r\n                var level = 0;\r\n\r\n                var totalSizeInBytes = 0;\r\n                for (var i = 0; i <= frames.length; i++) {\r\n                    var frame = frames[i];\r\n                    if (_StackFrame.regex.test(frame)) {\r\n                        var parsedFrame = new _StackFrame(frames[i], level++);\r\n                        totalSizeInBytes += parsedFrame.sizeInBytes;\r\n                        parsedStack.push(parsedFrame);\r\n                    }\r\n                }\r\n\r\n                // DP Constraint - exception parsed stack must be < 32KB\r\n                // remove frames from the middle to meet the threshold\r\n                var exceptionParsedStackThreshold = 32 * 1024;\r\n                if (totalSizeInBytes > exceptionParsedStackThreshold) {\r\n                    var left = 0;\r\n                    var right = parsedStack.length - 1;\r\n                    var size = 0;\r\n                    var acceptedLeft = left;\r\n                    var acceptedRight = right;\r\n\r\n                    while (left < right) {\r\n                        // check size\r\n                        var lSize = parsedStack[left].sizeInBytes;\r\n                        var rSize = parsedStack[right].sizeInBytes;\r\n                        size += lSize + rSize;\r\n\r\n                        if (size > exceptionParsedStackThreshold) {\r\n\r\n                            // remove extra frames from the middle\r\n                            var howMany = acceptedRight - acceptedLeft + 1;\r\n                            parsedStack.splice(acceptedLeft, howMany);\r\n                            break;\r\n                        }\r\n\r\n                        // update pointers\r\n                        acceptedLeft = left;\r\n                        acceptedRight = right;\r\n\r\n                        left++;\r\n                        right--;\r\n                    }\r\n                }\r\n            }\r\n\r\n            return parsedStack;\r\n        }\r\n    }\r\n\r\n    export class _StackFrame extends AI.StackFrame implements ISerializable {\r\n        \r\n        // regex to match stack frames from ie/chrome/ff\r\n        // methodName=$2, fileName=$4, lineNo=$5, column=$6\r\n        public static regex = /^([\\s]+at)?(.*?)(\\@|\\s\\(|\\s)([^\\(\\@\\n]+):([0-9]+):([0-9]+)(\\)?)$/;\r\n        public static baseSize = 58; //'{\"method\":\"\",\"level\":,\"assembly\":\"\",\"fileName\":\"\",\"line\":}'.length\r\n        public sizeInBytes = 0;\r\n\r\n        public aiDataContract = {\r\n            level: FieldType.Required,\r\n            method: FieldType.Required,\r\n            assembly: FieldType.Default,\r\n            fileName: FieldType.Default,\r\n            line: FieldType.Default\r\n        };\r\n\r\n        constructor(frame: string, level: number) {\r\n            super();\r\n            this.level = level;\r\n            this.method = \"<no_method>\";\r\n            this.assembly = Util.trim(frame);\r\n            var matches = frame.match(_StackFrame.regex);\r\n            if (matches && matches.length >= 5) {\r\n                this.method = Util.trim(matches[2]) || this.method;\r\n                this.fileName = Util.trim(matches[4]);\r\n                this.line = parseInt(matches[5]) || 0;\r\n            }\r\n\r\n            this.sizeInBytes += this.method.length;\r\n            this.sizeInBytes += this.fileName.length;\r\n            this.sizeInBytes += this.assembly.length;\r\n\r\n            // todo: these might need to be removed depending on how the back-end settles on their size calculation\r\n            this.sizeInBytes += _StackFrame.baseSize;\r\n            this.sizeInBytes += this.level.toString().length;\r\n            this.sizeInBytes += this.line.toString().length;\r\n        }\r\n    }\r\n}","// THIS TYPE WAS AUTOGENERATED\r\n/// <reference path=\"Domain.ts\" />\r\nmodule AI\r\n{\r\n\"use strict\";\r\n    export class MetricData extends Microsoft.Telemetry.Domain\r\n    {\r\n        public ver: number;\r\n        public metrics: DataPoint[];\r\n        public properties: any;\r\n        \r\n        constructor()\r\n        {\r\n            super();\r\n\r\n            this.ver = 2;\r\n            this.metrics = [];\r\n            this.properties = {};\r\n            \r\n            super();\r\n        }\r\n    }\r\n}\r\n","// THIS TYPE WAS AUTOGENERATED\r\nmodule AI\r\n{\r\n\"use strict\";\r\n    export enum DataPointType\r\n    {\r\n        Measurement = 0,\r\n        Aggregation = 1,\r\n    }\r\n}\r\n","// THIS TYPE WAS AUTOGENERATED\r\n/// <reference path=\"DataPointType.ts\" />\r\nmodule AI\r\n{\r\n\"use strict\";\r\n    export class DataPoint\r\n    {\r\n        public name: string;\r\n        public kind: AI.DataPointType;\r\n        public value: number;\r\n        public count: number;\r\n        public min: number;\r\n        public max: number;\r\n        public stdDev: number;\r\n        \r\n        constructor()\r\n        {\r\n            this.kind = AI.DataPointType.Measurement;\r\n        }\r\n    }\r\n}\r\n","/// <reference path=\"../../../JavaScriptSDK.Interfaces/Contracts/Generated/DataPoint.ts\"/>\r\n\r\nmodule Microsoft.ApplicationInsights.Telemetry.Common {\r\n    \"use strict\";\r\n    export class DataPoint extends AI.DataPoint implements ISerializable {\r\n\r\n        /**\r\n         * The data contract for serializing this object.\r\n         */\r\n        public aiDataContract = {\r\n            name: FieldType.Required,\r\n            kind: FieldType.Default,\r\n            value: FieldType.Required,\r\n            count: FieldType.Default,\r\n            min: FieldType.Default,\r\n            max: FieldType.Default,\r\n            stdDev: FieldType.Default\r\n        }\r\n    }\r\n}","/// <reference path=\"../../JavaScriptSDK.Interfaces/Contracts/Generated/MetricData.ts\" />\r\n/// <reference path=\"./Common/DataSanitizer.ts\" />\r\n/// <reference path=\"./Common/DataPoint.ts\" />\r\n\r\nmodule Microsoft.ApplicationInsights.Telemetry {\r\n    \"use strict\";\r\n\r\n    export class Metric extends AI.MetricData implements ISerializable {\r\n\r\n        public static envelopeType = \"Microsoft.ApplicationInsights.{0}.Metric\";\r\n        public static dataType = \"MetricData\";\r\n\r\n        public aiDataContract = {\r\n            ver: FieldType.Required,\r\n            metrics: FieldType.Required,\r\n            properties: FieldType.Default\r\n        }\r\n\r\n        /**\r\n         * Constructs a new instance of the MetricTelemetry object\r\n         */\r\n        constructor(name: string, value: number, count?: number, min?: number, max?: number, properties?: any) {\r\n            super();\r\n\r\n            var dataPoint = new Microsoft.ApplicationInsights.Telemetry.Common.DataPoint();\r\n            dataPoint.count = count > 0 ? count : undefined;\r\n            dataPoint.max = isNaN(max) || max === null ? undefined : max;\r\n            dataPoint.min = isNaN(min) || min === null ? undefined : min;\r\n            dataPoint.name = Common.DataSanitizer.sanitizeString(name) || Util.NotSpecified;\r\n            dataPoint.value = value;\r\n\r\n            this.metrics = [dataPoint];\r\n            this.properties = ApplicationInsights.Telemetry.Common.DataSanitizer.sanitizeProperties(properties);\r\n        }\r\n    }\r\n}","// THIS TYPE WAS AUTOGENERATED\r\n/// <reference path=\"EventData.ts\" />\r\nmodule AI\r\n{\r\n\"use strict\";\r\n    export class PageViewData extends AI.EventData\r\n    {\r\n        public ver: number;\r\n        public url: string;\r\n        public name: string;\r\n        public duration: string;\r\n        public referrer: string;\r\n        public referrerData: string;\r\n        public properties: any;\r\n        public measurements: any;\r\n        \r\n        constructor()\r\n        {\r\n            super();\r\n\r\n            this.ver = 2;\r\n            this.properties = {};\r\n            this.measurements = {};\r\n            \r\n            super();\r\n        }\r\n    }\r\n}\r\n","/// <reference path=\"../../JavaScriptSDK.Interfaces/Contracts/Generated/PageViewData.ts\" />\r\n/// <reference path=\"./Common/DataSanitizer.ts\"/>\r\n\r\nmodule Microsoft.ApplicationInsights.Telemetry {\r\n    \"use strict\";\r\n\r\n    export class PageView extends AI.PageViewData implements ISerializable {\r\n\r\n        public static envelopeType = \"Microsoft.ApplicationInsights.{0}.Pageview\";\r\n        public static dataType = \"PageviewData\";\r\n\r\n        public aiDataContract = {\r\n            ver: FieldType.Required,\r\n            name: FieldType.Default,\r\n            url: FieldType.Default,\r\n            duration: FieldType.Default,\r\n            properties: FieldType.Default,\r\n            measurements: FieldType.Default\r\n        }\r\n\r\n        /**\r\n         * Constructs a new instance of the PageEventTelemetry object\r\n         */\r\n        constructor(name?: string, url?: string, durationMs?: number, properties?: any, measurements?: any) {\r\n            super();\r\n\r\n            this.url = Common.DataSanitizer.sanitizeUrl(url);\r\n            this.name = Common.DataSanitizer.sanitizeString(name) || Util.NotSpecified;\r\n            if (!isNaN(durationMs)) {\r\n                this.duration = Util.msToTimeSpan(durationMs);\r\n            }\r\n            this.properties = ApplicationInsights.Telemetry.Common.DataSanitizer.sanitizeProperties(properties);\r\n            this.measurements = ApplicationInsights.Telemetry.Common.DataSanitizer.sanitizeMeasurements(measurements);\r\n        }\r\n    }\r\n}","// THIS TYPE WAS AUTOGENERATED\r\n/// <reference path=\"PageViewData.ts\" />\r\nmodule AI\r\n{\r\n\"use strict\";\r\n    export class PageViewPerfData extends AI.PageViewData\r\n    {\r\n        public ver: number;\r\n        public url: string;\r\n        public perfTotal: string;\r\n        public name: string;\r\n        public duration: string;\r\n        public networkConnect: string;\r\n        public referrer: string;\r\n        public sentRequest: string;\r\n        public referrerData: string;\r\n        public receivedResponse: string;\r\n        public domProcessing: string;\r\n        public properties: any;\r\n        public measurements: any;\r\n        \r\n        constructor()\r\n        {\r\n            super();\r\n\r\n            this.ver = 2;\r\n            this.properties = {};\r\n            this.measurements = {};\r\n            \r\n            super();\r\n        }\r\n    }\r\n}\r\n","/// <reference path=\"../../JavaScriptSDK.Interfaces/Contracts/Generated/PageViewPerfData.ts\"/>\r\n/// <reference path=\"./Common/DataSanitizer.ts\"/>\r\n/// <reference path=\"../Util.ts\"/>\r\n\r\nmodule Microsoft.ApplicationInsights.Telemetry {\r\n    \"use strict\";\r\n\r\n    export class PageViewPerformance extends AI.PageViewPerfData implements ISerializable {\r\n\r\n        public static envelopeType = \"Microsoft.ApplicationInsights.{0}.PageviewPerformance\";\r\n        public static dataType = \"PageviewPerformanceData\";\r\n\r\n        private static MAX_DURATION_ALLOWED = 3600000; // 1h\r\n\r\n        public aiDataContract = {\r\n            ver: FieldType.Required,\r\n            name: FieldType.Default,\r\n            url: FieldType.Default,\r\n            duration: FieldType.Default,\r\n            perfTotal: FieldType.Default,\r\n            networkConnect: FieldType.Default,\r\n            sentRequest: FieldType.Default,\r\n            receivedResponse: FieldType.Default,\r\n            domProcessing: FieldType.Default,\r\n            properties: FieldType.Default,\r\n            measurements: FieldType.Default\r\n        };\r\n\r\n        /**\r\n         * Field indicating whether this instance of PageViewPerformance is valid and should be sent\r\n         */\r\n        private isValid: boolean;\r\n\r\n        /**\r\n         * Indicates whether this instance of PageViewPerformance is valid and should be sent\r\n         */\r\n        public getIsValid() {\r\n            return this.isValid;\r\n        }\r\n\r\n        private durationMs: number;\r\n\r\n        /**\r\n        * Gets the total duration (PLT) in milliseconds. Check getIsValid() before using this method.\r\n        */\r\n        public getDurationMs() {\r\n            return this.durationMs;\r\n        }\r\n\r\n        /**\r\n         * Constructs a new instance of the PageEventTelemetry object\r\n         */\r\n        constructor(name: string, url: string, unused: number, properties?: any, measurements?: any) {\r\n            super();\r\n\r\n            this.isValid = false;\r\n\r\n            /*\r\n             * http://www.w3.org/TR/navigation-timing/#processing-model\r\n             *  |-navigationStart\r\n             *  |             |-connectEnd\r\n             *  |             ||-requestStart\r\n             *  |             ||             |-responseStart\r\n             *  |             ||             |              |-responseEnd\r\n             *  |             ||             |              |\r\n             *  |             ||             |              |         |-loadEventEnd\r\n             *  |---network---||---request---|---response---|---dom---|\r\n             *  |--------------------------total----------------------|\r\n             */\r\n            var timing = PageViewPerformance.getPerformanceTiming();\r\n            if (timing) {\r\n                var total = PageViewPerformance.getDuration(timing.navigationStart, timing.loadEventEnd);\r\n                var network = PageViewPerformance.getDuration(timing.navigationStart, timing.connectEnd);\r\n                var request = PageViewPerformance.getDuration(timing.requestStart, timing.responseStart);\r\n                var response = PageViewPerformance.getDuration(timing.responseStart, timing.responseEnd);\r\n                var dom = PageViewPerformance.getDuration(timing.responseEnd, timing.loadEventEnd);\r\n\r\n                if (total == 0) {\r\n                    _InternalLogging.throwInternal(\r\n                        LoggingSeverity.WARNING,\r\n                        _InternalMessageId.ErrorPVCalc,\r\n                        \"error calculating page view performance.\",\r\n                        { total: total, network: network, request: request, response: response, dom: dom });\r\n\r\n                } else if (!PageViewPerformance.shouldCollectDuration(total, network, request, response, dom)) {\r\n                    _InternalLogging.throwInternal(\r\n                        LoggingSeverity.WARNING,\r\n                        _InternalMessageId.InvalidDurationValue,\r\n                        \"Invalid page load duration value. Browser perf data won't be sent.\",\r\n                        { total: total, network: network, request: request, response: response, dom: dom });\r\n\r\n                } else if (total < Math.floor(network) + Math.floor(request) + Math.floor(response) + Math.floor(dom)) {\r\n                    // some browsers may report individual components incorrectly so that the sum of the parts will be bigger than total PLT\r\n                    // in this case, don't report client performance from this page\r\n                    _InternalLogging.throwInternal(\r\n                        LoggingSeverity.WARNING,\r\n                        _InternalMessageId.ClientPerformanceMathError,\r\n                        \"client performance math error.\",\r\n                        { total: total, network: network, request: request, response: response, dom: dom });\r\n\r\n                } else {\r\n                    this.durationMs = total;\r\n\r\n                    // convert to timespans\r\n                    this.perfTotal = this.duration = Util.msToTimeSpan(total);\r\n                    this.networkConnect = Util.msToTimeSpan(network);\r\n                    this.sentRequest = Util.msToTimeSpan(request);\r\n                    this.receivedResponse = Util.msToTimeSpan(response);\r\n                    this.domProcessing = Util.msToTimeSpan(dom);\r\n\r\n                    this.isValid = true;\r\n                }\r\n            }\r\n\r\n            this.url = Common.DataSanitizer.sanitizeUrl(url);\r\n            this.name = Common.DataSanitizer.sanitizeString(name) || Util.NotSpecified;\r\n\r\n            this.properties = ApplicationInsights.Telemetry.Common.DataSanitizer.sanitizeProperties(properties);\r\n            this.measurements = ApplicationInsights.Telemetry.Common.DataSanitizer.sanitizeMeasurements(measurements);\r\n        }\r\n\r\n        public static getPerformanceTiming(): PerformanceTiming {\r\n            if (PageViewPerformance.isPerformanceTimingSupported()) {\r\n                return window.performance.timing;\r\n            }\r\n\r\n            return null;\r\n        }\r\n\r\n        /**\r\n        * Returns true is window performance timing API is supported, false otherwise.\r\n        */\r\n        public static isPerformanceTimingSupported() {\r\n            return typeof window != \"undefined\" && window.performance && window.performance.timing;\r\n        }\r\n\r\n        /**\r\n         * As page loads different parts of performance timing numbers get set. When all of them are set we can report it.\r\n         * Returns true if ready, false otherwise.\r\n         */\r\n        public static isPerformanceTimingDataReady() {\r\n            var timing = window.performance.timing;\r\n\r\n            return timing.domainLookupStart > 0\r\n                && timing.navigationStart > 0\r\n                && timing.responseStart > 0\r\n                && timing.requestStart > 0\r\n                && timing.loadEventEnd > 0\r\n                && timing.responseEnd > 0\r\n                && timing.connectEnd > 0\r\n                && timing.domLoading > 0;\r\n        }\r\n\r\n        public static getDuration(start: any, end: any): number {\r\n            var duration = undefined;\r\n            if (!(isNaN(start) || isNaN(end))) {\r\n                duration = Math.max(end - start, 0);\r\n            }\r\n\r\n            return duration;\r\n        }\r\n\r\n        /**\r\n         * This method tells if given durations should be excluded from collection.\r\n         */\r\n        public static shouldCollectDuration(...durations: number[]): boolean {\r\n            let userAgent = navigator.userAgent;\r\n            let isGoogleBot = userAgent ? userAgent.toLowerCase().indexOf(\"googlebot\") !== -1 : false;\r\n\r\n            if (isGoogleBot) {\r\n                // Don't report durations for GoogleBot, it is returning invalid values in performance.timing API. \r\n                return false;\r\n            } else {\r\n                // for other page views, don't report if it's outside of a reasonable range\r\n                for (var i = 0; i < durations.length; i++) {\r\n                    if (durations[i] >= PageViewPerformance.MAX_DURATION_ALLOWED) {\r\n                        return false;\r\n                    }\r\n                }\r\n            }\r\n\r\n            return true;\r\n        }\r\n    }\r\n}","/// <reference path=\"Sender.ts\"/>\r\n/// <reference path=\"Telemetry/Trace.ts\" />\r\n/// <reference path=\"Telemetry/Event.ts\" />\r\n/// <reference path=\"Telemetry/Exception.ts\" />\r\n/// <reference path=\"Telemetry/Metric.ts\" />\r\n/// <reference path=\"Telemetry/PageView.ts\" />\r\n/// <reference path=\"Telemetry/PageViewPerformance.ts\" />\r\n/// <reference path=\"./Util.ts\"/>\r\n/// <reference path=\"../JavaScriptSDK.Interfaces/Contracts/Generated/SessionState.ts\"/>\r\n/// <reference path=\"../JavaScriptSDK.Interfaces/ITelemetryContext.ts\" />\r\n\r\nmodule Microsoft.ApplicationInsights {\r\n    \"use strict\";\r\n\r\n    export interface ITelemetryConfig extends ISenderConfig {\r\n        instrumentationKey: () => string;\r\n        accountId: () => string;\r\n        sessionRenewalMs: () => number;\r\n        sessionExpirationMs: () => number;\r\n        sampleRate: () => number;\r\n        cookieDomain: () => string;\r\n        sdkExtension: () => string;\r\n        isBrowserLinkTrackingEnabled: () => boolean;\r\n    }\r\n\r\n    export class TelemetryContext implements ITelemetryContext {\r\n        /**\r\n         * The configuration for this telemetry context\r\n         */\r\n        public _config: ITelemetryConfig;\r\n\r\n        /**\r\n         * The sender instance for this context\r\n         */\r\n        public _sender: Sender;\r\n\r\n        /**\r\n         * The object describing a component tracked by this object.\r\n         */\r\n        public application: Context.Application;\r\n\r\n        /**\r\n         * The object describing a device tracked by this object.\r\n         */\r\n        public device: Context.Device;\r\n\r\n        public internal: Context.Internal;\r\n\r\n        /**\r\n         * The object describing a location tracked by this object.\r\n         */\r\n        public location: Context.Location;\r\n\r\n        /**\r\n         * The object describing a operation tracked by this object.\r\n         */\r\n        public operation: Context.Operation;\r\n\r\n        public sample: Context.Sample;\r\n\r\n        /**\r\n         * The object describing a user tracked by this object.\r\n         */\r\n        public user: Context.User;\r\n\r\n        /**\r\n         * The object describing a session tracked by this object.\r\n         */\r\n        public session: Context.Session;\r\n\r\n        /**\r\n        * The array of telemetry initializers to call before sending each telemetry item.\r\n        */\r\n        private telemetryInitializers: { (envelope: Microsoft.ApplicationInsights.IEnvelope): boolean | void; }[];\r\n\r\n        /**\r\n         * The session manager that manages session on the base of cookies.\r\n         */\r\n        public _sessionManager: Microsoft.ApplicationInsights.Context._SessionManager;\r\n\r\n        constructor(config: ITelemetryConfig) {\r\n            this._config = config;\r\n            this._sender = new Sender(config);\r\n            this.telemetryInitializers = [];\r\n\r\n            // window will be undefined in node.js where we do not want to initialize contexts\r\n            if (typeof window !== 'undefined') {\r\n                this._sessionManager = new ApplicationInsights.Context._SessionManager(config);\r\n                this.application = new Context.Application();\r\n                this.device = new Context.Device();\r\n                this.internal = new Context.Internal(config);\r\n                this.location = new Context.Location();\r\n                this.user = new Context.User(config);\r\n                this.operation = new Context.Operation();\r\n                this.session = new Context.Session();\r\n                this.sample = new Context.Sample(config.sampleRate());\r\n            }\r\n\r\n            this._addDefaultTelemetryInitializers();\r\n        }\r\n\r\n        /**\r\n        * Adds telemetry initializer to the collection. Telemetry initializers will be called one by one\r\n        * before telemetry item is pushed for sending and in the order they were added.\r\n        */\r\n        public addTelemetryInitializer(telemetryInitializer: (envelope: Microsoft.ApplicationInsights.IEnvelope) => boolean | void) {\r\n            this.telemetryInitializers.push(telemetryInitializer);\r\n        }\r\n\r\n        /**\r\n         * Use Sender.ts to send telemetry object to the endpoint\r\n         */\r\n        public track(envelope: Microsoft.ApplicationInsights.IEnvelope) {\r\n            if (!envelope) {\r\n                _InternalLogging.throwInternal(\r\n                    LoggingSeverity.CRITICAL,\r\n                    _InternalMessageId.TrackArgumentsNotSpecified,\r\n                    \"cannot call .track() with a null or undefined argument\", null, true);\r\n            } else {\r\n                // If the envelope is PageView, reset the internal message count so that we can send internal telemetry for the new page.\r\n                if (envelope.name === Telemetry.PageView.envelopeType) {\r\n                    _InternalLogging.resetInternalMessageCount();\r\n                }\r\n\r\n                if (this.session) {\r\n                    // If customer did not provide custom session id update sessionmanager\r\n                    if (typeof this.session.id !== \"string\") {\r\n                        this._sessionManager.update();\r\n                    }\r\n                }\r\n\r\n                this._track(envelope);\r\n            }\r\n\r\n            return envelope;\r\n        }\r\n\r\n        private _addDefaultTelemetryInitializers() {\r\n            if (!this._config.isBrowserLinkTrackingEnabled()) {\r\n                const browserLinkPaths = ['/browserLinkSignalR/', '/__browserLink/'];\r\n                let dropBrowserLinkRequests = (envelope: Microsoft.ApplicationInsights.IEnvelope) => {\r\n                    if (envelope.name === Microsoft.ApplicationInsights.Telemetry.RemoteDependencyData.envelopeType) {\r\n                        let remoteData = envelope.data as Telemetry.Common.Data<Microsoft.ApplicationInsights.Telemetry.RemoteDependencyData>;\r\n                        if (remoteData && remoteData.baseData) {\r\n                            for (let i = 0; i < browserLinkPaths.length; i++) {\r\n                                if (remoteData.baseData.name.indexOf(browserLinkPaths[i]) >= 0) {\r\n                                    return false;\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    return true;\r\n                }\r\n\r\n                this.addTelemetryInitializer(dropBrowserLinkRequests)\r\n            }\r\n        }\r\n\r\n        private _track(envelope: Microsoft.ApplicationInsights.IEnvelope) {\r\n\r\n            if (this.session) {\r\n                // If customer set id, apply his context; otherwise apply context generated from cookies \r\n                if (typeof this.session.id === \"string\") {\r\n                    this._applySessionContext(envelope, this.session);\r\n                } else {\r\n                    this._applySessionContext(envelope, this._sessionManager.automaticSession);\r\n                }\r\n            }\r\n\r\n            this._applyApplicationContext(envelope, this.application);\r\n            this._applyDeviceContext(envelope, this.device);\r\n            this._applyInternalContext(envelope, this.internal);\r\n            this._applyLocationContext(envelope, this.location);\r\n            this._applySampleContext(envelope, this.sample);\r\n            this._applyUserContext(envelope, this.user);\r\n            this._applyOperationContext(envelope, this.operation);\r\n\r\n            envelope.iKey = this._config.instrumentationKey();\r\n\r\n            var doNotSendItem = false;\r\n            try {\r\n                var telemetryInitializersCount = this.telemetryInitializers.length;\r\n                for (var i = 0; i < telemetryInitializersCount; ++i) {\r\n                    var telemetryInitializer = this.telemetryInitializers[i];\r\n                    if (telemetryInitializer) {\r\n                        if (telemetryInitializer.apply(null, [envelope]) === false) {\r\n                            doNotSendItem = true;\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n            } catch (e) {\r\n                doNotSendItem = true;\r\n                _InternalLogging.throwInternal(\r\n                    LoggingSeverity.CRITICAL, _InternalMessageId.TelemetryInitializerFailed, \"One of telemetry initializers failed, telemetry item will not be sent: \" + Util.getExceptionName(e),\r\n                    { exception: Util.dump(e) }, true);\r\n            }\r\n\r\n            if (!doNotSendItem) {\r\n                this._fixDepricatedValues(envelope);\r\n\r\n                if (envelope.name === Telemetry.Metric.envelopeType ||\r\n                    this.sample.isSampledIn(envelope)) {\r\n                    var iKeyNoDashes = this._config.instrumentationKey().replace(/-/g, \"\");\r\n                    envelope.name = envelope.name.replace(\"{0}\", iKeyNoDashes);\r\n                    this._sender.send(envelope);\r\n                } else {\r\n                    _InternalLogging.throwInternal(LoggingSeverity.WARNING, _InternalMessageId.TelemetrySampledAndNotSent,\r\n                        \"Telemetry is sampled and not sent to the AI service.\", { SampleRate: this.sample.sampleRate }, true);\r\n                }\r\n            }\r\n\r\n            return envelope;\r\n        }\r\n\r\n        private _applyApplicationContext(envelope: Microsoft.ApplicationInsights.IEnvelope, appContext: Microsoft.ApplicationInsights.Context.Application) {\r\n            if (appContext) {\r\n                var tagKeys: AI.ContextTagKeys = new AI.ContextTagKeys();\r\n\r\n                if (typeof appContext.ver === \"string\") {\r\n                    envelope.tags[tagKeys.applicationVersion] = appContext.ver;\r\n                }\r\n                if (typeof appContext.build === \"string\") {\r\n                    envelope.tags[tagKeys.applicationBuild] = appContext.build;\r\n                }\r\n            }\r\n        }\r\n\r\n        private _applyDeviceContext(envelope: Microsoft.ApplicationInsights.IEnvelope, deviceContext: Microsoft.ApplicationInsights.Context.Device) {\r\n            var tagKeys: AI.ContextTagKeys = new AI.ContextTagKeys();\r\n\r\n            if (deviceContext) {\r\n                if (typeof deviceContext.id === \"string\") {\r\n                    envelope.tags[tagKeys.deviceId] = deviceContext.id;\r\n                }\r\n                if (typeof deviceContext.ip === \"string\") {\r\n                    envelope.tags[tagKeys.deviceIp] = deviceContext.ip;\r\n                }\r\n                if (typeof deviceContext.language === \"string\") {\r\n                    envelope.tags[tagKeys.deviceLanguage] = deviceContext.language;\r\n                }\r\n                if (typeof deviceContext.locale === \"string\") {\r\n                    envelope.tags[tagKeys.deviceLocale] = deviceContext.locale;\r\n                }\r\n                if (typeof deviceContext.model === \"string\") {\r\n                    envelope.tags[tagKeys.deviceModel] = deviceContext.model;\r\n                }\r\n                if (typeof deviceContext.network !== \"undefined\") {\r\n                    envelope.tags[tagKeys.deviceNetwork] = deviceContext.network;\r\n                }\r\n                if (typeof deviceContext.oemName === \"string\") {\r\n                    envelope.tags[tagKeys.deviceOEMName] = deviceContext.oemName;\r\n                }\r\n                if (typeof deviceContext.os === \"string\") {\r\n                    envelope.tags[tagKeys.deviceOS] = deviceContext.os;\r\n                }\r\n                if (typeof deviceContext.osversion === \"string\") {\r\n                    envelope.tags[tagKeys.deviceOSVersion] = deviceContext.osversion;\r\n                }\r\n                if (typeof deviceContext.resolution === \"string\") {\r\n                    envelope.tags[tagKeys.deviceScreenResolution] = deviceContext.resolution;\r\n                }\r\n                if (typeof deviceContext.type === \"string\") {\r\n                    envelope.tags[tagKeys.deviceType] = deviceContext.type;\r\n                }\r\n            }\r\n        }\r\n\r\n        private _applyInternalContext(envelope: Microsoft.ApplicationInsights.IEnvelope, internalContext: Microsoft.ApplicationInsights.Context.Internal) {\r\n            if (internalContext) {\r\n                var tagKeys: AI.ContextTagKeys = new AI.ContextTagKeys();\r\n                if (typeof internalContext.agentVersion === \"string\") {\r\n                    envelope.tags[tagKeys.internalAgentVersion] = internalContext.agentVersion;\r\n                }\r\n                if (typeof internalContext.sdkVersion === \"string\") {\r\n                    envelope.tags[tagKeys.internalSdkVersion] = internalContext.sdkVersion;\r\n                }\r\n            }\r\n        }\r\n\r\n        private _applyLocationContext(envelope: Microsoft.ApplicationInsights.IEnvelope, locationContext: Microsoft.ApplicationInsights.Context.Location) {\r\n            if (locationContext) {\r\n                var tagKeys: AI.ContextTagKeys = new AI.ContextTagKeys();\r\n                if (typeof locationContext.ip === \"string\") {\r\n                    envelope.tags[tagKeys.locationIp] = locationContext.ip;\r\n                }\r\n            }\r\n        }\r\n\r\n        private _applyOperationContext(envelope: Microsoft.ApplicationInsights.IEnvelope, operationContext: Microsoft.ApplicationInsights.Context.Operation) {\r\n            if (operationContext) {\r\n                var tagKeys: AI.ContextTagKeys = new AI.ContextTagKeys();\r\n                if (typeof operationContext.id === \"string\") {\r\n                    envelope.tags[tagKeys.operationId] = operationContext.id;\r\n                }\r\n                if (typeof operationContext.name === \"string\") {\r\n                    envelope.tags[tagKeys.operationName] = operationContext.name;\r\n                }\r\n                if (typeof operationContext.parentId === \"string\") {\r\n                    envelope.tags[tagKeys.operationParentId] = operationContext.parentId;\r\n                }\r\n                if (typeof operationContext.rootId === \"string\") {\r\n                    envelope.tags[tagKeys.operationRootId] = operationContext.rootId;\r\n                }\r\n                if (typeof operationContext.syntheticSource === \"string\") {\r\n                    envelope.tags[tagKeys.operationSyntheticSource] = operationContext.syntheticSource;\r\n                }\r\n            }\r\n        }\r\n\r\n        private _applySampleContext(envelope: Microsoft.ApplicationInsights.IEnvelope, sampleContext: Microsoft.ApplicationInsights.Context.Sample) {\r\n            if (sampleContext) {\r\n                envelope.sampleRate = sampleContext.sampleRate;\r\n            }\r\n        }\r\n\r\n        private _applySessionContext(envelope: Microsoft.ApplicationInsights.IEnvelope, sessionContext: Microsoft.ApplicationInsights.Context.Session) {\r\n            if (sessionContext) {\r\n                var tagKeys: AI.ContextTagKeys = new AI.ContextTagKeys();\r\n                if (typeof sessionContext.id === \"string\") {\r\n                    envelope.tags[tagKeys.sessionId] = sessionContext.id;\r\n                }\r\n                if (typeof sessionContext.isFirst !== \"undefined\") {\r\n                    envelope.tags[tagKeys.sessionIsFirst] = sessionContext.isFirst;\r\n                }\r\n            }\r\n        }\r\n\r\n        private _applyUserContext(envelope: Microsoft.ApplicationInsights.IEnvelope, userContext: Microsoft.ApplicationInsights.Context.User) {\r\n            if (userContext) {\r\n                var tagKeys: AI.ContextTagKeys = new AI.ContextTagKeys();\r\n                if (typeof userContext.accountId === \"string\") {\r\n                    envelope.tags[tagKeys.userAccountId] = userContext.accountId;\r\n                }\r\n                if (typeof userContext.agent === \"string\") {\r\n                    envelope.tags[tagKeys.userAgent] = userContext.agent;\r\n                }\r\n                if (typeof userContext.id === \"string\") {\r\n                    envelope.tags[tagKeys.userId] = userContext.id;\r\n                }\r\n                if (typeof userContext.authenticatedId === \"string\") {\r\n                    envelope.tags[tagKeys.userAuthUserId] = userContext.authenticatedId;\r\n                }\r\n                if (typeof userContext.storeRegion === \"string\") {\r\n                    envelope.tags[tagKeys.userStoreRegion] = userContext.storeRegion;\r\n                }\r\n            }\r\n        }\r\n\r\n        private _fixDepricatedValues(envelope: Microsoft.ApplicationInsights.IEnvelope) {\r\n            try {\r\n                var data = (<any>envelope).data;\r\n                if (data && data.baseType === Microsoft.ApplicationInsights.Telemetry.RemoteDependencyData.dataType) {\r\n                    var rddData = <Microsoft.ApplicationInsights.Telemetry.RemoteDependencyData>(<any>data.baseData);\r\n                    if (rddData) {\r\n                        this._fixRDDDepricatedValues(rddData);\r\n                    }\r\n                }\r\n            } catch (e) {\r\n                _InternalLogging.throwInternal(\r\n                    LoggingSeverity.WARNING,\r\n                    _InternalMessageId.FailedToFixDepricatedValues,\r\n                    \"Failed to parse the base data object, to fix the depricated values \" + Util.getExceptionName(e),\r\n                    { exception: Util.dump(e) });\r\n            }\r\n        }\r\n\r\n        private _fixRDDDepricatedValues(rddData: Microsoft.ApplicationInsights.Telemetry.RemoteDependencyData) {\r\n            if (rddData.commandName) {\r\n                rddData.data = rddData.commandName;\r\n                rddData.commandName = undefined;\r\n            }\r\n\r\n            if (rddData.dependencyTypeName) {\r\n                rddData.type = rddData.dependencyTypeName;\r\n                rddData.dependencyTypeName = undefined;\r\n            }\r\n\r\n            if (rddData.value && rddData.value !== 0) {\r\n                rddData.duration = Util.msToTimeSpan(rddData.value);\r\n                rddData.value = undefined;\r\n            }\r\n\r\n            if (rddData.kind) {\r\n                rddData.kind = undefined;\r\n            }\r\n\r\n            if (rddData.dependencySource) {\r\n                rddData.dependencySource = undefined;\r\n            }\r\n\r\n            if (rddData.async) {\r\n                rddData.async = undefined;\r\n            }\r\n\r\n            if (rddData.count) {\r\n                rddData.count = undefined;\r\n            }\r\n\r\n            if (rddData.min) {\r\n                rddData.min = undefined;\r\n            }\r\n\r\n            if (rddData.max) {\r\n                rddData.max = undefined;\r\n            }\r\n\r\n            if (rddData.stdDev) {\r\n                rddData.stdDev = undefined;\r\n            }\r\n\r\n            if (rddData.dependencyKind) {\r\n                rddData.dependencyKind = undefined;\r\n            }\r\n        }\r\n    }\r\n}","// THIS TYPE WAS AUTOGENERATED\r\n/// <reference path=\"Base.ts\" />\r\nmodule Microsoft.Telemetry\r\n{\r\n\"use strict\";\r\n    export class Data<TDomain> extends Microsoft.Telemetry.Base\r\n    {\r\n        public baseType: string;\r\n        public baseData: TDomain;\r\n        \r\n        constructor()\r\n        {\r\n            \r\n            super();\r\n        }\r\n    }\r\n}\r\n","/// <reference path=\"../../../JavaScriptSDK.Interfaces/Contracts/Generated/Data.ts\"/>\r\n\r\nmodule Microsoft.ApplicationInsights.Telemetry.Common {\r\n    \"use strict\";\r\n    export class Data<TDomain> extends Microsoft.Telemetry.Data<TDomain> implements ISerializable {\r\n\r\n        /**\r\n         * The data contract for serializing this object.\r\n         */\r\n        public aiDataContract = {\r\n            baseType: FieldType.Required,\r\n            baseData: FieldType.Required\r\n        }\r\n\r\n        /**\r\n         * Constructs a new instance of telemetry data.\r\n         */\r\n        constructor(type: string, data: TDomain) {\r\n            super();\r\n\r\n            this.baseType = type;\r\n            this.baseData = data;\r\n        }\r\n    }\r\n}","/// <reference path=\"../../JavaScriptSDK.Interfaces/Contracts/Generated/PageViewData.ts\" />\r\n/// <reference path=\"./Common/DataSanitizer.ts\"/>\r\n\r\nmodule Microsoft.ApplicationInsights.Telemetry {\r\n    \"use strict\";\r\n\r\n    /**\r\n    * Class encapsulates sending page views and page view performance telemetry.\r\n    */\r\n    export class PageViewManager {\r\n        private pageViewPerformanceSent: boolean = false;\r\n\r\n        private overridePageViewDuration: boolean = false;\r\n\r\n        private appInsights: IAppInsightsInternal;\r\n\r\n        constructor(\r\n            appInsights: IAppInsightsInternal,\r\n            overridePageViewDuration: boolean) {\r\n            this.overridePageViewDuration = overridePageViewDuration;\r\n            this.appInsights = appInsights;\r\n        }\r\n\r\n        /**\r\n        * Currently supported cases:\r\n        * 1) (default case) track page view called with default parameters, overridePageViewDuration = false. Page view is sent with page view performance when navigation timing data is available.\r\n        *    If navigation timing is not supported then page view is sent right away with undefined duration. Page view performance is not sent.\r\n        * 2) overridePageViewDuration = true, custom duration provided. Custom duration is used, page view sends right away.\r\n        * 3) overridePageViewDuration = true. Page view is sent right away, duration is time spent from page load till now (or undefined if navigation timing is not supported). \r\n        * 4) overridePageViewDuration = false, custom duration is provided. Page view is sent right away with custom duration. \r\n        *\r\n        * In all cases page view performance is sent once (only for the 1st call of trackPageView), or not sent if navigation timing is not supported.\r\n        */\r\n        public trackPageView(name?: string, url?: string, properties?: Object, measurements?: Object, duration?: number) {\r\n            // ensure we have valid values for the required fields\r\n            if (typeof name !== \"string\") {\r\n                name = window.document && window.document.title || \"\";\r\n            }\r\n\r\n            if (typeof url !== \"string\") {\r\n                url = window.location && window.location.href || \"\";\r\n            }\r\n\r\n            var pageViewSent = false;\r\n            var customDuration = undefined;\r\n\r\n            if (Telemetry.PageViewPerformance.isPerformanceTimingSupported()) {\r\n                var start = Telemetry.PageViewPerformance.getPerformanceTiming().navigationStart;\r\n                customDuration = Telemetry.PageViewPerformance.getDuration(start, +new Date);\r\n\r\n                if (!Telemetry.PageViewPerformance.shouldCollectDuration(customDuration)) {\r\n                    customDuration = undefined;\r\n                }\r\n            } else {\r\n                this.appInsights.sendPageViewInternal(\r\n                    name,\r\n                    url,\r\n                    !isNaN(duration) ? duration : undefined,\r\n                    properties,\r\n                    measurements);\r\n                this.appInsights.flush();\r\n                pageViewSent = true;\r\n            }\r\n\r\n            if (!pageViewSent && (this.overridePageViewDuration || !isNaN(duration))) {\r\n                // 1, 2, 4 cases\r\n                this.appInsights.sendPageViewInternal(\r\n                    name,\r\n                    url,\r\n                    !isNaN(duration) ? duration : customDuration,\r\n                    properties,\r\n                    measurements);\r\n                this.appInsights.flush();\r\n                pageViewSent = true;\r\n            }\r\n\r\n            var maxDurationLimit = 60000;\r\n\r\n            if (!Telemetry.PageViewPerformance.isPerformanceTimingSupported()) {\r\n                // no navigation timing (IE 8, iOS Safari 8.4, Opera Mini 8 - see http://caniuse.com/#feat=nav-timing)\r\n                _InternalLogging.throwInternal(\r\n                    LoggingSeverity.WARNING,\r\n                    _InternalMessageId.NavigationTimingNotSupported,\r\n                    \"trackPageView: navigation timing API used for calculation of page duration is not supported in this browser. This page view will be collected without duration and timing info.\");\r\n                return;\r\n            }\r\n\r\n            var handle = setInterval(() => {\r\n                try {\r\n                    if (Telemetry.PageViewPerformance.isPerformanceTimingDataReady()) {\r\n                        clearInterval(handle);\r\n                        var pageViewPerformance = new Telemetry.PageViewPerformance(name, url, null, properties, measurements);\r\n\r\n                        if (!pageViewPerformance.getIsValid() && !pageViewSent) {\r\n                            // If navigation timing gives invalid numbers, then go back to \"override page view duration\" mode.\r\n                            // That's the best value we can get that makes sense.\r\n                            this.appInsights.sendPageViewInternal(name, url, customDuration, properties, measurements);\r\n                            this.appInsights.flush();\r\n                        } else {\r\n                            if (!pageViewSent) {\r\n                                this.appInsights.sendPageViewInternal(name, url, pageViewPerformance.getDurationMs(), properties, measurements);\r\n                            }\r\n\r\n                            if (!this.pageViewPerformanceSent) {\r\n                                this.appInsights.sendPageViewPerformanceInternal(pageViewPerformance);\r\n                                this.pageViewPerformanceSent = true;\r\n                            }\r\n                            this.appInsights.flush();\r\n                        }\r\n                    }\r\n                    else if (Telemetry.PageViewPerformance.getDuration(start, +new Date) > maxDurationLimit) {\r\n                        clearInterval(handle);\r\n                        if (!pageViewSent) {\r\n                            this.appInsights.sendPageViewInternal(name, url, maxDurationLimit, properties, measurements);\r\n                            this.appInsights.flush();\r\n                        }\r\n                    }\r\n                } catch (e) {\r\n                    _InternalLogging.throwInternal(\r\n                        LoggingSeverity.CRITICAL,\r\n                        _InternalMessageId.TrackPVFailedCalc,\r\n                        \"trackPageView failed on page load calculation: \" + Util.getExceptionName(e),\r\n                        { exception: Util.dump(e) });\r\n                }\r\n            }, 100);\r\n        }\r\n    }\r\n}\r\n","/// <reference path=\"../AppInsights.ts\" />\r\n\r\nmodule Microsoft.ApplicationInsights.Telemetry {\r\n    \"use strict\";\r\n\r\n    /**\r\n     * Used to track page visit durations\r\n     */\r\n    export class PageVisitTimeManager {\r\n\r\n        private prevPageVisitDataKeyName: string = \"prevPageVisitData\";\r\n        private pageVisitTimeTrackingHandler: (pageName: string, pageUrl: string, pageVisitTime: number) => void;\r\n\r\n        /**\r\n         * Creates a new instance of PageVisitTimeManager\r\n         * @param pageVisitTimeTrackingHandler Delegate that will be called to send telemetry data to AI (when trackPreviousPageVisit is called)\r\n         * @returns {} \r\n         */\r\n        constructor(pageVisitTimeTrackingHandler: (pageName: string, pageUrl: string, pageVisitTime: number) => void) {\r\n            this.pageVisitTimeTrackingHandler = pageVisitTimeTrackingHandler;\r\n        }\r\n\r\n         /**\r\n         * Tracks the previous page visit time telemetry (if exists) and starts timing of new page visit time\r\n         * @param currentPageName Name of page to begin timing for visit duration\r\n         * @param currentPageUrl Url of page to begin timing for visit duration\r\n         */\r\n        public trackPreviousPageVisit(currentPageName: string, currentPageUrl: string) {\r\n            \r\n            try {\r\n                // Restart timer for new page view\r\n                var prevPageVisitTimeData = this.restartPageVisitTimer(currentPageName, currentPageUrl);\r\n                \r\n                // If there was a page already being timed, track the visit time for it now.\r\n                if (prevPageVisitTimeData) {\r\n                    this.pageVisitTimeTrackingHandler(prevPageVisitTimeData.pageName, prevPageVisitTimeData.pageUrl, prevPageVisitTimeData.pageVisitTime);\r\n                }\r\n            } catch (e) {\r\n                _InternalLogging.warnToConsole(\"Auto track page visit time failed, metric will not be collected: \" + Util.dump(e));\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Stops timing of current page (if exists) and starts timing for duration of visit to pageName\r\n         * @param pageName Name of page to begin timing visit duration\r\n         * @returns {PageVisitData} Page visit data (including duration) of pageName from last call to start or restart, if exists. Null if not. \r\n         */\r\n        public restartPageVisitTimer(pageName: string, pageUrl: string) {\r\n            try {\r\n                var prevPageVisitData = this.stopPageVisitTimer();\r\n                this.startPageVisitTimer(pageName, pageUrl);\r\n\r\n                return prevPageVisitData;\r\n            } catch (e) {\r\n                _InternalLogging.warnToConsole(\"Call to restart failed: \" + Util.dump(e));\r\n                return null;\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Starts timing visit duration of pageName\r\n         * @param pageName \r\n         * @returns {} \r\n         */\r\n        public startPageVisitTimer(pageName: string, pageUrl: string) {\r\n            try {\r\n                if (Util.canUseSessionStorage()) {\r\n                    if (Util.getSessionStorage(this.prevPageVisitDataKeyName) != null) {\r\n                        throw new Error(\"Cannot call startPageVisit consecutively without first calling stopPageVisit\");\r\n                    }\r\n\r\n                    var currPageVisitData = new PageVisitData(pageName, pageUrl);\r\n                    var currPageVisitDataStr = JSON.stringify(currPageVisitData);\r\n                    Util.setSessionStorage(this.prevPageVisitDataKeyName, currPageVisitDataStr);\r\n                }\r\n            } catch (e) {\r\n                //TODO: Remove this catch in next phase, since if start is called twice in a row the exception needs to be propagated out\r\n                _InternalLogging.warnToConsole(\"Call to start failed: \" + Util.dump(e));\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Stops timing of current page, if exists.\r\n         * @returns {PageVisitData} Page visit data (including duration) of pageName from call to start, if exists. Null if not.  \r\n         */\r\n        public stopPageVisitTimer() {\r\n            try {\r\n                if (Util.canUseSessionStorage()) {\r\n\r\n                    // Define end time of page's visit\r\n                    var pageVisitEndTime = Date.now();\r\n\r\n                    // Try to retrieve  page name and start time from session storage\r\n                    var pageVisitDataJsonStr = Util.getSessionStorage(this.prevPageVisitDataKeyName);\r\n                    if (pageVisitDataJsonStr) {\r\n\r\n                        // if previous page data exists, set end time of visit\r\n                        var prevPageVisitData: PageVisitData = JSON.parse(pageVisitDataJsonStr);\r\n                        prevPageVisitData.pageVisitTime = pageVisitEndTime - prevPageVisitData.pageVisitStartTime;\r\n\r\n                        // Remove data from storage since we already used it\r\n                        Util.removeSessionStorage(this.prevPageVisitDataKeyName);\r\n\r\n                        // Return page visit data\r\n                        return prevPageVisitData;\r\n                    } else {\r\n                        return null;\r\n                    }\r\n\r\n                }\r\n                return null;\r\n            } catch (e) {\r\n                _InternalLogging.warnToConsole(\"Stop page visit timer failed: \" + Util.dump(e));\r\n                return null\r\n            }\r\n        }\r\n    }\r\n\r\n    export class PageVisitData {\r\n\r\n        public pageName: string;\r\n        public pageUrl: string;\r\n        public pageVisitStartTime: number;\r\n        public pageVisitTime: number;\r\n\r\n        constructor(pageName, pageUrl) {\r\n            this.pageVisitStartTime = Date.now();\r\n            this.pageName = pageName;\r\n            this.pageUrl = pageUrl;\r\n        }\r\n    }\r\n}","// THIS TYPE WAS AUTOGENERATED\r\nmodule AI\r\n{\r\n\"use strict\";\r\n    export enum DependencyKind\r\n    {\r\n        SQL = 0,\r\n        Http = 1,\r\n        Other = 2,\r\n    }\r\n}\r\n","// THIS TYPE WAS AUTOGENERATED\r\nmodule AI\r\n{\r\n\"use strict\";\r\n    export enum DependencySourceType\r\n    {\r\n        Undefined = 0,\r\n        Aic = 1,\r\n        Apmc = 2,\r\n    }\r\n}\r\n","// THIS TYPE WAS AUTOGENERATED\r\n/// <reference path=\"Domain.ts\" />\r\n/// <reference path=\"DataPointType.ts\" />\r\n/// <reference path=\"DependencyKind.ts\" />\r\n/// <reference path=\"DependencySourceType.ts\" />\r\nmodule AI\r\n{\r\n\"use strict\";\r\n    export class RemoteDependencyData extends Microsoft.Telemetry.Domain\r\n    {\r\n        public ver: number;\r\n        public name: string;\r\n        public id: string;\r\n        public resultCode: string;\r\n        public duration: string;\r\n        public success: boolean;\r\n        public data: string;\r\n        public target: string;\r\n        public type: string;\r\n        public properties: any;\r\n        public measurements: any;\r\n\r\n        /* Following fields should be marked as depricated in the next release, and must be removed in the subsequent breaking release */\r\n        public kind: AI.DataPointType;\r\n        public value: number;\r\n        public count: number;\r\n        public min: number;\r\n        public max: number;\r\n        public stdDev: number;\r\n        public dependencyKind: AI.DependencyKind;\r\n        public async: boolean;\r\n        public dependencySource: AI.DependencySourceType;\r\n        public commandName: string;\r\n        public dependencyTypeName: string;\r\n\r\n        constructor()\r\n        {\r\n            super();\r\n\r\n            this.ver = 2;\r\n            this.kind = AI.DataPointType.Aggregation;\r\n            this.dependencyKind = AI.DependencyKind.Other;\r\n            this.success = true;\r\n            this.dependencySource = AI.DependencySourceType.Apmc;\r\n            this.properties = {};\r\n            this.measurements = {};\r\n            \r\n            super();\r\n        }\r\n    }\r\n}\r\n","/// <reference path=\"../../JavaScriptSDK.Interfaces/Telemetry/ISerializable.ts\" />\r\n/// <reference path=\"../../JavaScriptSDK.Interfaces/Contracts/Generated/PageViewData.ts\" />\r\n/// <reference path=\"../../JavaScriptSDK.Interfaces/Contracts/Generated/RemoteDependencyData.ts\"/>\r\n/// <reference path=\"./Common/DataSanitizer.ts\"/>\r\n\r\nmodule Microsoft.ApplicationInsights.Telemetry {\r\n    \"use strict\";\r\n\r\n    export class RemoteDependencyData extends AI.RemoteDependencyData implements ISerializable {\r\n\r\n        public static envelopeType = \"Microsoft.ApplicationInsights.{0}.RemoteDependency\";\r\n        public static dataType = \"RemoteDependencyData\";\r\n\r\n        public aiDataContract = {\r\n            id: FieldType.Required,\r\n            ver: FieldType.Required,\r\n            name: FieldType.Default,\r\n            resultCode: FieldType.Default,\r\n            duration: FieldType.Default,\r\n            success: FieldType.Default,\r\n            data: FieldType.Default,\r\n            target: FieldType.Default,\r\n            type: FieldType.Default,\r\n            properties: FieldType.Default,\r\n            measurements: FieldType.Default,\r\n\r\n            kind: FieldType.Default,\r\n            value: FieldType.Default,\r\n            count: FieldType.Default,\r\n            min: FieldType.Default,\r\n            max: FieldType.Default,\r\n            stdDev: FieldType.Default,\r\n            dependencyKind: FieldType.Default,\r\n            async: FieldType.Default,\r\n            dependencySource: FieldType.Default,\r\n            commandName: FieldType.Default,\r\n            dependencyTypeName: FieldType.Default,\r\n        }\r\n\r\n        /**\r\n         * Constructs a new instance of the RemoteDependencyData object\r\n         */\r\n        constructor(id: string, absoluteUrl: string, commandName: string, value: number, success: boolean, resultCode: number, method?: string, properties?: Object, measurements?: Object) {\r\n            super();\r\n\r\n            this.id = id;\r\n\r\n            this.duration = Util.msToTimeSpan(value);\r\n            this.success = success;  \r\n            this.resultCode = resultCode + \"\";\r\n            this.dependencyKind = AI.DependencyKind.Http;\r\n\r\n            this.type = \"Ajax\";\r\n            this.data = Common.DataSanitizer.sanitizeUrl(commandName);\r\n\r\n            if (absoluteUrl && absoluteUrl.length > 0) {\r\n                var parsedUrl: HTMLAnchorElement = UrlHelper.parseUrl(absoluteUrl)\r\n                this.target = parsedUrl.host;\r\n                if (parsedUrl.pathname != null) {\r\n                    var pathName: string = (parsedUrl.pathname.length === 0) ? \"/\" : parsedUrl.pathname;\r\n                    if (pathName.charAt(0) !== '/') {\r\n                        pathName = \"/\" + pathName;\r\n                    }\r\n\r\n                    this.name = Common.DataSanitizer.sanitizeString(method ? method + \" \" + pathName : pathName);\r\n                } else {\r\n                    this.name = Common.DataSanitizer.sanitizeString(absoluteUrl);\r\n                }\r\n            } else {\r\n                this.target = commandName;\r\n                this.name = commandName;\r\n            }\r\n\r\n            this.properties = ApplicationInsights.Telemetry.Common.DataSanitizer.sanitizeProperties(properties);\r\n            this.measurements = ApplicationInsights.Telemetry.Common.DataSanitizer.sanitizeMeasurements(measurements);\r\n        }\r\n    }\r\n}","/// <reference path=\"./HashCodeScoreGenerator.ts\" />\r\n\r\nmodule Microsoft.ApplicationInsights {\r\n    \"use strict\";\r\n \r\n    // Class allows to perform split testing (aka 'a/b testing' aka 'flights')\r\n    // Works similarly to sampling, using the same hashing algorithm under the hood.\r\n    // Suggested use:\r\n    //\r\n    //   newShinyFeature.enabled = false;\r\n    //   if (new SplitTest.isEnabled(<user id>, <percent of users to enable feature for>)){\r\n    //     newShinyFeature.enabled = true;\r\n    //   }\r\n    //\r\n    export class SplitTest {\r\n        private hashCodeGeneragor: HashCodeScoreGenerator = new HashCodeScoreGenerator();\r\n\r\n        public isEnabled(key: string, percentEnabled: number) {\r\n            return this.hashCodeGeneragor.getHashCodeScore(key) < percentEnabled;\r\n        }\r\n    }\r\n}","/// <reference path=\"TelemetryContext.ts\" />\r\n/// <reference path=\"./Telemetry/Common/Data.ts\"/>\r\n/// <reference path=\"./Util.ts\"/>\r\n/// <reference path=\"../JavaScriptSDK.Interfaces/Contracts/Generated/SessionState.ts\"/>\r\n/// <reference path=\"./Telemetry/PageViewManager.ts\"/>\r\n/// <reference path=\"./Telemetry/PageVisitTimeManager.ts\"/>\r\n/// <reference path=\"./Telemetry/RemoteDependencyData.ts\"/>\r\n/// <reference path=\"./ajax/ajax.ts\"/>\r\n/// <reference path=\"./SplitTest.ts\"/>\r\n/// <reference path=\"../JavaScriptSDK.Interfaces/IAppInsights.ts\"/>\r\n\r\nmodule Microsoft.ApplicationInsights {\r\n\r\n    \"use strict\";\r\n\r\n    export var Version = \"1.0.13\";\r\n\r\n    /**\r\n    * Internal interface to pass appInsights object to subcomponents without coupling \r\n    */\r\n    export interface IAppInsightsInternal {\r\n        sendPageViewInternal(name?: string, url?: string, duration?: number, properties?: Object, measurements?: Object);\r\n        sendPageViewPerformanceInternal(pageViewPerformance: ApplicationInsights.Telemetry.PageViewPerformance);\r\n        flush();\r\n    }\r\n\r\n    /**\r\n     * The main API that sends telemetry to Application Insights.\r\n     * Learn more: http://go.microsoft.com/fwlink/?LinkID=401493\r\n     */\r\n    export class AppInsights implements IAppInsightsInternal, IAppInsights {\r\n\r\n        // Counts number of trackAjax invokations.\r\n        // By default we only monitor X ajax call per view to avoid too much load.\r\n        // Default value is set in config.\r\n        // This counter keeps increasing even after the limit is reached.\r\n        private _trackAjaxAttempts: number = 0;\r\n\r\n        private _eventTracking: Timing;\r\n        private _pageTracking: Timing;\r\n        private _pageViewManager: Microsoft.ApplicationInsights.Telemetry.PageViewManager;\r\n        private _pageVisitTimeManager: Microsoft.ApplicationInsights.Telemetry.PageVisitTimeManager;\r\n        private _ajaxMonitor: Microsoft.ApplicationInsights.AjaxMonitor;\r\n\r\n        public config: IConfig;\r\n        public context: TelemetryContext;\r\n        public queue: (() => void)[];\r\n        public static defaultConfig: IConfig;\r\n\r\n        constructor(config: IConfig) {\r\n            this.config = config || <IConfig>{};\r\n\r\n            // load default values if specified\r\n            var defaults: IConfig = AppInsights.defaultConfig;\r\n            if (defaults !== undefined) {\r\n                for (var field in defaults) {\r\n                    // for each unspecified field, set the default value\r\n                    if (this.config[field] === undefined) {\r\n                        this.config[field] = defaults[field];\r\n                    }\r\n                }\r\n            }\r\n\r\n            _InternalLogging.verboseLogging = () => this.config.verboseLogging;\r\n            _InternalLogging.enableDebugExceptions = () => this.config.enableDebug;\r\n            var configGetters: ApplicationInsights.ITelemetryConfig = {\r\n                instrumentationKey: () => this.config.instrumentationKey,\r\n                accountId: () => this.config.accountId,\r\n                sessionRenewalMs: () => this.config.sessionRenewalMs,\r\n                sessionExpirationMs: () => this.config.sessionExpirationMs,\r\n                endpointUrl: () => this.config.endpointUrl,\r\n                emitLineDelimitedJson: () => this.config.emitLineDelimitedJson,\r\n                maxBatchSizeInBytes: () => {\r\n                    return (!this.config.isBeaconApiDisabled && Util.IsBeaconApiSupported()) ?\r\n                        Math.min(this.config.maxBatchSizeInBytes, Sender.MaxBeaconPayloadSize) :\r\n                        this.config.maxBatchSizeInBytes;\r\n                },\r\n                maxBatchInterval: () => this.config.maxBatchInterval,\r\n                disableTelemetry: () => this.config.disableTelemetry,\r\n                sampleRate: () => this.config.samplingPercentage,\r\n                cookieDomain: () => this.config.cookieDomain,\r\n                enableSessionStorageBuffer: () => {\r\n                    // Disable Session Storage buffer if telemetry is sent using Beacon API\r\n                    return ((this.config.isBeaconApiDisabled || !Util.IsBeaconApiSupported()) && this.config.enableSessionStorageBuffer);\r\n                },\r\n                isRetryDisabled: () => this.config.isRetryDisabled,\r\n                isBeaconApiDisabled: () => this.config.isBeaconApiDisabled,\r\n                sdkExtension: () => this.config.sdkExtension,\r\n                isBrowserLinkTrackingEnabled: () => this.config.isBrowserLinkTrackingEnabled\r\n            }\r\n\r\n            if (this.config.isCookieUseDisabled) {\r\n                Util.disableCookies();\r\n            }\r\n\r\n            if (this.config.isStorageUseDisabled) {\r\n                Util.disableStorage();\r\n            }\r\n\r\n            this.context = new ApplicationInsights.TelemetryContext(configGetters);\r\n\r\n            this._pageViewManager = new Microsoft.ApplicationInsights.Telemetry.PageViewManager(this, this.config.overridePageViewDuration);\r\n\r\n            // initialize event timing\r\n            this._eventTracking = new Timing(\"trackEvent\");\r\n            this._eventTracking.action = (name?: string, url?: string, duration?: number, properties?: Object, measurements?: Object) => {\r\n                if (!measurements) {\r\n                    measurements = { duration: duration };\r\n                }\r\n                else {\r\n                    // do not override existing duration value\r\n                    if (isNaN(measurements[\"duration\"])) {\r\n                        measurements[\"duration\"] = duration;\r\n                    }\r\n                }\r\n                var event = new Telemetry.Event(name, properties, measurements);\r\n                var data = new ApplicationInsights.Telemetry.Common.Data<ApplicationInsights.Telemetry.Event>(Telemetry.Event.dataType, event);\r\n                var envelope = new Telemetry.Common.Envelope(data, Telemetry.Event.envelopeType);\r\n\r\n                this.context.track(envelope);\r\n            }\r\n\r\n            // initialize page view timing\r\n            this._pageTracking = new Timing(\"trackPageView\");\r\n            this._pageTracking.action = (name, url, duration, properties, measurements) => {\r\n                this.sendPageViewInternal(name, url, duration, properties, measurements);\r\n            }\r\n\r\n            this._pageVisitTimeManager = new ApplicationInsights.Telemetry.PageVisitTimeManager(\r\n                (pageName, pageUrl, pageVisitTime) => this.trackPageVisitTime(pageName, pageUrl, pageVisitTime));\r\n\r\n            if (!this.config.disableAjaxTracking) {\r\n                this._ajaxMonitor = new Microsoft.ApplicationInsights.AjaxMonitor(this);\r\n            }\r\n        }\r\n\r\n        public sendPageViewInternal(name?: string, url?: string, duration?: number, properties?: Object, measurements?: Object) {\r\n            var pageView = new Telemetry.PageView(name, url, duration, properties, measurements);\r\n            var data = new ApplicationInsights.Telemetry.Common.Data<ApplicationInsights.Telemetry.PageView>(Telemetry.PageView.dataType, pageView);\r\n            var envelope = new Telemetry.Common.Envelope(data, Telemetry.PageView.envelopeType);\r\n\r\n            this.context.track(envelope);\r\n\r\n            // reset ajaxes counter\r\n            this._trackAjaxAttempts = 0;\r\n        }\r\n\r\n        public sendPageViewPerformanceInternal(pageViewPerformance: ApplicationInsights.Telemetry.PageViewPerformance) {\r\n            var pageViewPerformanceData = new ApplicationInsights.Telemetry.Common.Data<ApplicationInsights.Telemetry.PageViewPerformance>(\r\n                Telemetry.PageViewPerformance.dataType, pageViewPerformance);\r\n            var pageViewPerformanceEnvelope = new Telemetry.Common.Envelope(pageViewPerformanceData, Telemetry.PageViewPerformance.envelopeType);\r\n            this.context.track(pageViewPerformanceEnvelope);\r\n        }\r\n\r\n        /**\r\n         * Starts timing how long the user views a page or other item. Call this when the page opens. \r\n         * This method doesn't send any telemetry. Call {@link stopTrackTelemetry} to log the page when it closes.\r\n         * @param   name  A string that idenfities this item, unique within this HTML document. Defaults to the document title.\r\n         */\r\n        public startTrackPage(name?: string) {\r\n            try {\r\n                if (typeof name !== \"string\") {\r\n                    name = window.document && window.document.title || \"\";\r\n                }\r\n\r\n                this._pageTracking.start(name);\r\n            } catch (e) {\r\n                _InternalLogging.throwInternal(\r\n                    LoggingSeverity.CRITICAL,\r\n                    _InternalMessageId.StartTrackFailed,\r\n                    \"startTrackPage failed, page view may not be collected: \" + Util.getExceptionName(e),\r\n                    { exception: Util.dump(e) });\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Logs how long a page or other item was visible, after {@link startTrackPage}. Call this when the page closes. \r\n         * @param   name  The string you used as the name in startTrackPage. Defaults to the document title.\r\n         * @param   url   String - a relative or absolute URL that identifies the page or other item. Defaults to the window location.\r\n         * @param   properties  map[string, string] - additional data used to filter pages and metrics in the portal. Defaults to empty.\r\n         * @param   measurements    map[string, number] - metrics associated with this page, displayed in Metrics Explorer on the portal. Defaults to empty.\r\n         */\r\n        public stopTrackPage(name?: string, url?: string, properties?: Object, measurements?: Object) {\r\n            try {\r\n                if (typeof name !== \"string\") {\r\n                    name = window.document && window.document.title || \"\";\r\n                }\r\n\r\n                if (typeof url !== \"string\") {\r\n                    url = window.location && window.location.href || \"\";\r\n                }\r\n\r\n                this._pageTracking.stop(name, url, properties, measurements);\r\n\r\n                if (this.config.autoTrackPageVisitTime) {\r\n                    this._pageVisitTimeManager.trackPreviousPageVisit(name, url);\r\n                }\r\n\r\n            } catch (e) {\r\n                _InternalLogging.throwInternal(\r\n                    LoggingSeverity.CRITICAL,\r\n                    _InternalMessageId.StopTrackFailed,\r\n                    \"stopTrackPage failed, page view will not be collected: \" + Util.getExceptionName(e),\r\n                    { exception: Util.dump(e) });\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Logs that a page or other item was viewed. \r\n         * @param   name  The string you used as the name in startTrackPage. Defaults to the document title.\r\n         * @param   url   String - a relative or absolute URL that identifies the page or other item. Defaults to the window location.\r\n         * @param   properties  map[string, string] - additional data used to filter pages and metrics in the portal. Defaults to empty.\r\n         * @param   measurements    map[string, number] - metrics associated with this page, displayed in Metrics Explorer on the portal. Defaults to empty.\r\n         * @param   duration    number - the number of milliseconds it took to load the page. Defaults to undefined. If set to default value, page load time is calculated internally.\r\n         */\r\n        public trackPageView(name?: string, url?: string, properties?: Object, measurements?: Object, duration?: number) {\r\n            try {\r\n                this._pageViewManager.trackPageView(name, url, properties, measurements, duration);\r\n\r\n                if (this.config.autoTrackPageVisitTime) {\r\n                    this._pageVisitTimeManager.trackPreviousPageVisit(name, url);\r\n                }\r\n\r\n            } catch (e) {\r\n                _InternalLogging.throwInternal(\r\n                    LoggingSeverity.CRITICAL,\r\n                    _InternalMessageId.TrackPVFailed,\r\n                    \"trackPageView failed, page view will not be collected: \" + Util.getExceptionName(e),\r\n                    { exception: Util.dump(e) });\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Start timing an extended event. Call {@link stopTrackEvent} to log the event when it ends.\r\n         * @param   name    A string that identifies this event uniquely within the document.\r\n         */\r\n        public startTrackEvent(name: string) {\r\n            try {\r\n                this._eventTracking.start(name);\r\n            } catch (e) {\r\n                _InternalLogging.throwInternal(LoggingSeverity.CRITICAL,\r\n                    _InternalMessageId.StartTrackEventFailed,\r\n                    \"startTrackEvent failed, event will not be collected: \" + Util.getExceptionName(e),\r\n                    { exception: Util.dump(e) });\r\n            }\r\n        }\r\n\r\n        /** \r\n         * Log an extended event that you started timing with {@link startTrackEvent}.\r\n         * @param   name    The string you used to identify this event in startTrackEvent.\r\n         * @param   properties  map[string, string] - additional data used to filter events and metrics in the portal. Defaults to empty.\r\n         * @param   measurements    map[string, number] - metrics associated with this event, displayed in Metrics Explorer on the portal. Defaults to empty.\r\n         */\r\n        public stopTrackEvent(name: string, properties?: Object, measurements?: Object) {\r\n            try {\r\n                this._eventTracking.stop(name, undefined, properties, measurements);\r\n            } catch (e) {\r\n                _InternalLogging.throwInternal(LoggingSeverity.CRITICAL,\r\n                    _InternalMessageId.StopTrackEventFailed,\r\n                    \"stopTrackEvent failed, event will not be collected: \" + Util.getExceptionName(e),\r\n                    { exception: Util.dump(e) });\r\n            }\r\n        }\r\n\r\n        /** \r\n         * Log a user action or other occurrence.\r\n         * @param   name    A string to identify this event in the portal.\r\n         * @param   properties  map[string, string] - additional data used to filter events and metrics in the portal. Defaults to empty.\r\n         * @param   measurements    map[string, number] - metrics associated with this event, displayed in Metrics Explorer on the portal. Defaults to empty.\r\n         */\r\n        public trackEvent(name: string, properties?: Object, measurements?: Object) {\r\n            try {\r\n                var eventTelemetry = new Telemetry.Event(name, properties, measurements);\r\n                var data = new ApplicationInsights.Telemetry.Common.Data<ApplicationInsights.Telemetry.Event>(Telemetry.Event.dataType, eventTelemetry);\r\n                var envelope = new Telemetry.Common.Envelope(data, Telemetry.Event.envelopeType);\r\n                this.context.track(envelope);\r\n            } catch (e) {\r\n                _InternalLogging.throwInternal(LoggingSeverity.CRITICAL,\r\n                    _InternalMessageId.TrackEventFailed,\r\n                    \"trackEvent failed, event will not be collected: \" + Util.getExceptionName(e),\r\n                    { exception: Util.dump(e) });\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Log a dependency call\r\n         * @param id    unique id, this is used by the backend o correlate server requests. Use Util.newId() to generate a unique Id.\r\n         * @param method    represents request verb (GET, POST, etc.)\r\n         * @param absoluteUrl   absolute url used to make the dependency request\r\n         * @param pathName  the path part of the absolute url\r\n         * @param totalTime total request time\r\n         * @param success   indicates if the request was sessessful\r\n         * @param resultCode    response code returned by the dependency request\r\n         * @param properties    map[string, string] - additional data used to filter events and metrics in the portal. Defaults to empty.\r\n         * @param measurements  map[string, number] - metrics associated with this event, displayed in Metrics Explorer on the portal. Defaults to empty.\r\n         */\r\n        public trackDependency(id: string, method: string, absoluteUrl: string, pathName: string, totalTime: number, success: boolean, resultCode: number, properties?: Object, measurements?: Object) {\r\n            if (this.config.maxAjaxCallsPerView === -1 ||\r\n                this._trackAjaxAttempts < this.config.maxAjaxCallsPerView) {\r\n                var dependency = new Telemetry.RemoteDependencyData(id, absoluteUrl, pathName, totalTime, success, resultCode, method, properties, measurements);\r\n                var dependencyData = new ApplicationInsights.Telemetry.Common.Data<ApplicationInsights.Telemetry.RemoteDependencyData>(\r\n                    Telemetry.RemoteDependencyData.dataType, dependency);\r\n                var envelope = new Telemetry.Common.Envelope(dependencyData, ApplicationInsights.Telemetry.RemoteDependencyData.envelopeType);\r\n                this.context.track(envelope);\r\n            } else if (this._trackAjaxAttempts === this.config.maxAjaxCallsPerView) {\r\n                _InternalLogging.throwInternal(LoggingSeverity.CRITICAL,\r\n                    _InternalMessageId.MaxAjaxPerPVExceeded,\r\n                    \"Maximum ajax per page view limit reached, ajax monitoring is paused until the next trackPageView(). In order to increase the limit set the maxAjaxCallsPerView configuration parameter.\",\r\n                    true);\r\n            }\r\n\r\n            ++this._trackAjaxAttempts;\r\n        }\r\n\r\n        /**\r\n         * trackAjax method is obsolete, use trackDependency instead\r\n         */\r\n        public trackAjax(id: string, absoluteUrl: string, pathName: string, totalTime: number, success: boolean, resultCode: number, method?: string) {\r\n            this.trackDependency(id, null, absoluteUrl, pathName, totalTime, success, resultCode);\r\n        }\r\n\r\n        /**\r\n         * Log an exception you have caught.\r\n         * @param   exception   An Error from a catch clause, or the string error message.\r\n         * @param   properties  map[string, string] - additional data used to filter events and metrics in the portal. Defaults to empty.\r\n         * @param   measurements    map[string, number] - metrics associated with this event, displayed in Metrics Explorer on the portal. Defaults to empty.\r\n         * @param   severityLevel   AI.SeverityLevel - severity level\r\n         */\r\n        public trackException(exception: Error, handledAt?: string, properties?: Object, measurements?: Object, severityLevel?: AI.SeverityLevel) {\r\n            try {\r\n                if (!Util.isError(exception)) {\r\n                    // ensure that we have an error object (user could pass a string/message)\r\n                    try {\r\n                        throw new Error(<any>exception);\r\n                    } catch (error) {\r\n                        exception = error;\r\n                    }\r\n                }\r\n\r\n                var exceptionTelemetry = new Telemetry.Exception(exception, handledAt, properties, measurements, severityLevel);\r\n                var data = new ApplicationInsights.Telemetry.Common.Data<ApplicationInsights.Telemetry.Exception>(Telemetry.Exception.dataType, exceptionTelemetry);\r\n                var envelope = new Telemetry.Common.Envelope(data, Telemetry.Exception.envelopeType);\r\n                this.context.track(envelope);\r\n            } catch (e) {\r\n                _InternalLogging.throwInternal(LoggingSeverity.CRITICAL,\r\n                    _InternalMessageId.TrackExceptionFailed,\r\n                    \"trackException failed, exception will not be collected: \" + Util.getExceptionName(e),\r\n                    { exception: Util.dump(e) });\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Log a numeric value that is not associated with a specific event. Typically used to send regular reports of performance indicators.\r\n         * To send a single measurement, use just the first two parameters. If you take measurements very frequently, you can reduce the \r\n         * telemetry bandwidth by aggregating multiple measurements and sending the resulting average at intervals.\r\n         * @param   name    A string that identifies the metric.\r\n         * @param   average Number representing either a single measurement, or the average of several measurements.\r\n         * @param   sampleCount The number of measurements represented by the average. Defaults to 1.\r\n         * @param   min The smallest measurement in the sample. Defaults to the average.\r\n         * @param   max The largest measurement in the sample. Defaults to the average.\r\n         */\r\n        public trackMetric(name: string, average: number, sampleCount?: number, min?: number, max?: number, properties?: Object) {\r\n            try {\r\n                var telemetry = new Telemetry.Metric(name, average, sampleCount, min, max, properties);\r\n                var data = new ApplicationInsights.Telemetry.Common.Data<ApplicationInsights.Telemetry.Metric>(Telemetry.Metric.dataType, telemetry);\r\n                var envelope = new Telemetry.Common.Envelope(data, Telemetry.Metric.envelopeType);\r\n\r\n                this.context.track(envelope);\r\n            } catch (e) {\r\n                _InternalLogging.throwInternal(LoggingSeverity.CRITICAL,\r\n                    _InternalMessageId.TrackMetricFailed,\r\n                    \"trackMetric failed, metric will not be collected: \" + Util.getExceptionName(e),\r\n                    { exception: Util.dump(e) });\r\n            }\r\n        }\r\n\r\n        /**\r\n        * Log a diagnostic message. \r\n        * @param   message A message string \r\n        * @param   properties  map[string, string] - additional data used to filter traces in the portal. Defaults to empty.\r\n        * @param   severityLevel   AI.SeverityLevel - severity level\r\n        */\r\n        public trackTrace(message: string, properties?: Object, severityLevel?: AI.SeverityLevel) {\r\n            try {\r\n                var telemetry = new Telemetry.Trace(message, properties, severityLevel);\r\n                var data = new ApplicationInsights.Telemetry.Common.Data<ApplicationInsights.Telemetry.Trace>(Telemetry.Trace.dataType, telemetry);\r\n                var envelope = new Telemetry.Common.Envelope(data, Telemetry.Trace.envelopeType);\r\n\r\n                this.context.track(envelope);\r\n            } catch (e) {\r\n                _InternalLogging.throwInternal(LoggingSeverity.WARNING,\r\n                    _InternalMessageId.TrackTraceFailed,\r\n                    \"trackTrace failed, trace will not be collected: \" + Util.getExceptionName(e),\r\n                    { exception: Util.dump(e) });\r\n            }\r\n        }\r\n\r\n        /**\r\n       * Log a page visit time\r\n       * @param    pageName    Name of page\r\n       * @param    pageVisitDuration Duration of visit to the page in milleseconds\r\n       */\r\n        private trackPageVisitTime(pageName: string, pageUrl: string, pageVisitTime: number) {\r\n            var properties = { PageName: pageName, PageUrl: pageUrl };\r\n            this.trackMetric(\"PageVisitTime\", pageVisitTime, 1, pageVisitTime, pageVisitTime, properties);\r\n        }\r\n\r\n        /**\r\n         * Immediately send all queued telemetry.\r\n         * @param {boolean} async - If flush should be call asynchronously\r\n         */\r\n        public flush(async = true) {\r\n            try {\r\n                this.context._sender.triggerSend(async);\r\n            } catch (e) {\r\n                _InternalLogging.throwInternal(LoggingSeverity.CRITICAL,\r\n                    _InternalMessageId.FlushFailed,\r\n                    \"flush failed, telemetry will not be collected: \" + Util.getExceptionName(e),\r\n                    { exception: Util.dump(e) });\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Sets the authenticated user id and the account id.\r\n         * User auth id and account id should be of type string. They should not contain commas, semi-colons, equal signs, spaces, or vertical-bars.\r\n         * \r\n         * By default the method will only set the authUserID and accountId for all events in this page view. To add them to all events within\r\n         * the whole session, you should either call this method on every page view or set `storeInCookie = true`. \r\n         *   \r\n         * @param authenticatedUserId {string} - The authenticated user id. A unique and persistent string that represents each authenticated user in the service.\r\n         * @param accountId {string} - An optional string to represent the account associated with the authenticated user.\r\n         * @param storeInCookie {boolean} - AuthenticateUserID will be stored in a cookie and added to all events within this session. \r\n         */\r\n        public setAuthenticatedUserContext(authenticatedUserId: string, accountId?: string, storeInCookie = false) {\r\n            try {\r\n                this.context.user.setAuthenticatedUserContext(authenticatedUserId, accountId, storeInCookie);\r\n            } catch (e) {\r\n                _InternalLogging.throwInternal(LoggingSeverity.WARNING,\r\n                    _InternalMessageId.SetAuthContextFailed,\r\n                    \"Setting auth user context failed. \" + Util.getExceptionName(e),\r\n                    { exception: Util.dump(e) },\r\n                    true);\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Clears the authenticated user id and the account id from the user context.\r\n         */\r\n        public clearAuthenticatedUserContext() {\r\n            try {\r\n                this.context.user.clearAuthenticatedUserContext();\r\n            } catch (e) {\r\n                _InternalLogging.throwInternal(LoggingSeverity.WARNING,\r\n                    _InternalMessageId.SetAuthContextFailed,\r\n                    \"Clearing auth user context failed. \" + Util.getExceptionName(e),\r\n                    { exception: Util.dump(e) },\r\n                    true);\r\n            }\r\n        }\r\n\r\n        /**\r\n        * In case of CORS exceptions - construct an exception manually.\r\n        * See this for more info: http://stackoverflow.com/questions/5913978/cryptic-script-error-reported-in-javascript-in-chrome-and-firefox\r\n        */\r\n        private SendCORSException(properties: any) {\r\n            var exceptionData = Microsoft.ApplicationInsights.Telemetry.Exception.CreateSimpleException(\r\n                \"Script error.\",\r\n                \"Error\", \"unknown\", \"unknown\",\r\n                \"The browser's same-origin policy prevents us from getting the details of this exception. Consider using 'crossorigin' attribute.\",\r\n                0, null);\r\n            exceptionData.properties = properties;\r\n\r\n            var data = new ApplicationInsights.Telemetry.Common.Data<ApplicationInsights.Telemetry.Exception>(Telemetry.Exception.dataType, exceptionData);\r\n            var envelope = new Telemetry.Common.Envelope(data, Telemetry.Exception.envelopeType);\r\n            this.context.track(envelope);\r\n        }\r\n\r\n        /**\r\n         * The custom error handler for Application Insights\r\n         * @param {string} message - The error message\r\n         * @param {string} url - The url where the error was raised\r\n         * @param {number} lineNumber - The line number where the error was raised\r\n         * @param {number} columnNumber - The column number for the line where the error was raised\r\n         * @param {Error}  error - The Error object\r\n         */\r\n        public _onerror(message: string, url: string, lineNumber: number, columnNumber: number, error: Error) {\r\n            try {\r\n                var properties = { url: url ? url : document.URL };\r\n\r\n                if (Util.isCrossOriginError(message, url, lineNumber, columnNumber, error)) {\r\n                    this.SendCORSException(properties);\r\n                } else {\r\n                    if (!Util.isError(error)) {\r\n                        var stack = \"window.onerror@\" + properties.url + \":\" + lineNumber + \":\" + (columnNumber || 0);\r\n                        error = new Error(message);\r\n                        error[\"stack\"] = stack;\r\n                    }\r\n                    this.trackException(error, null, properties);\r\n                }\r\n            } catch (exception) {\r\n                var errorString =\r\n                    error ? (error.name + \", \" + error.message) : \"null\";\r\n\r\n                var exceptionDump: string = Util.dump(exception);\r\n\r\n                _InternalLogging.throwInternal(LoggingSeverity.CRITICAL,\r\n                    _InternalMessageId.ExceptionWhileLoggingError,\r\n                    \"_onerror threw exception while logging error, error will not be collected: \" + Util.getExceptionName(exception),\r\n                    { exception: exceptionDump, errorString: errorString });\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n     * Used to record timed events and page views.\r\n     */\r\n    class Timing {\r\n        private _name;\r\n        private _action: (ITimingDetail, number) => void;\r\n        private _events: {\r\n            [key: string]: number;\r\n        };\r\n\r\n        constructor(name: string) {\r\n            this._name = name;\r\n            this._events = {};\r\n        }\r\n\r\n        public start(name: string) {\r\n            if (typeof this._events[name] !== \"undefined\") {\r\n                _InternalLogging.throwInternal(\r\n                    LoggingSeverity.WARNING, _InternalMessageId.StartCalledMoreThanOnce, \"start was called more than once for this event without calling stop.\",\r\n                    { name: this._name, key: name }, true);\r\n            }\r\n\r\n            this._events[name] = +new Date;\r\n        }\r\n\r\n        public stop(name: string, url: string, properties?: Object, measurements?: Object) {\r\n            var start = this._events[name];\r\n            if (isNaN(start)) {\r\n                _InternalLogging.throwInternal(\r\n                    LoggingSeverity.WARNING, _InternalMessageId.StopCalledWithoutStart, \"stop was called without a corresponding start.\",\r\n                    { name: this._name, key: name }, true);\r\n            } else {\r\n                var end = +new Date;\r\n                var duration = Telemetry.PageViewPerformance.getDuration(start, end);\r\n                this.action(name, url, duration, properties, measurements);\r\n            }\r\n\r\n            delete this._events[name];\r\n            this._events[name] = undefined;\r\n        }\r\n\r\n        public action: (name?: string, url?: string, duration?: number, properties?: Object, measurements?: Object) => void;\r\n    }\r\n}\r\n","module Microsoft.ApplicationInsights {\r\n    \"use strict\";\r\n\r\n    /* Data loss analyzer is disabled by default.\r\n     * Uncomment code in Sender, SendBuffer and unit tests if you want to enable it\r\n     */\r\n    export class DataLossAnalyzer {\r\n        static enabled = false;\r\n        static appInsights: Microsoft.ApplicationInsights.AppInsights;\r\n        static issuesReportedForThisSession;\r\n        static itemsRestoredFromSessionBuffer: number = 0;\r\n        static LIMIT_PER_SESSION = 10;\r\n        static ITEMS_QUEUED_KEY = \"AI_itemsQueued\";\r\n        static ISSUES_REPORTED_KEY = \"AI_lossIssuesReported\";\r\n\r\n        static reset() {\r\n            if (DataLossAnalyzer.isEnabled()) {\r\n                Util.setSessionStorage(DataLossAnalyzer.ITEMS_QUEUED_KEY, \"0\");\r\n                Util.setSessionStorage(DataLossAnalyzer.ISSUES_REPORTED_KEY, \"0\");\r\n                DataLossAnalyzer.itemsRestoredFromSessionBuffer = 0;\r\n            }\r\n        }\r\n\r\n        private static isEnabled(): boolean {\r\n            return DataLossAnalyzer.enabled &&\r\n                DataLossAnalyzer.appInsights != null &&\r\n                DataLossAnalyzer.appInsights.context._sender._XMLHttpRequestSupported &&\r\n                Util.canUseSessionStorage()\r\n        }\r\n\r\n        static getIssuesReported(): number {\r\n            var result =\r\n                (!DataLossAnalyzer.isEnabled() || isNaN(+Util.getSessionStorage(DataLossAnalyzer.ISSUES_REPORTED_KEY))) ?\r\n                    0 :\r\n                    +Util.getSessionStorage(DataLossAnalyzer.ISSUES_REPORTED_KEY);\r\n\r\n            return result;\r\n        }\r\n\r\n        static incrementItemsQueued() {\r\n            try {\r\n                if (DataLossAnalyzer.isEnabled()) {\r\n                    var itemsQueued: number = DataLossAnalyzer.getNumberOfLostItems();\r\n                    ++itemsQueued;\r\n                    Util.setSessionStorage(DataLossAnalyzer.ITEMS_QUEUED_KEY, itemsQueued.toString());\r\n                }\r\n            } catch (e) { }\r\n        }\r\n\r\n        static decrementItemsQueued(countOfItemsSentSuccessfully: number) {\r\n            try {\r\n                if (DataLossAnalyzer.isEnabled()) {\r\n                    var itemsQueued: number = DataLossAnalyzer.getNumberOfLostItems();\r\n                    itemsQueued -= countOfItemsSentSuccessfully;\r\n                    if (itemsQueued < 0) itemsQueued = 0;\r\n                    Util.setSessionStorage(DataLossAnalyzer.ITEMS_QUEUED_KEY, itemsQueued.toString());\r\n                }\r\n            } catch (e) { }\r\n        }\r\n\r\n        static getNumberOfLostItems(): number {\r\n            var result: number = 0;\r\n            try {\r\n                if (DataLossAnalyzer.isEnabled()) {\r\n                    result = isNaN(+Util.getSessionStorage(DataLossAnalyzer.ITEMS_QUEUED_KEY)) ?\r\n                        0 :\r\n                        +Util.getSessionStorage(DataLossAnalyzer.ITEMS_QUEUED_KEY);\r\n                }\r\n            } catch (e) {\r\n                result = 0;\r\n            }\r\n\r\n            return result;\r\n        }\r\n\r\n        static reportLostItems() {\r\n            try {\r\n                if (DataLossAnalyzer.isEnabled() &&\r\n                    DataLossAnalyzer.getIssuesReported() < DataLossAnalyzer.LIMIT_PER_SESSION &&\r\n                    DataLossAnalyzer.getNumberOfLostItems() > 0) {\r\n\r\n                    var lostItems = DataLossAnalyzer.getNumberOfLostItems() - DataLossAnalyzer.itemsRestoredFromSessionBuffer;\r\n\r\n                    DataLossAnalyzer.appInsights.trackTrace(\r\n                        \"AI (Internal): Internal report DATALOSS:\\\"\" + lostItems + \"\\\"\",\r\n                        null);\r\n                    DataLossAnalyzer.appInsights.flush();\r\n\r\n                    var issuesReported: number = DataLossAnalyzer.getIssuesReported();\r\n                    ++issuesReported;\r\n                    Util.setSessionStorage(DataLossAnalyzer.ISSUES_REPORTED_KEY, issuesReported.toString());\r\n                }\r\n            } catch (e) {\r\n                _InternalLogging.throwInternal(\r\n                    LoggingSeverity.CRITICAL,\r\n                    _InternalMessageId.FailedToReportDataLoss,\r\n                    \"Failed to report data loss: \" + Util.getExceptionName(e),\r\n                    { exception: Util.dump(e) });\r\n            }\r\n            finally {\r\n                try {\r\n                    DataLossAnalyzer.reset();\r\n                } catch (e) { }\r\n            }\r\n        }\r\n    }\r\n}\r\n","/// <reference path=\"AppInsights.ts\" />\r\n\r\nmodule Microsoft.ApplicationInsights {\r\n    \"use strict\";\r\n\r\n    export interface Snippet {\r\n        queue: Array<() => void>;\r\n        config: IConfig;\r\n    }\r\n\r\n    export class Initialization {\r\n        public snippet: Snippet;\r\n        public config: IConfig;\r\n\r\n        constructor(snippet: Snippet) {\r\n            // initialize the queue and config in case they are undefined\r\n            snippet.queue = snippet.queue || [];\r\n            var config: IConfig = snippet.config || <any>{};\r\n\r\n            // ensure instrumentationKey is specified\r\n            if (config && !config.instrumentationKey) {\r\n                config = <any>snippet;\r\n\r\n                // check for legacy instrumentation key\r\n                if (config[\"iKey\"]) {\r\n                    Microsoft.ApplicationInsights.Version = \"0.10.0.0\";\r\n                    config.instrumentationKey = config[\"iKey\"];\r\n                } else if (config[\"applicationInsightsId\"]) {\r\n                    Microsoft.ApplicationInsights.Version = \"0.7.2.0\";\r\n                    config.instrumentationKey = config[\"applicationInsightsId\"];\r\n                } else {\r\n                    throw new Error(\"Cannot load Application Insights SDK, no instrumentationKey was provided.\");\r\n                }\r\n            }\r\n\r\n            // set default values\r\n            config = Initialization.getDefaultConfig(config);\r\n\r\n            this.snippet = snippet;\r\n            this.config = config;\r\n        }\r\n\r\n        // note: these are split into methods to enable unit tests\r\n        public loadAppInsights() {\r\n\r\n            // initialize global instance of appInsights\r\n            var appInsights = new Microsoft.ApplicationInsights.AppInsights(this.config);\r\n\r\n            // implement legacy version of trackPageView for 0.10<\r\n            if (this.config[\"iKey\"]) {\r\n                var originalTrackPageView = appInsights.trackPageView;\r\n                appInsights.trackPageView = (pagePath?: string, properties?: Object, measurements?: Object) => {\r\n                    originalTrackPageView.apply(appInsights, [null, pagePath, properties, measurements]);\r\n                }\r\n            }\r\n\r\n            // implement legacy pageView interface if it is present in the snippet\r\n            var legacyPageView = \"logPageView\";\r\n            if (typeof this.snippet[legacyPageView] === \"function\") {\r\n                appInsights[legacyPageView] = (pagePath?: string, properties?: Object, measurements?: Object) => {\r\n                    appInsights.trackPageView(null, pagePath, properties, measurements);\r\n                }\r\n            }\r\n\r\n            // implement legacy event interface if it is present in the snippet\r\n            var legacyEvent = \"logEvent\";\r\n            if (typeof this.snippet[legacyEvent] === \"function\") {\r\n                appInsights[legacyEvent] = (name: string, properties?: Object, measurements?: Object) => {\r\n                    appInsights.trackEvent(name, properties, measurements);\r\n                }\r\n            }\r\n\r\n            return appInsights;\r\n        }\r\n\r\n        public emptyQueue() {\r\n\r\n            // call functions that were queued before the main script was loaded\r\n            try {\r\n                if (Microsoft.ApplicationInsights.Util.isArray(this.snippet.queue)) {\r\n                    // note: do not check length in the for-loop conditional in case something goes wrong and the stub methods are not overridden.\r\n                    var length = this.snippet.queue.length;\r\n                    for (var i = 0; i < length; i++) {\r\n                        var call = this.snippet.queue[i];\r\n                        call();\r\n                    }\r\n\r\n                    this.snippet.queue = undefined;\r\n                    delete this.snippet.queue;\r\n                }\r\n            } catch (exception) {\r\n                var properties: any = {};\r\n                if (exception && typeof exception.toString === \"function\") {\r\n                    properties.exception = exception.toString();\r\n                }\r\n                Microsoft.ApplicationInsights._InternalLogging.throwInternal(\r\n                    LoggingSeverity.WARNING,\r\n                    _InternalMessageId.FailedToSendQueuedTelemetry,\r\n                    \"Failed to send queued telemetry\",\r\n                    properties);\r\n            }\r\n        }\r\n\r\n        public pollInteralLogs(appInsightsInstance: AppInsights) {\r\n            return setInterval(() => {\r\n                var queue: Array<_InternalLogMessage> = Microsoft.ApplicationInsights._InternalLogging.queue;\r\n                var length = queue.length;\r\n                for (var i = 0; i < length; i++) {\r\n                    appInsightsInstance.trackTrace(queue[i].message);\r\n                }\r\n                queue.length = 0;\r\n            }, this.config.diagnosticLogInterval);\r\n        }\r\n\r\n        public addHousekeepingBeforeUnload(appInsightsInstance: AppInsights): void {\r\n            // Add callback to push events when the user navigates away\r\n\r\n            if (!appInsightsInstance.config.disableFlushOnBeforeUnload && ('onbeforeunload' in window)) {\r\n                var performHousekeeping = function () {\r\n                    // Adds the ability to flush all data before the page unloads.\r\n                    // Note: This approach tries to push an async request with all the pending events onbeforeunload.\r\n                    // Firefox does not respect this.Other browsers DO push out the call with < 100% hit rate.\r\n                    // Telemetry here will help us analyze how effective this approach is.\r\n                    // Another approach would be to make this call sync with a acceptable timeout to reduce the \r\n                    // impact on user experience.\r\n                    appInsightsInstance.context._sender.triggerSend();\r\n\r\n                    // Back up the current session to local storage\r\n                    // This lets us close expired sessions after the cookies themselves expire\r\n                    appInsightsInstance.context._sessionManager.backup();\r\n                };\r\n\r\n                if (!Microsoft.ApplicationInsights.Util.addEventHandler('beforeunload', performHousekeeping)) {\r\n                    Microsoft.ApplicationInsights._InternalLogging.throwInternal(\r\n                        Microsoft.ApplicationInsights.LoggingSeverity.CRITICAL,\r\n                        Microsoft.ApplicationInsights._InternalMessageId.FailedToAddHandlerForOnBeforeUnload,\r\n                        'Could not add handler for beforeunload');\r\n                }\r\n            }\r\n        }\r\n\r\n        public static getDefaultConfig(config?: IConfig): IConfig {\r\n            if (!config) {\r\n                config = <IConfig>{};\r\n            }\r\n\r\n            // set default values\r\n            config.endpointUrl = config.endpointUrl || \"https://dc.services.visualstudio.com/v2/track\";\r\n            config.sessionRenewalMs = 30 * 60 * 1000;\r\n            config.sessionExpirationMs = 24 * 60 * 60 * 1000;\r\n            config.maxBatchSizeInBytes = config.maxBatchSizeInBytes > 0 ? config.maxBatchSizeInBytes : 102400; // 100kb\r\n            config.maxBatchInterval = !isNaN(config.maxBatchInterval) ? config.maxBatchInterval : 15000;\r\n            config.enableDebug = Util.stringToBoolOrDefault(config.enableDebug);\r\n            config.disableExceptionTracking = Util.stringToBoolOrDefault(config.disableExceptionTracking);\r\n            config.disableTelemetry = Util.stringToBoolOrDefault(config.disableTelemetry);\r\n            config.verboseLogging = Util.stringToBoolOrDefault(config.verboseLogging);\r\n            config.emitLineDelimitedJson = Util.stringToBoolOrDefault(config.emitLineDelimitedJson);\r\n            config.diagnosticLogInterval = config.diagnosticLogInterval || 10000;\r\n            config.autoTrackPageVisitTime = Util.stringToBoolOrDefault(config.autoTrackPageVisitTime);\r\n\r\n            if (isNaN(config.samplingPercentage) || config.samplingPercentage <= 0 || config.samplingPercentage >= 100) {\r\n                config.samplingPercentage = 100;\r\n            }\r\n\r\n            config.disableAjaxTracking = Util.stringToBoolOrDefault(config.disableAjaxTracking)\r\n            config.maxAjaxCallsPerView = !isNaN(config.maxAjaxCallsPerView) ? config.maxAjaxCallsPerView : 500;\r\n          \r\n            config.isBeaconApiDisabled = Util.stringToBoolOrDefault(config.isBeaconApiDisabled, true);\r\n            config.disableCorrelationHeaders = Util.stringToBoolOrDefault(config.disableCorrelationHeaders);\r\n            config.disableFlushOnBeforeUnload = Util.stringToBoolOrDefault(config.disableFlushOnBeforeUnload);\r\n            config.enableSessionStorageBuffer = Util.stringToBoolOrDefault(config.enableSessionStorageBuffer, true);\r\n            config.isRetryDisabled = Util.stringToBoolOrDefault(config.isRetryDisabled);\r\n            config.isCookieUseDisabled = Util.stringToBoolOrDefault(config.isCookieUseDisabled);\r\n            config.isStorageUseDisabled = Util.stringToBoolOrDefault(config.isStorageUseDisabled);\r\n            config.isBrowserLinkTrackingEnabled = Util.stringToBoolOrDefault(config.isBrowserLinkTrackingEnabled);\r\n \r\n            return config;\r\n        }\r\n    }\r\n}\r\n","/// <reference path=\"Initialization.ts\" />\r\n\r\nmodule Microsoft.ApplicationInsights {\r\n    \"use strict\";\r\n\r\n    try {\r\n        // only initialize if we are running in a browser that supports JSON serialization (ie7<, node.js, cordova)\r\n        if (typeof window !== \"undefined\" && typeof JSON !== \"undefined\") {\r\n            // get snippet or initialize to an empty object\r\n            var aiName = \"appInsights\";\r\n    \r\n            if (window[aiName] === undefined) {\r\n                // if no snippet is present, initialize default values\r\n                Microsoft.ApplicationInsights.AppInsights.defaultConfig = Microsoft.ApplicationInsights.Initialization.getDefaultConfig();\r\n            } else {\r\n                // this is the typical case for browser+snippet\r\n                var snippet: Microsoft.ApplicationInsights.Snippet = window[aiName] || <any>{};\r\n    \r\n                // overwrite snippet with full appInsights\r\n                var init = new Microsoft.ApplicationInsights.Initialization(snippet);\r\n                var appInsightsLocal = init.loadAppInsights();\r\n\r\n                // apply full appInsights to the global instance that was initialized in the snippet\r\n                for (var field in appInsightsLocal) {\r\n                    snippet[field] = appInsightsLocal[field];\r\n                }\r\n    \r\n                init.emptyQueue();\r\n    \r\n                init.pollInteralLogs(appInsightsLocal);\r\n    \r\n                init.addHousekeepingBeforeUnload(appInsightsLocal);\r\n            }\r\n        }\r\n    } catch (e) {\r\n        Microsoft.ApplicationInsights._InternalLogging.warnToConsole('Failed to initialize AppInsights JS SDK: ' + e.message);\r\n    }\r\n}\r\n"]}