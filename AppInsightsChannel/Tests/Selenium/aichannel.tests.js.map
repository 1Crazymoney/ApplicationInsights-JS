{"version":3,"file":"aichannel.tests.js","sourceRoot":"","sources":["../TestFramework/Assert.ts","../TestFramework/TestCase.ts","../TestFramework/TestClass.ts","../TestFramework/PollingAssert.ts","../TestFramework/Common.ts","../../Interfaces.ts","../../SendBuffer.ts","../../EnvelopeCreator.ts","../../TelemetryValidation/ITypeValidator.ts","../../TelemetryValidation/EventValidator.ts","../../TelemetryValidation/TraceValidator.ts","../../TelemetryValidation/ExceptionValidator.ts","../../TelemetryValidation/MetricValidator.ts","../../TelemetryValidation/PageViewPerformanceValidator.ts","../../TelemetryValidation/PageViewValidator.ts","../../TelemetryValidation/RemoteDepdencyValidator.ts","../../Serializer.ts","../../Sender.ts","../CheckinTests/aichannel.tests.ts","checkinTests.ts"],"names":[],"mappings":"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","sourcesContent":["/// <reference path=\"../External/qunit.d.ts\" />\r\n\r\n/** Wrapper around QUnit asserts. This class has two purposes:\r\n * - Make Assertion methods easy to discover.\r\n * - Make them consistent with XUnit assertions in the order of the actual and expected parameter values.\r\n */\r\nclass Assert {\r\n    /**\r\n    * A deep recursive comparison assertion, working on primitive types, arrays, objects, \r\n    * regular expressions, dates and functions.\r\n    *\r\n    * The deepEqual() assertion can be used just like equal() when comparing the value of \r\n    * objects, such that { key: value } is equal to { key: value }. For non-scalar values, \r\n    * identity will be disregarded by deepEqual.\r\n    *\r\n    * @param expected Known comparison value\r\n    * @param actual Object or Expression being tested\r\n    * @param message A short description of the assertion\r\n    */\r\n    public static deepEqual(expected: any, actual: any, message?: string): any {\r\n        return deepEqual(actual, expected, message);\r\n    }\r\n\r\n    /** \r\n    * A non-strict comparison assertion, roughly equivalent to JUnit assertEquals.\r\n    *\r\n    * The equal assertion uses the simple comparison operator (==) to compare the actual \r\n    * and expected arguments. When they are equal, the assertion passes: any; otherwise, it fails. \r\n    * When it fails, both actual and expected values are displayed in the test result, \r\n    * in addition to a given message.\r\n    * \r\n    * @param expected Known comparison value\r\n    * @param actual Expression being tested\r\n    * @param message A short description of the assertion\r\n    */\r\n    public static equal(expected: any, actual: any, message?: string): any {\r\n        return equal(actual, expected, message);\r\n    }\r\n\r\n    /**\r\n    * An inverted deep recursive comparison assertion, working on primitive types, \r\n    * arrays, objects, regular expressions, dates and functions.\r\n    *\r\n    * The notDeepEqual() assertion can be used just like equal() when comparing the \r\n    * value of objects, such that { key: value } is equal to { key: value }. For non-scalar \r\n    * values, identity will be disregarded by notDeepEqual.\r\n    * \r\n    * @param expected Known comparison value\r\n    * @param actual Object or Expression being tested\r\n    * @param message A short description of the assertion\r\n    */\r\n    public static notDeepEqual(expected: any, actual: any, message?: string): any {\r\n        return notDeepEqual(actual, expected, message);\r\n    }\r\n\r\n    /**\r\n    * A non-strict comparison assertion, checking for inequality.\r\n    *\r\n    * The notEqual assertion uses the simple inverted comparison operator (!=) to compare \r\n    * the actual and expected arguments. When they aren't equal, the assertion passes: any; \r\n    * otherwise, it fails. When it fails, both actual and expected values are displayed \r\n    * in the test result, in addition to a given message.\r\n    * \r\n    * @param expected Known comparison value\r\n    * @param actual Expression being tested\r\n    * @param message A short description of the assertion\r\n    */\r\n    public static notEqual(expected: any, actual: any, message?: string): any {\r\n        return notEqual(actual, expected, message);\r\n    }\r\n\r\n    public static notPropEqual(expected: any, actual: any, message?: string): any {\r\n        return notPropEqual(actual, expected, message);\r\n    }\r\n\r\n    public static propEqual(expected: any, actual: any, message?: string): any {\r\n        return propEqual(actual, expected, message);\r\n    }\r\n\r\n    /**\r\n    * A non-strict comparison assertion, checking for inequality.\r\n    *\r\n    * The notStrictEqual assertion uses the strict inverted comparison operator (!==) \r\n    * to compare the actual and expected arguments. When they aren't equal, the assertion \r\n    * passes: any; otherwise, it fails. When it fails, both actual and expected values are \r\n    * displayed in the test result, in addition to a given message.\r\n    * \r\n    * @param expected Known comparison value\r\n    * @param actual Expression being tested\r\n    * @param message A short description of the assertion\r\n    */\r\n    public static notStrictEqual(expected: any, actual: any, message?: string): any {\r\n        return notStrictEqual(actual, expected, message);\r\n    }\r\n\r\n    /**\r\n    * A boolean assertion, equivalent to CommonJS's assert.ok() and JUnit's assertTrue(). \r\n    * Passes if the first argument is truthy.\r\n    *\r\n    * The most basic assertion in QUnit, ok() requires just one argument. If the argument \r\n    * evaluates to true, the assertion passes; otherwise, it fails. If a second message \r\n    * argument is provided, it will be displayed in place of the result.\r\n    * \r\n    * @param state Expression being tested\r\n    * @param message A short description of the assertion\r\n    */\r\n    public static ok(state: any, message?: string): any {\r\n        return ok(state, message);\r\n    }\r\n\r\n    /**\r\n    * A strict type and value comparison assertion.\r\n    *\r\n    * The strictEqual() assertion provides the most rigid comparison of type and value with \r\n    * the strict equality operator (===)\r\n    * \r\n    * @param expected Known comparison value\r\n    * @param actual Expression being tested\r\n    * @param message A short description of the assertion\r\n    */\r\n    public static strictEqual(expected: any, actual: any, message?: string): any {\r\n        return strictEqual(actual, expected, message);\r\n    }\r\n\r\n    /**\r\n    * Assertion to test if a callback throws an exception when run.\r\n    * \r\n    * When testing code that is expected to throw an exception based on a specific set of \r\n    * circumstances, use throws() to catch the error object for testing and comparison.\r\n    * \r\n    * @param block Function to execute\r\n    * @param expected Error Object to compare\r\n    * @param message A short description of the assertion\r\n    */\r\n    public static throws(block: () => any, expected: any, message?: string): any;\r\n\r\n    /**\r\n    * @param block Function to execute\r\n    * @param message A short description of the assertion\r\n    */\r\n    public static throws(block: () => any, message?: string): any;\r\n\r\n    public static throws(block: () => any, expected?: any, message?: string): any {\r\n        return throws(block, expected, message);\r\n    }\r\n}","\r\n/** Defines a test case */\r\nclass TestCase {\r\n    /** Name to use for the test case */\r\n    public name: string;\r\n\r\n    /** Test case method */\r\n    public test: () => void;\r\n}\r\n\r\n\r\n/** Defines a test case */\r\ninterface TestCaseAsync {\r\n    /** Name to use for the test case */\r\n    name: string;\r\n\r\n    /** time to wait after pre before invoking post and calling start() */\r\n    stepDelay: number;\r\n\r\n    /** async steps */\r\n    steps: Array<() => void>;\r\n}","/// <reference path=\"../External/sinon.d.ts\" />\r\n/// <reference path=\"../External/qunit.d.ts\" />\r\n/// <reference path=\"Assert.ts\" />\r\n/// <reference path=\"./TestCase.ts\"/>\r\n\r\nclass TestClass {\r\n\r\n    constructor(name?: string) {\r\n        QUnit.module(name);\r\n    }\r\n\r\n    public static isPollingStepFlag = \"isPollingStep\";\r\n\r\n    /** The instance of the currently running suite. */\r\n    public static currentTestClass: TestClass;\r\n\r\n    /** Turns on/off sinon's syncronous implementation of setTimeout. On by default. */\r\n    public useFakeTimers: boolean = true;\r\n\r\n    /** Turns on/off sinon's fake implementation of XMLHttpRequest. On by default. */\r\n    public useFakeServer: boolean = true;\r\n\r\n    /** Method called before the start of each test method */\r\n    public testInitialize() {\r\n    }\r\n\r\n    /** Method called after each test method has completed */\r\n    public testCleanup() {\r\n    }\r\n\r\n    /** Method in which test class intances should call this.testCase(...) to register each of this suite's tests. */\r\n    public registerTests() {\r\n    }\r\n\r\n    /** Register an async Javascript unit testcase. */\r\n    public testCaseAsync(testInfo: TestCaseAsync) {\r\n        if (!testInfo.name) {\r\n            throw new Error(\"Must specify name in testInfo context in registerTestcase call\");\r\n        }\r\n\r\n        if (isNaN(testInfo.stepDelay)) {\r\n            throw new Error(\"Must specify 'stepDelay' period between pre and post\");\r\n        }\r\n\r\n        if (!testInfo.steps) {\r\n            throw new Error(\"Must specify 'steps' to take asynchronously\");\r\n        }\r\n\r\n        // Create a wrapper around the test method so we can do test initilization and cleanup.\r\n        var testMethod = (assert) => {\r\n            var done = assert.async();\r\n\r\n            // Save off the instance of the currently running suite.\r\n            TestClass.currentTestClass = this;\r\n\r\n            // Run the test.\r\n            try {\r\n                this._testStarting();\r\n\r\n                var steps = testInfo.steps;\r\n                var trigger = () => {\r\n                    if (steps.length) {\r\n                        var step = steps.shift();\r\n\r\n                        // The callback which activates the next test step. \r\n                        var nextTestStepTrigger = () => {\r\n                            setTimeout(() => {\r\n                                trigger();\r\n                            }, testInfo.stepDelay);\r\n                        };\r\n\r\n                        // There 2 types of test steps - simple and polling.\r\n                        // Upon completion of the simple test step the next test step will be called.\r\n                        // In case of polling test step the next test step is passed to the polling test step, and\r\n                        // it is responsibility of the polling test step to call the next test step.\r\n                        try {\r\n                            if (step[TestClass.isPollingStepFlag]) {\r\n                                step.call(this, nextTestStepTrigger);\r\n                            } else {\r\n                                step.call(this);\r\n                                nextTestStepTrigger.call(this);\r\n                            }\r\n                        } catch (e) {\r\n                            this._testCompleted();\r\n                            Assert.ok(false, e.toString());\r\n\r\n                            // done is QUnit callback indicating the end of the test\r\n                            done();\r\n\r\n                            return;\r\n                        }\r\n                    } else {\r\n                        this._testCompleted();\r\n\r\n                        // done is QUnit callback indicating the end of the test\r\n                        done();\r\n                    }\r\n                };\r\n\r\n                trigger();\r\n            } catch (ex) {\r\n                Assert.ok(false, \"Unexpected Exception: \" + ex);\r\n                this._testCompleted(true);\r\n\r\n                // done is QUnit callback indicating the end of the test\r\n                done();\r\n            }\r\n        };\r\n\r\n        // Register the test with QUnit\r\n        QUnit.test(testInfo.name, testMethod);\r\n    }\r\n\r\n    /** Register a Javascript unit testcase. */\r\n    public testCase(testInfo: TestCase) {\r\n        if (!testInfo.name) {\r\n            throw new Error(\"Must specify name in testInfo context in registerTestcase call\");\r\n        }\r\n\r\n        if (!testInfo.test) {\r\n            throw new Error(\"Must specify 'test' method in testInfo context in registerTestcase call\");\r\n        }\r\n\r\n        // Create a wrapper around the test method so we can do test initilization and cleanup.\r\n        var testMethod = () => {\r\n            // Save off the instance of the currently running suite.\r\n            TestClass.currentTestClass = this;\r\n\r\n            // Run the test.\r\n            try {\r\n                this._testStarting();\r\n\r\n                testInfo.test.call(this);\r\n\r\n                this._testCompleted();\r\n            }\r\n            catch (ex) {\r\n                Assert.ok(false, \"Unexpected Exception: \" + ex);\r\n                this._testCompleted(true);\r\n            }\r\n        };\r\n\r\n        // Register the test with QUnit\r\n        test(testInfo.name, testMethod);\r\n    }\r\n\r\n    /** Called when the test is starting. */\r\n    private _testStarting() {\r\n        // Initialize the sandbox similar to what is done in sinon.js \"test()\" override. See note on class.\r\n        var config = (<any>sinon).getConfig(sinon.config);\r\n        config.useFakeTimers = this.useFakeTimers;\r\n        config.useFakeServer = this.useFakeServer;\r\n\r\n        config.injectInto = config.injectIntoThis && this || config.injectInto;\r\n        this.sandbox = sinon.sandbox.create(config);\r\n        this.server = this.sandbox.server;\r\n\r\n        // Allow the derived class to perform test initialization.\r\n        this.testInitialize();\r\n    }\r\n\r\n    /** Called when the test is completed. */\r\n    private _testCompleted(failed?: boolean) {\r\n        if (failed) {\r\n            // Just cleanup the sandbox since the test has already failed.\r\n            this.sandbox.restore();\r\n        }\r\n        else {\r\n            // Verify the sandbox and restore.\r\n            (<any>this.sandbox).verifyAndRestore();\r\n        }\r\n\r\n        this.testCleanup();\r\n\r\n        // Clear the instance of the currently running suite.\r\n        TestClass.currentTestClass = null;\r\n    }\r\n\r\n    /**** Sinon methods and properties ***/\r\n\r\n    // These methods and properties are injected by Sinon and will override the implementation here.\r\n    // These are here purely to make typescript happy.\r\n    public clock: SinonFakeTimers;\r\n    public server: SinonFakeServer;\r\n    public sandbox: SinonSandbox;\r\n\r\n    /** Creates an anonymous function that records arguments, this value, exceptions and return values for all calls. */\r\n    public spy(): SinonSpy;\r\n    /** Spies on the provided function */\r\n    public spy(funcToWrap: Function): SinonSpy;\r\n    /** Creates a spy for object.methodName and replaces the original method with the spy. The spy acts exactly like the original method in all cases. The original method can be restored by calling object.methodName.restore(). The returned spy is the function object which replaced the original method. spy === object.method. */\r\n    public spy(object: any, methodName: string, func?: Function): SinonSpy;\r\n    public spy(...args: any[]): SinonSpy { return null; }\r\n\r\n    /** Creates an anonymous stub function. */\r\n    public stub(): SinonStub;\r\n    /** Stubs all the object's methods. */\r\n    public stub(object: any): SinonStub;\r\n    /** Replaces object.methodName with a func, wrapped in a spy. As usual, object.methodName.restore(); can be used to restore the original method. */\r\n    public stub(object: any, methodName: string, func?: Function): SinonStub;\r\n    public stub(...args: any[]): SinonStub { return null; }\r\n\r\n    /** Creates a mock for the provided object.Does not change the object, but returns a mock object to set expectations on the object's methods. */\r\n    public mock(object: any): SinonMock { return null; }\r\n\r\n    /**** end: Sinon methods and properties ***/\r\n\r\n    /** Sends a JSON response to the provided request.\r\n     * @param request The request to respond to.\r\n     * @param data Data to respond with.\r\n     * @param errorCode Optional error code to send with the request, default is 200\r\n    */\r\n    public sendJsonResponse(request: SinonFakeXMLHttpRequest, data: any, errorCode?: number) {\r\n        if (errorCode === undefined) {\r\n            errorCode = 200;\r\n        }\r\n\r\n        request.respond(\r\n            errorCode,\r\n            { \"Content-Type\": \"application/json\" },\r\n            JSON.stringify(data));\r\n    }\r\n\r\n    protected setUserAgent(userAgent: string) {\r\n        Object.defineProperty(window.navigator, 'userAgent',\r\n            {\r\n                configurable: true,\r\n                get: function () {\r\n                    return userAgent;\r\n                }\r\n            });\r\n    }\r\n}\r\n\r\n// Configure Sinon\r\nsinon.assert.fail = function (msg?) {\r\n    Assert.ok(false, msg);\r\n};\r\n\r\nsinon.assert.pass = function (assertion) {\r\n    Assert.ok(assertion, \"sinon assert\");\r\n};\r\n\r\nsinon.config = {\r\n    injectIntoThis: true,\r\n    injectInto: null,\r\n    properties: [\"spy\", \"stub\", \"mock\", \"clock\", \"sandbox\"],\r\n    useFakeTimers: true,\r\n    useFakeServer: true\r\n};\r\n","/// <reference path=\"../External/qunit.d.ts\" />\r\n/// <reference path=\"TestClass.ts\" />\r\n\r\nclass PollingAssert {\r\n    /**\r\n    * Starts polling assertion function for a period of time after which it's considered failed.\r\n    * @param {() => boolean} assertionFunctionReturnsBoolean - funciton returning true if condition passes and false if condition fails. Assertion will be done on this function's result.\r\n    * @param {string} assertDescription - message shown with the assertion\r\n    * @param {number} timeoutSeconds - timeout in seconds after which assertion fails\r\n    * @param {number} pollIntervalMs - polling interval in milliseconds\r\n    * @returns {(nextTestStep) => void} callback which will be invoked by the TestClass\r\n    */\r\n    public static createPollingAssert(assertionFunctionReturnsBoolean: () => boolean, assertDescription: string, timeoutSeconds: number = 30, pollIntervalMs: number = 500): (nextTestStep) => void {\r\n        var pollingAssert = (nextTestStep) => {\r\n            var timeout = new Date(new Date().getTime() + timeoutSeconds * 1000);\r\n            var polling = () => {\r\n                if (assertionFunctionReturnsBoolean.apply(this)) {\r\n                    Assert.ok(true, assertDescription);\r\n                    nextTestStep();\r\n                } else if (timeout < new Date()) {\r\n                    Assert.ok(false, \"assert didn't succeed for \" + timeout + \" seconds: \" + assertDescription);\r\n                    nextTestStep();\r\n                } else {\r\n                    setTimeout(polling, pollIntervalMs);\r\n                }\r\n            }\r\n            setTimeout(polling, pollIntervalMs);\r\n        }\r\n\r\n        pollingAssert[TestClass.isPollingStepFlag] = true;\r\n\r\n        return pollingAssert;\r\n    }\r\n}\r\n","/// <reference path=\"../External/sinon.d.ts\" />\r\n/// <reference path=\"../External/qunit.d.ts\" />\r\n/// <reference path=\"Assert.ts\" />\r\n/// <reference path=\"PollingAssert.ts\" />\r\n/// <reference path=\"TestClass.ts\" />\r\n/// <reference path=\"TestCase.ts\" />","export interface ISenderConfig {\r\n    /**\r\n     * The url to which payloads will be sent\r\n     */\r\n    endpointUrl: () => string;\r\n\r\n    /**\r\n    * The JSON format (normal vs line delimited). True means line delimited JSON.\r\n    */\r\n    emitLineDelimitedJson: () => boolean;\r\n\r\n    /**\r\n     * The maximum size of a batch in bytes\r\n     */\r\n    maxBatchSizeInBytes: () => number;\r\n\r\n    /**\r\n     * The maximum interval allowed between calls to batchInvoke\r\n     */\r\n    maxBatchInterval: () => number;\r\n\r\n    /**\r\n     * The master off switch.  Do not send any data if set to TRUE\r\n     */\r\n    disableTelemetry: () => boolean;\r\n\r\n    /**\r\n     * Store a copy of a send buffer in the session storage\r\n     */\r\n    enableSessionStorageBuffer: () => boolean;\r\n\r\n    /**\r\n     * Is retry handler disabled.\r\n     * If enabled, retry on 206 (partial success), 408 (timeout), 429 (too many requests), 500 (internal server error) and 503 (service unavailable).\r\n     */\r\n    isRetryDisabled: () => boolean;\r\n\r\n    isBeaconApiDisabled: () => boolean;\r\n}\r\n\r\nexport interface IBackendResponse {\r\n    /**\r\n     * Number of items received by the backend\r\n     */\r\n    itemsReceived: number;\r\n\r\n    /**\r\n     * Number of items succesfuly accepted by the backend\r\n     */\r\n    itemsAccepted: number;\r\n\r\n    /**\r\n     * List of errors for items which were not accepted\r\n     */\r\n    errors: IResponseError[];\r\n\r\n    /**\r\n     * App id returned by the backend - not necessary returned, but we don't need it with each response.\r\n     */\r\n    appId?: string;\r\n}\r\n\r\nexport interface XDomainRequest extends XMLHttpRequestEventTarget {\r\n    responseText: string;\r\n    send(payload: string);\r\n    open(method: string, url: string);\r\n}\r\n\r\nexport interface IResponseError {\r\n    index: number;\r\n    statusCode: number;\r\n    message: string;\r\n}","import { _InternalLogging, LoggingSeverity, _InternalMessageId, Util } from 'applicationinsights-common';\r\nimport { ISenderConfig } from './Interfaces';\r\n\r\nexport interface ISendBuffer {\r\n    /**\r\n     * Enqueue the payload\r\n     */\r\n    enqueue: (payload: string) => void;\r\n\r\n    /**\r\n     * Returns the number of elements in the buffer\r\n     */\r\n    count: () => number;\r\n\r\n    /**\r\n     * Clears the buffer\r\n     */\r\n    clear: () => void;\r\n\r\n    /**\r\n     * Returns items stored in the buffer\r\n     */\r\n    getItems: () => string[];\r\n\r\n    /**\r\n     * Build a batch of all elements in the payload array\r\n     */\r\n    batchPayloads: (payload: string[]) => string;\r\n\r\n    /**\r\n     * Moves items to the SENT_BUFFER.\r\n     * The buffer holds items which were sent, but we haven't received any response from the backend yet. \r\n     */\r\n    markAsSent: (payload: string[]) => void;\r\n\r\n    /**\r\n     * Removes items from the SENT_BUFFER. Should be called on successful response from the backend. \r\n     */\r\n    clearSent: (payload: string[]) => void;\r\n}\r\n\r\n/*\r\n * An array based send buffer. \r\n */\r\nexport class ArraySendBuffer implements ISendBuffer {\r\n    private _config: ISenderConfig;\r\n    private _buffer: string[];\r\n\r\n    constructor(config: ISenderConfig) {\r\n        this._config = config;\r\n\r\n        this._buffer = [];\r\n    }\r\n\r\n    public enqueue(payload: string) {\r\n        this._buffer.push(payload);\r\n    }\r\n\r\n    public count(): number {\r\n        return this._buffer.length;\r\n    }\r\n\r\n    public clear() {\r\n        this._buffer.length = 0;\r\n    }\r\n\r\n    public getItems(): string[] {\r\n        return this._buffer.slice(0);\r\n    }\r\n\r\n    public batchPayloads(payload: string[]): string {\r\n        if (payload && payload.length > 0) {\r\n            var batch = this._config.emitLineDelimitedJson() ?\r\n                payload.join(\"\\n\") :\r\n                \"[\" + payload.join(\",\") + \"]\";\r\n\r\n            return batch;\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    public markAsSent(payload: string[]) {\r\n        this.clear();\r\n    }\r\n\r\n    public clearSent(payload: string[]) {\r\n        // not supported\r\n    }\r\n}\r\n\r\n/*\r\n * Session storege buffer holds a copy of all unsent items in the browser session storage.\r\n */\r\nexport class SessionStorageSendBuffer implements ISendBuffer {\r\n    static BUFFER_KEY = \"AI_buffer\";\r\n    static SENT_BUFFER_KEY = \"AI_sentBuffer\";\r\n\r\n    // Maximum number of payloads stored in the buffer. If the buffer is full, new elements will be dropped. \r\n    static MAX_BUFFER_SIZE = 2000;\r\n    private _bufferFullMessageSent = false;\r\n\r\n    // An in-memory copy of the buffer. A copy is saved to the session storage on enqueue() and clear(). \r\n    // The buffer is restored in a constructor and contains unsent events from a previous page.\r\n    private _buffer: string[];\r\n    private _config: ISenderConfig;\r\n\r\n    constructor(config: ISenderConfig) {\r\n        this._config = config;\r\n\r\n        var bufferItems = this.getBuffer(SessionStorageSendBuffer.BUFFER_KEY);\r\n        var notDeliveredItems = this.getBuffer(SessionStorageSendBuffer.SENT_BUFFER_KEY);\r\n\r\n        this._buffer = bufferItems.concat(notDeliveredItems);\r\n\r\n        // If the buffer has too many items, drop items from the end.\r\n        if (this._buffer.length > SessionStorageSendBuffer.MAX_BUFFER_SIZE) {\r\n            this._buffer.length = SessionStorageSendBuffer.MAX_BUFFER_SIZE;\r\n        }\r\n\r\n        // update DataLossAnalyzer with the number of recovered items\r\n        // Uncomment if you want to use DataLossanalyzer\r\n        // DataLossAnalyzer.itemsRestoredFromSessionBuffer = this._buffer.length;\r\n\r\n        this.setBuffer(SessionStorageSendBuffer.SENT_BUFFER_KEY, []);\r\n        this.setBuffer(SessionStorageSendBuffer.BUFFER_KEY, this._buffer);\r\n    }\r\n\r\n    public enqueue(payload: string) {\r\n        if (this._buffer.length >= SessionStorageSendBuffer.MAX_BUFFER_SIZE) {\r\n            // sent internal log only once per page view\r\n            if (!this._bufferFullMessageSent) {\r\n                _InternalLogging.throwInternal(\r\n                    LoggingSeverity.WARNING,\r\n                    _InternalMessageId.SessionStorageBufferFull,\r\n                    \"Maximum buffer size reached: \" + this._buffer.length,\r\n                    true);\r\n                this._bufferFullMessageSent = true;\r\n            }\r\n            return;\r\n        }\r\n\r\n        this._buffer.push(payload);\r\n        this.setBuffer(SessionStorageSendBuffer.BUFFER_KEY, this._buffer);\r\n    }\r\n\r\n    public count(): number {\r\n        return this._buffer.length;\r\n    }\r\n\r\n    public clear() {\r\n        this._buffer.length = 0;\r\n        this.setBuffer(SessionStorageSendBuffer.BUFFER_KEY, []);\r\n        this.setBuffer(SessionStorageSendBuffer.SENT_BUFFER_KEY, []);\r\n\r\n        this._bufferFullMessageSent = false;\r\n    }\r\n\r\n    public getItems(): string[] {\r\n        return this._buffer.slice(0)\r\n    }\r\n\r\n    public batchPayloads(payload: string[]): string {\r\n        if (payload && payload.length > 0) {\r\n            var batch = this._config.emitLineDelimitedJson() ?\r\n                payload.join(\"\\n\") :\r\n                \"[\" + payload.join(\",\") + \"]\";\r\n\r\n            return batch;\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    public markAsSent(payload: string[]) {\r\n        this._buffer = this.removePayloadsFromBuffer(payload, this._buffer);\r\n        this.setBuffer(SessionStorageSendBuffer.BUFFER_KEY, this._buffer);\r\n\r\n        var sentElements = this.getBuffer(SessionStorageSendBuffer.SENT_BUFFER_KEY);\r\n        if (sentElements instanceof Array && payload instanceof Array) {\r\n            sentElements = sentElements.concat(payload);\r\n\r\n            if (sentElements.length > SessionStorageSendBuffer.MAX_BUFFER_SIZE) {\r\n                // We send telemetry normally. If the SENT_BUFFER is too big we don't add new elements\r\n                // until we receive a response from the backend and the buffer has free space again (see clearSent method)\r\n                _InternalLogging.throwInternal(\r\n                    LoggingSeverity.CRITICAL,\r\n                    _InternalMessageId.SessionStorageBufferFull,\r\n                    \"Sent buffer reached its maximum size: \" + sentElements.length,\r\n                    true);\r\n\r\n                sentElements.length = SessionStorageSendBuffer.MAX_BUFFER_SIZE;\r\n            }\r\n\r\n            this.setBuffer(SessionStorageSendBuffer.SENT_BUFFER_KEY, sentElements);\r\n        }\r\n    }\r\n\r\n    public clearSent(payload: string[]) {\r\n        var sentElements = this.getBuffer(SessionStorageSendBuffer.SENT_BUFFER_KEY);\r\n        sentElements = this.removePayloadsFromBuffer(payload, sentElements);\r\n\r\n        this.setBuffer(SessionStorageSendBuffer.SENT_BUFFER_KEY, sentElements);\r\n    }\r\n\r\n    private removePayloadsFromBuffer(payloads: string[], buffer: string[]): string[] {\r\n        var remaining: string[] = [];\r\n\r\n        for (var i in buffer) {\r\n            var contains = false;\r\n            for (var j in payloads) {\r\n                if (payloads[j] === buffer[i]) {\r\n                    contains = true;\r\n                    break;\r\n                }\r\n            }\r\n\r\n            if (!contains) {\r\n                remaining.push(buffer[i]);\r\n            }\r\n        };\r\n\r\n        return remaining;\r\n    }\r\n\r\n    private getBuffer(key: string): string[] {\r\n        try {\r\n            var bufferJson = Util.getSessionStorage(key);\r\n            if (bufferJson) {\r\n                var buffer: string[] = JSON.parse(bufferJson);\r\n                if (buffer) {\r\n                    return buffer;\r\n                }\r\n            }\r\n        } catch (e) {\r\n            _InternalLogging.throwInternal(LoggingSeverity.CRITICAL,\r\n                _InternalMessageId.FailedToRestoreStorageBuffer,\r\n                \" storage key: \" + key + \", \" + Util.getExceptionName(e),\r\n                { exception: Util.dump(e) });\r\n        }\r\n\r\n        return [];\r\n    }\r\n\r\n    private setBuffer(key: string, buffer: string[]) {\r\n        try {\r\n            var bufferJson = JSON.stringify(buffer);\r\n            Util.setSessionStorage(key, bufferJson);\r\n        } catch (e) {\r\n            // if there was an error, clear the buffer\r\n            // telemetry is stored in the _buffer array so we won't loose any items\r\n            Util.setSessionStorage(key, JSON.stringify([]));\r\n\r\n            _InternalLogging.throwInternal(LoggingSeverity.WARNING,\r\n                _InternalMessageId.FailedToSetStorageBuffer,\r\n                \" storage key: \" + key + \", \" + Util.getExceptionName(e) + \". Buffer cleared\",\r\n                { exception: Util.dump(e) });\r\n        }\r\n    }\r\n}","///<reference path=\"./node_modules/applicationinsights-core-js/bundle/applicationinsights-core-js.d.ts\" />\r\nimport {\r\n    IEnvelope, Data, Envelope,\r\n    RemoteDependencyData, Event, Exception,\r\n    Metric, PageView, Trace, PageViewPerformance\r\n} from 'applicationinsights-common';\r\nimport { ITelemetryItem } from 'applicationinsights-core-js';\r\n\r\nexport const ContextTagKeys: string[] = [\r\n    \"ai.application.ver\",\r\n    \"ai.application.build\",\r\n    \"ai.application.typeId\",\r\n    \"ai.application.applicationId\",\r\n    \"ai.application.layer\",\r\n    \"ai.device.id\",\r\n    \"ai.device.ip\",\r\n    \"ai.device.language\",\r\n    \"ai.device.locale\",\r\n    \"ai.device.model\",\r\n    \"ai.device.friendlyName\",\r\n    \"ai.device.network\",\r\n    \"ai.device.networkName\",\r\n    \"ai.device.oemName\",\r\n    \"ai.device.os\",\r\n    \"ai.device.osVersion\",\r\n    \"ai.device.roleInstance\",\r\n    \"ai.device.roleName\",\r\n    \"ai.device.screenResolution\",\r\n    \"ai.device.type\",\r\n    \"ai.device.machineName\",\r\n    \"ai.device.vmName\",\r\n    \"ai.device.browser\",\r\n    \"ai.device.browserVersion\",\r\n    \"ai.location.ip\",\r\n    \"ai.location.country\",\r\n    \"ai.location.province\",\r\n    \"ai.location.city\",\r\n    \"ai.operation.id\",\r\n    \"ai.operation.name\",\r\n    \"ai.operation.parentId\",\r\n    \"ai.operation.rootId\",\r\n    \"ai.operation.syntheticSource\",\r\n    \"ai.operation.correlationVector\",\r\n    \"ai.session.id\",\r\n    \"ai.session.isFirst\",\r\n    \"ai.session.isNew\",\r\n    \"ai.user.accountAcquisitionDate\",\r\n    \"ai.user.accountId\",\r\n    \"ai.user.userAgent\",\r\n    \"ai.user.id\",\r\n    \"ai.user.storeRegion\",\r\n    \"ai.user.authUserId\",\r\n    \"ai.user.anonUserAcquisitionDate\",\r\n    \"ai.user.authUserAcquisitionDate\",\r\n    \"ai.cloud.name\",\r\n    \"ai.cloud.role\",\r\n    \"ai.cloud.roleVer\",\r\n    \"ai.cloud.roleInstance\",\r\n    \"ai.cloud.environment\",\r\n    \"ai.cloud.location\",\r\n    \"ai.cloud.deploymentUnit\",\r\n    \"ai.internal.sdkVersion\",\r\n    \"ai.internal.agentVersion\",\r\n    \"ai.internal.nodeName\",\r\n];\r\n\r\nexport abstract class EnvelopeCreator {\r\n    abstract Create(telemetryItem: ITelemetryItem): IEnvelope;\r\n\r\n    protected static extractMeasurements(properties: { [key: string]: any }): { [key: string]: any } {\r\n        let customMeasurements: { [key: string]: any } = null;\r\n        for (let key in properties) {\r\n            if (properties.hasOwnProperty(key)) {\r\n                let value = properties[key];\r\n                if (value instanceof Number) {\r\n                    if (!customMeasurements) {\r\n                        customMeasurements = {};\r\n                    }\r\n                    customMeasurements[key] = value;\r\n                }\r\n            }\r\n        }\r\n\r\n        return customMeasurements;\r\n    }\r\n\r\n    protected static createEnvelope<T>(envelopeType: string, telemetryItem: ITelemetryItem, data: Data<T>): IEnvelope {\r\n        let envelope = new Envelope(data, envelopeType);\r\n        envelope.iKey = telemetryItem.instrumentationKey;\r\n        let iKeyNoDashes = telemetryItem.instrumentationKey.replace(/-/g, \"\");\r\n        envelope.name = envelope.name.replace(\"{0}\", iKeyNoDashes);\r\n\r\n        // loop through the envelope systemProperties and pick out the ones that should go in tags\r\n        for (let key in telemetryItem.sytemProperties) {\r\n            if (telemetryItem.sytemProperties.hasOwnProperty(key)) {\r\n                if (ContextTagKeys.indexOf(key) >= 0) {\r\n                    envelope.tags[key] = telemetryItem.sytemProperties[key];\r\n                }\r\n            }\r\n        }\r\n\r\n        return envelope;\r\n    }\r\n}\r\n\r\nexport class DependencyEnvelopeCreator extends EnvelopeCreator {\r\n    static DependencyEnvelopeCreator = new DependencyEnvelopeCreator();\r\n\r\n    Create(telemetryItem: ITelemetryItem): IEnvelope {\r\n        let customMeasurements = EnvelopeCreator.extractMeasurements(telemetryItem.customProperties);\r\n        let id = telemetryItem.domainProperties[\"id\"];\r\n        let absoluteUrl = telemetryItem.domainProperties[\"absoluteUrl\"];\r\n        let command = telemetryItem.domainProperties[\"command\"];\r\n        let totalTime = telemetryItem.domainProperties[\"totalTime\"];\r\n        let success = telemetryItem.domainProperties[\"success\"];\r\n        let resultCode = telemetryItem.domainProperties[\"resultCode\"];\r\n        let method = telemetryItem.domainProperties[\"method\"];\r\n        let baseData = new RemoteDependencyData(id, absoluteUrl, command, totalTime, success, resultCode, method, telemetryItem.customProperties, customMeasurements);\r\n        let data = new Data<RemoteDependencyData>(RemoteDependencyData.dataType, baseData);\r\n        return EnvelopeCreator.createEnvelope<RemoteDependencyData>(RemoteDependencyData.envelopeType, telemetryItem, data);\r\n    }\r\n}\r\n\r\nexport class EventEnvelopeCreator extends EnvelopeCreator {\r\n    static EventEnvelopeCreator = new EventEnvelopeCreator();\r\n\r\n    Create(telemetryItem: ITelemetryItem): IEnvelope {\r\n        let customMeasurements = EnvelopeCreator.extractMeasurements(telemetryItem.customProperties);\r\n        let eventName = telemetryItem.domainProperties[\"name\"];\r\n        let baseData = new Event(eventName, telemetryItem.customProperties, customMeasurements);\r\n        let data = new Data<Event>(Event.dataType, baseData);\r\n        return EnvelopeCreator.createEnvelope<Event>(Event.envelopeType, telemetryItem, data);\r\n    }\r\n}\r\n\r\nexport class ExceptionEnvelopeCreator extends EnvelopeCreator {\r\n    static ExceptionEnvelopeCreator = new ExceptionEnvelopeCreator();\r\n\r\n    Create(telemetryItem: ITelemetryItem): IEnvelope {\r\n        let customMeasurements = EnvelopeCreator.extractMeasurements(telemetryItem.customProperties);\r\n        let exception = telemetryItem.domainProperties[\"exception\"];\r\n        let severityLevel = telemetryItem.domainProperties[\"severityLevel\"];\r\n        let baseData = new Exception(exception, telemetryItem.customProperties, customMeasurements, severityLevel);\r\n        let data = new Data<Exception>(Exception.dataType, baseData);\r\n        return EnvelopeCreator.createEnvelope<Exception>(Exception.envelopeType, telemetryItem, data);\r\n    }\r\n}\r\n\r\nexport class MetricEnvelopeCreator extends EnvelopeCreator {\r\n    static MetricEnvelopeCreator = new MetricEnvelopeCreator();\r\n\r\n    Create(telemetryItem: ITelemetryItem): IEnvelope {\r\n        let name = telemetryItem.domainProperties[\"name\"];\r\n        let average = telemetryItem.domainProperties[\"average\"];\r\n        let sampleCount = telemetryItem.domainProperties[\"sampleCount\"];\r\n        let min = telemetryItem.domainProperties[\"min\"];\r\n        let max = telemetryItem.domainProperties[\"max\"];\r\n        let baseData = new Metric(name, average, sampleCount, min, max, telemetryItem.customProperties);\r\n        let data = new Data<Metric>(Metric.dataType, baseData);\r\n        return EnvelopeCreator.createEnvelope<Metric>(Metric.envelopeType, telemetryItem, data);\r\n    }\r\n}\r\n\r\nexport class PageViewEnvelopeCreator extends EnvelopeCreator {\r\n    static PageViewEnvelopeCreator = new PageViewEnvelopeCreator();\r\n\r\n    Create(telemetryItem: ITelemetryItem): IEnvelope {\r\n        let customMeasurements = EnvelopeCreator.extractMeasurements(telemetryItem.customProperties);\r\n        let name = telemetryItem.domainProperties[\"name\"];\r\n        let url = telemetryItem.domainProperties[\"url\"];\r\n        let duration = telemetryItem.domainProperties[\"duration\"];\r\n        let baseData = new PageView(name, url, duration, telemetryItem.customProperties, customMeasurements);\r\n        let data = new Data<PageView>(PageView.dataType, baseData);\r\n        return EnvelopeCreator.createEnvelope<PageView>(PageView.envelopeType, telemetryItem, data);\r\n    }\r\n}\r\n\r\nexport class PageViewPerformanceEnvelopeCreator extends EnvelopeCreator {\r\n    static PageViewPerformanceEnvelopeCreator = new PageViewPerformanceEnvelopeCreator();\r\n\r\n    Create(telemetryItem: ITelemetryItem): IEnvelope {\r\n        let customMeasurements = EnvelopeCreator.extractMeasurements(telemetryItem.customProperties);\r\n        let name = telemetryItem.domainProperties[\"name\"];\r\n        let url = telemetryItem.domainProperties[\"url\"];\r\n        let duration = telemetryItem.domainProperties[\"duration\"];\r\n        let baseData = new PageViewPerformance(name, url, duration, telemetryItem.customProperties, customMeasurements);\r\n        let data = new Data<PageViewPerformance>(PageViewPerformance.dataType, baseData);\r\n        return EnvelopeCreator.createEnvelope<PageViewPerformance>(PageViewPerformance.envelopeType, telemetryItem, data);\r\n    }\r\n}\r\n\r\nexport class TraceEnvelopeCreator extends EnvelopeCreator {\r\n    static TraceEnvelopeCreator = new TraceEnvelopeCreator();\r\n\r\n    Create(telemetryItem: ITelemetryItem): IEnvelope {\r\n        let message = telemetryItem.domainProperties[\"message\"];\r\n        let severityLevel = telemetryItem.domainProperties[\"severityLevel\"];\r\n        let baseData = new Trace(message, telemetryItem.customProperties, severityLevel);\r\n        let data = new Data<Trace>(Trace.dataType, baseData);\r\n        return EnvelopeCreator.createEnvelope<Trace>(Trace.envelopeType, telemetryItem, data);\r\n    }\r\n}","import { ITelemetryItem } from 'applicationinsights-core-js';\r\n\r\nexport interface ITypeValidator {\r\n    Validate(item: ITelemetryItem): boolean;\r\n}","import { ITypeValidator } from './ITypeValidator';\r\nimport { ITelemetryItem } from 'applicationinsights-core-js';\r\n\r\nexport class EventValidator implements ITypeValidator {\r\n    static EventValidator = new EventValidator();\r\n\r\n    public Validate(item: ITelemetryItem): boolean {\r\n        // verify system properties has a ver field\r\n        if (!item.sytemProperties || !item.sytemProperties[\"ver\"]) {\r\n            return false;\r\n        }\r\n        \r\n        if (!item.domainProperties || !item.domainProperties[\"name\"]) {\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n}","import { ITypeValidator } from './ITypeValidator';\r\nimport { ITelemetryItem } from 'applicationinsights-core-js';\r\n\r\nexport class TraceValidator implements ITypeValidator {\r\n    static TraceValidator = new TraceValidator();\r\n\r\n    public Validate(item: ITelemetryItem): boolean {\r\n        // verify system properties has a ver field\r\n        if (!item.sytemProperties || \r\n            !item.sytemProperties[\"ver\"]) {\r\n            return false;\r\n        }\r\n        \r\n        if (!item.domainProperties || \r\n            !item.domainProperties[\"message\"] || \r\n            !item.domainProperties[\"severityLevel\"]) {\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n}","import { ITypeValidator } from './ITypeValidator';\r\nimport { ITelemetryItem } from 'applicationinsights-core-js';\r\n\r\nexport class ExceptionValidator implements ITypeValidator {\r\n    static ExceptionValidator = new ExceptionValidator();\r\n\r\n    Validate(item: ITelemetryItem): boolean {\r\n        // verify system properties has a ver field\r\n        if (!item.sytemProperties ||\r\n            !item.sytemProperties[\"ver\"]) {\r\n            return false;\r\n        }\r\n\r\n        if (!item.domainProperties ||\r\n            !item.domainProperties[\"exceptions\"] ||\r\n            !ExceptionValidator._validateExceptions(item.domainProperties[\"exceptions\"])) {\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    // TODO implement validation of exceptions\r\n    private static _validateExceptions(exceptions: any[]): boolean {\r\n        // typeName\r\n        // message\r\n        // parsedStack\r\n        // stack\r\n        // hasFullStack\r\n        return true;\r\n    }\r\n}","import { ITypeValidator } from './ITypeValidator';\r\nimport { ITelemetryItem } from 'applicationinsights-core-js';\r\n\r\nexport class MetricValidator implements ITypeValidator {\r\n    static MetricValidator = new MetricValidator();\r\n\r\n    Validate(event: ITelemetryItem): boolean {\r\n        return false;\r\n    }\r\n}","import { ITypeValidator } from './ITypeValidator';\r\nimport { ITelemetryItem } from 'applicationinsights-core-js';\r\n\r\nexport class PageViewPerformanceValidator implements ITypeValidator {\r\n    static PageViewPerformanceValidator = new PageViewPerformanceValidator();\r\n\r\n    public Validate(item: ITelemetryItem): boolean {\r\n        // verify system properties has a ver field\r\n        if (!item.sytemProperties ||\r\n            !item.sytemProperties[\"ver\"]) {\r\n            return false;\r\n        }\r\n\r\n        if (!item.domainProperties ||\r\n            !item.domainProperties[\"domProcessing\"] ||\r\n            !item.domainProperties[\"duration\"] ||\r\n            !item.domainProperties[\"name\"] ||\r\n            !item.domainProperties[\"networkConnect\"] ||\r\n            !item.domainProperties[\"perfTotal\"] ||\r\n            !item.domainProperties[\"receivedResponse\"] ||\r\n            !item.domainProperties[\"sentRequest\"] ||\r\n            !item.domainProperties[\"url\"]) {\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n}","import { ITypeValidator } from './ITypeValidator';\r\nimport { ITelemetryItem } from 'applicationinsights-core-js';\r\n\r\nexport class PageViewValidator implements ITypeValidator {\r\n    static PageViewValidator = new PageViewValidator();\r\n\r\n    public Validate(item: ITelemetryItem): boolean {\r\n        // verify system properties has a ver field\r\n        if (!item.sytemProperties ||\r\n            !item.sytemProperties[\"ver\"]) {\r\n            return false;\r\n        }\r\n\r\n        if (!item.domainProperties ||\r\n            !item.domainProperties[\"id\"] ||\r\n            !item.domainProperties[\"name\"] ||\r\n            !item.domainProperties[\"duration\"] ||\r\n            !item.domainProperties[\"url\"]) {\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n}","import { ITypeValidator } from './ITypeValidator';\r\nimport { ITelemetryItem } from 'applicationinsights-core-js';\r\n\r\nexport class RemoteDepdencyValidator implements ITypeValidator {\r\n    static RemoteDepdencyValidator = new RemoteDepdencyValidator();\r\n\r\n    public Validate(item: ITelemetryItem): boolean {\r\n        // verify system properties has a ver field\r\n        if (!item.sytemProperties ||\r\n            !item.sytemProperties[\"ver\"]) {\r\n            return false;\r\n        }\r\n\r\n        if (!item.domainProperties ||\r\n            !item.domainProperties[\"id\"] ||\r\n            !item.domainProperties[\"name\"] ||\r\n            !item.domainProperties[\"resultCode\"] ||\r\n            !item.domainProperties[\"duration\"] ||\r\n            !item.domainProperties[\"success\"] ||\r\n            !item.domainProperties[\"data\"] ||\r\n            !item.domainProperties[\"target\"] ||\r\n            !item.domainProperties[\"type\"]) {\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n}","import { LoggingSeverity, _InternalMessageId, _InternalLogging, Util, ISerializable, FieldType } from 'applicationinsights-common';\r\n\r\nexport class Serializer {\r\n\r\n    /**\r\n     * Serializes the current object to a JSON string.\r\n     */\r\n    public static serialize(input: ISerializable): string {\r\n        var output = Serializer._serializeObject(input, \"root\");\r\n        return JSON.stringify(output);\r\n    }\r\n\r\n    private static _serializeObject(source: ISerializable, name: string): any {\r\n        var circularReferenceCheck = \"__aiCircularRefCheck\";\r\n        var output = {};\r\n\r\n        if (!source) {\r\n            _InternalLogging.throwInternal(LoggingSeverity.CRITICAL, _InternalMessageId.CannotSerializeObject, \"cannot serialize object because it is null or undefined\", { name: name }, true);\r\n            return output;\r\n        }\r\n\r\n        if (source[circularReferenceCheck]) {\r\n            _InternalLogging.throwInternal(LoggingSeverity.WARNING, _InternalMessageId.CircularReferenceDetected, \"Circular reference detected while serializing object\", { name: name }, true);\r\n            return output;\r\n        }\r\n\r\n        if (!source.aiDataContract) {\r\n            // special case for measurements/properties/tags\r\n            if (name === \"measurements\") {\r\n                output = Serializer._serializeStringMap(source, \"number\", name);\r\n            } else if (name === \"properties\") {\r\n                output = Serializer._serializeStringMap(source, \"string\", name);\r\n            } else if (name === \"tags\") {\r\n                output = Serializer._serializeStringMap(source, \"string\", name);\r\n            } else if (Util.isArray(source)) {\r\n                output = Serializer._serializeArray(<any>source, name);\r\n            } else {\r\n                _InternalLogging.throwInternal(LoggingSeverity.WARNING, _InternalMessageId.CannotSerializeObjectNonSerializable, \"Attempting to serialize an object which does not implement ISerializable\", { name: name }, true);\r\n\r\n                try {\r\n                    // verify that the object can be stringified\r\n                    JSON.stringify(source);\r\n                    output = source;\r\n                } catch (e) {\r\n                    // if serialization fails return an empty string\r\n                    _InternalLogging.throwInternal(LoggingSeverity.CRITICAL, _InternalMessageId.CannotSerializeObject, (e && typeof e.toString === 'function') ? e.toString() : \"Error serializing object\", null, true);\r\n                }\r\n            }\r\n\r\n            return output;\r\n        }\r\n\r\n        source[circularReferenceCheck] = true;\r\n        for (var field in source.aiDataContract) {\r\n\r\n            var contract = source.aiDataContract[field];\r\n            var isRequired = (typeof contract === \"function\") ? (contract() & FieldType.Required) : (contract & FieldType.Required);\r\n            var isHidden = (typeof contract === \"function\") ? (contract() & FieldType.Hidden) : (contract & FieldType.Hidden);\r\n            var isArray = contract & FieldType.Array;\r\n\r\n            var isPresent = source[field] !== undefined;\r\n            var isObject = typeof source[field] === \"object\" && source[field] !== null;\r\n\r\n            if (isRequired && !isPresent && !isArray) {\r\n                _InternalLogging.throwInternal(\r\n                    LoggingSeverity.CRITICAL,\r\n                    _InternalMessageId.MissingRequiredFieldSpecification,\r\n                    \"Missing required field specification. The field is required but not present on source\",\r\n                    { field: field, name: name });\r\n\r\n                // If not in debug mode, continue and hope the error is permissible\r\n                continue;\r\n            }\r\n\r\n            if (isHidden) {\r\n                // Don't serialize hidden fields\r\n                continue;\r\n            }\r\n\r\n            var value;\r\n            if (isObject) {\r\n                if (isArray) {\r\n                    // special case; resurse on each object in the source array\r\n                    value = Serializer._serializeArray(source[field], field);\r\n                } else {\r\n                    // recurse on the source object in this field\r\n                    value = Serializer._serializeObject(source[field], field);\r\n                }\r\n            } else {\r\n                // assign the source field to the output even if undefined or required\r\n                value = source[field];\r\n            }\r\n\r\n            // only emit this field if the value is defined\r\n            if (value !== undefined) {\r\n                output[field] = value;\r\n            }\r\n        }\r\n\r\n        delete source[circularReferenceCheck];\r\n        return output;\r\n    }\r\n\r\n    private static _serializeArray(sources: Array<ISerializable>, name: string): Array<any> {\r\n        var output = undefined;\r\n\r\n        if (!!sources) {\r\n            if (!Util.isArray(sources)) {\r\n                _InternalLogging.throwInternal(\r\n                    LoggingSeverity.CRITICAL,\r\n                    _InternalMessageId.ItemNotInArray,\r\n                    \"This field was specified as an array in the contract but the item is not an array.\\r\\n\",\r\n                    { name: name }, true);\r\n            } else {\r\n                output = [];\r\n                for (var i = 0; i < sources.length; i++) {\r\n                    var source = sources[i];\r\n                    var item = Serializer._serializeObject(source, name + \"[\" + i + \"]\");\r\n                    output.push(item);\r\n                }\r\n            }\r\n        }\r\n\r\n        return output;\r\n    }\r\n\r\n    private static _serializeStringMap(map, expectedType, name) {\r\n        var output = undefined;\r\n        if (map) {\r\n            output = {};\r\n            for (var field in map) {\r\n                var value = map[field];\r\n                if (expectedType === \"string\") {\r\n                    if (value === undefined) {\r\n                        output[field] = \"undefined\";\r\n                    } else if (value === null) {\r\n                        output[field] = \"null\";\r\n                    } else if (!value.toString) {\r\n                        output[field] = \"invalid field: toString() is not defined.\";\r\n                    }\r\n                    else {\r\n                        output[field] = value.toString();\r\n                    }\r\n                }\r\n                else if (expectedType === \"number\") {\r\n                    if (value === undefined) {\r\n                        output[field] = \"undefined\";\r\n                    } else if (value === null) {\r\n                        output[field] = \"null\";\r\n                    } else {\r\n                        var num = parseFloat(value);\r\n                        if (isNaN(num)) {\r\n                            output[field] = \"NaN\";\r\n                        }\r\n                        else {\r\n                            output[field] = num;\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    output[field] = \"invalid field: \" + name + \" is of unknown type.\";\r\n                    _InternalLogging.throwInternal(LoggingSeverity.CRITICAL, output[field], null, true);\r\n                }\r\n            }\r\n        }\r\n\r\n        return output;\r\n    }\r\n}","///<reference path=\"./node_modules/applicationinsights-common/bundle/applicationinsights-common.d.ts\" />\r\n///<reference path=\"./node_modules/applicationinsights-core-js/bundle/applicationinsights-core-js.d.ts\" />\r\nimport { ISenderConfig, XDomainRequest as IXDomainRequest, IBackendResponse } from './Interfaces';\r\nimport { ISendBuffer, SessionStorageSendBuffer, ArraySendBuffer } from './SendBuffer';\r\nimport {\r\n    EnvelopeCreator, DependencyEnvelopeCreator, EventEnvelopeCreator,\r\n    ExceptionEnvelopeCreator, MetricEnvelopeCreator, PageViewEnvelopeCreator,\r\n    PageViewPerformanceEnvelopeCreator, TraceEnvelopeCreator\r\n} from './EnvelopeCreator';\r\nimport { EventValidator } from './TelemetryValidation/EventValidator';\r\nimport { TraceValidator } from './TelemetryValidation/TraceValidator';\r\nimport { ExceptionValidator } from './TelemetryValidation/ExceptionValidator';\r\nimport { MetricValidator } from './TelemetryValidation/MetricValidator';\r\nimport { PageViewPerformanceValidator } from './TelemetryValidation/PageViewPerformanceValidator';\r\nimport { PageViewValidator } from './TelemetryValidation/PageViewValidator';\r\nimport { RemoteDepdencyValidator } from './TelemetryValidation/RemoteDepdencyValidator';\r\nimport { Serializer } from './Serializer'; // todo move to channel\r\nimport {\r\n    DisabledPropertyName, RequestHeaders, Util,\r\n    _InternalMessageId, LoggingSeverity, _InternalLogging,\r\n    IEnvelope, PageView, Event,\r\n    Trace, Exception, Metric,\r\n    PageViewPerformance, RemoteDependencyData\r\n} from 'applicationinsights-common';\r\nimport {\r\n    IChannelControls, ITelemetryPlugin, ITelemetryItem, IConfiguration\r\n} from 'applicationinsights-core-js';\r\n\r\ndeclare var XDomainRequest: {\r\n    prototype: IXDomainRequest;\r\n    new(): IXDomainRequest;\r\n};\r\n\r\nexport class Sender implements IChannelControls {\r\n    public priority: number; // todo set priority\r\n\r\n    public identifier: string;\r\n\r\n    public pause(): void {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n\r\n    public resume(): void {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n\r\n    public flush(): void {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n\r\n    public teardown(): void {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n\r\n    public setNextPlugin: (next: ITelemetryPlugin) => void;\r\n\r\n    /**\r\n     * The configuration for this sender instance\r\n     */\r\n    public _config: ISenderConfig;\r\n\r\n    /**\r\n     * A method which will cause data to be send to the url\r\n     */\r\n    public _sender: (payload: string[], isAsync: boolean) => void;\r\n\r\n    /**\r\n     * A send buffer object\r\n     */\r\n    public _buffer: ISendBuffer;\r\n\r\n    /**\r\n     * AppId of this component parsed from some backend response.\r\n     */\r\n    public _appId: string;\r\n\r\n    /**\r\n     * Whether XMLHttpRequest object is supported. Older version of IE (8,9) do not support it.\r\n     */\r\n    public _XMLHttpRequestSupported: boolean = false;\r\n\r\n    /**\r\n     * How many times in a row a retryable error condition has occurred.\r\n     */\r\n    private _consecutiveErrors: number;\r\n\r\n    /**\r\n     * The time to retry at in milliseconds from 1970/01/01 (this makes the timer calculation easy).\r\n     */\r\n    private _retryAt: number;\r\n\r\n    /**\r\n     * The time of the last send operation.\r\n     */\r\n    private _lastSend: number;\r\n\r\n    /**\r\n     * Handle to the timer for delayed sending of batches of data.\r\n     */\r\n    private _timeoutHandle: any;\r\n\r\n    public initialize(config: IConfiguration) {\r\n        this.identifier = \"AppInsightsChannelPlugin\";\r\n        this._consecutiveErrors = 0;\r\n        this._retryAt = null;\r\n        this._lastSend = 0;\r\n        this._config = Sender._getDefaultAppInsightsChannelConfig(config, this.identifier);\r\n        this._sender = null;\r\n        this._buffer = (Util.canUseSessionStorage() && this._config.enableSessionStorageBuffer)\r\n            ? new SessionStorageSendBuffer(this._config) : new ArraySendBuffer(this._config);\r\n\r\n        if (!this._config.isBeaconApiDisabled() && Util.IsBeaconApiSupported()) {\r\n            this._sender = this._beaconSender;\r\n        } else {\r\n            if (typeof XMLHttpRequest != \"undefined\") {\r\n                var testXhr = new XMLHttpRequest();\r\n                if (\"withCredentials\" in testXhr) {\r\n                    this._sender = this._xhrSender;\r\n                    this._XMLHttpRequestSupported = true;\r\n                } else if (typeof XDomainRequest !== \"undefined\") {\r\n                    this._sender = this._xdrSender; //IE 8 and 9\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    public processTelemetry(envelope: ITelemetryItem) {\r\n        try {\r\n            // if master off switch is set, don't send any data\r\n            if (this._config.disableTelemetry()) {\r\n                // Do not send/save data\r\n                return;\r\n            }\r\n\r\n            // validate input\r\n            if (!envelope) {\r\n                _InternalLogging.throwInternal(LoggingSeverity.CRITICAL, _InternalMessageId.CannotSendEmptyTelemetry, \"Cannot send empty telemetry\");\r\n                return;\r\n            }\r\n\r\n            // ensure a sender was constructed\r\n            if (!this._sender) {\r\n                _InternalLogging.throwInternal(LoggingSeverity.CRITICAL, _InternalMessageId.SenderNotInitialized, \"Sender was not initialized\");\r\n                return;\r\n            }\r\n\r\n            // first we need to validate that the envelope passed down is valid\r\n            let isValid: boolean = Sender._validate(envelope);\r\n            if (!isValid) {\r\n                _InternalLogging.throwInternal(LoggingSeverity.CRITICAL, _InternalMessageId.TelemetryEnvelopeInvalid, \"Invalid telemetry envelope\");\r\n                return;\r\n            }\r\n\r\n            // construct an envelope that Application Insights endpoint can understand\r\n            let aiEnvelope = Sender._constructEnvelope(envelope);\r\n            if (!aiEnvelope) {\r\n                _InternalLogging.throwInternal(LoggingSeverity.CRITICAL, _InternalMessageId.CreateEnvelopeError, \"Unable to create an AppInsights envelope\");\r\n                return;\r\n            }\r\n\r\n            // check if the incoming payload is too large, truncate if necessary\r\n            let payload: string = Serializer.serialize(aiEnvelope);\r\n\r\n            // flush if we would exceed the max-size limit by adding this item\r\n            var bufferPayload = this._buffer.getItems();\r\n            var batch = this._buffer.batchPayloads(bufferPayload);\r\n\r\n            if (batch && (batch.length + payload.length > this._config.maxBatchSizeInBytes())) {\r\n                this.triggerSend();\r\n            }\r\n\r\n            // enqueue the payload\r\n            this._buffer.enqueue(payload);\r\n\r\n            // ensure an invocation timeout is set\r\n            this._setupTimer();\r\n\r\n            // Uncomment if you want to use DataLossanalyzer\r\n            // DataLossAnalyzer.incrementItemsQueued();\r\n        } catch (e) {\r\n            _InternalLogging.throwInternal(\r\n                LoggingSeverity.WARNING,\r\n                _InternalMessageId.FailedAddingTelemetryToBuffer,\r\n                \"Failed adding telemetry to the sender's buffer, some telemetry will be lost: \" + Util.getExceptionName(e),\r\n                { exception: Util.dump(e) });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * xhr state changes\r\n     */\r\n    public _xhrReadyStateChange(xhr: XMLHttpRequest, payload: string[], countOfItemsInPayload: number) {\r\n        if (xhr.readyState === 4) {\r\n            var response: IBackendResponse = null;\r\n            if (!this._appId) {\r\n                response = this._parseResponse(xhr.responseText || xhr.response);\r\n                if (response && response.appId) {\r\n                    this._appId = response.appId;\r\n                }\r\n            }\r\n\r\n            if ((xhr.status < 200 || xhr.status >= 300) && xhr.status !== 0) {\r\n                if (!this._config.isRetryDisabled() && this._isRetriable(xhr.status)) {\r\n                    this._resendPayload(payload);\r\n\r\n                    _InternalLogging.throwInternal(\r\n                        LoggingSeverity.WARNING,\r\n                        _InternalMessageId.TransmissionFailed, \". \" +\r\n                        \"Response code \" + xhr.status + \". Will retry to send \" + payload.length + \" items.\");\r\n                } else {\r\n                    this._onError(payload, this._formatErrorMessageXhr(xhr));\r\n                }\r\n            } else {\r\n                if (xhr.status === 206) {\r\n                    if (!response) {\r\n                        response = this._parseResponse(xhr.responseText || xhr.response);\r\n                    }\r\n\r\n                    if (response && !this._config.isRetryDisabled()) {\r\n                        this._onPartialSuccess(payload, response);\r\n                    } else {\r\n                        this._onError(payload, this._formatErrorMessageXhr(xhr));\r\n                    }\r\n                } else {\r\n                    this._consecutiveErrors = 0;\r\n                    this._onSuccess(payload, countOfItemsInPayload);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Immediately send buffered data\r\n     * @param async {boolean} - Indicates if the events should be sent asynchronously\r\n     */\r\n    public triggerSend(async = true) {\r\n        try {\r\n            // Send data only if disableTelemetry is false\r\n            if (!this._config.disableTelemetry()) {\r\n\r\n                if (this._buffer.count() > 0) {\r\n                    var payload = this._buffer.getItems();\r\n\r\n                    // invoke send\r\n                    this._sender(payload, async);\r\n                }\r\n\r\n                // update lastSend time to enable throttling\r\n                this._lastSend = +new Date;\r\n            } else {\r\n                this._buffer.clear();\r\n            }\r\n\r\n            clearTimeout(this._timeoutHandle);\r\n            this._timeoutHandle = null;\r\n            this._retryAt = null;\r\n        } catch (e) {\r\n            /* Ignore this error for IE under v10 */\r\n            if (!Util.getIEVersion() || Util.getIEVersion() > 9) {\r\n                _InternalLogging.throwInternal(\r\n                    LoggingSeverity.CRITICAL,\r\n                    _InternalMessageId.TransmissionFailed,\r\n                    \"Telemetry transmission failed, some telemetry will be lost: \" + Util.getExceptionName(e),\r\n                    { exception: Util.dump(e) });\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * error handler\r\n     */\r\n    public _onError(payload: string[], message: string, event?: ErrorEvent) {\r\n        _InternalLogging.throwInternal(\r\n            LoggingSeverity.WARNING,\r\n            _InternalMessageId.OnError,\r\n            \"Failed to send telemetry.\",\r\n            { message: message });\r\n\r\n        this._buffer.clearSent(payload);\r\n    }\r\n\r\n    /**\r\n     * partial success handler\r\n     */\r\n    public _onPartialSuccess(payload: string[], results: IBackendResponse) {\r\n        var failed = [];\r\n        var retry = [];\r\n\r\n        // Iterate through the reversed array of errors so that splicing doesn't have invalid indexes after the first item.\r\n        var errors = results.errors.reverse();\r\n        for (var error of errors) {\r\n            var extracted = payload.splice(error.index, 1)[0];\r\n            if (this._isRetriable(error.statusCode)) {\r\n                retry.push(extracted);\r\n            } else {\r\n                // All other errors, including: 402 (Monthly quota exceeded) and 439 (Too many requests and refresh cache).\r\n                failed.push(extracted);\r\n            }\r\n        }\r\n\r\n        if (payload.length > 0) {\r\n            this._onSuccess(payload, results.itemsAccepted);\r\n        }\r\n\r\n        if (failed.length > 0) {\r\n            this._onError(failed, this._formatErrorMessageXhr(null, ['partial success', results.itemsAccepted, 'of', results.itemsReceived].join(' ')));\r\n        }\r\n\r\n        if (retry.length > 0) {\r\n            this._resendPayload(retry);\r\n\r\n            _InternalLogging.throwInternal(\r\n                LoggingSeverity.WARNING,\r\n                _InternalMessageId.TransmissionFailed, \"Partial success. \" +\r\n                \"Delivered: \" + payload.length + \", Failed: \" + failed.length +\r\n                \". Will retry to send \" + retry.length + \" our of \" + results.itemsReceived + \" items\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * success handler\r\n     */\r\n    public _onSuccess(payload: string[], countOfItemsInPayload: number) {\r\n        // Uncomment if you want to use DataLossanalyzer\r\n        // DataLossAnalyzer.decrementItemsQueued(countOfItemsInPayload);\r\n\r\n        this._buffer.clearSent(payload);\r\n    }\r\n\r\n    /**\r\n     * xdr state changes\r\n     */\r\n    public _xdrOnLoad(xdr: IXDomainRequest, payload: string[]) {\r\n        if (xdr && (xdr.responseText + \"\" === \"200\" || xdr.responseText === \"\")) {\r\n            this._consecutiveErrors = 0;\r\n            this._onSuccess(payload, 0);\r\n        } else {\r\n            var results = this._parseResponse(xdr.responseText);\r\n\r\n            if (results && results.itemsReceived && results.itemsReceived > results.itemsAccepted\r\n                && !this._config.isRetryDisabled()) {\r\n                this._onPartialSuccess(payload, results);\r\n            } else {\r\n                this._onError(payload, this._formatErrorMessageXdr(xdr));\r\n            }\r\n        }\r\n    }\r\n\r\n    private static _getDefaultAppInsightsChannelConfig(config: IConfiguration, identifier: string): ISenderConfig {\r\n        let resultConfig = <ISenderConfig>{};\r\n        let pluginConfig = config.extensions[identifier];\r\n\r\n        // set default values\r\n        resultConfig.endpointUrl = () => config.endpointUrl || \"https://dc.services.visualstudio.com/v2/track\";\r\n        resultConfig.emitLineDelimitedJson = () => Util.stringToBoolOrDefault(pluginConfig.emitLineDelimitedJson);\r\n        resultConfig.maxBatchInterval = () => !isNaN(pluginConfig.maxBatchInterval) ? pluginConfig.maxBatchInterval : 15000;\r\n        resultConfig.maxBatchSizeInBytes = () => pluginConfig.maxBatchSizeInBytes > 0 ? pluginConfig.maxBatchSizeInBytes : 102400; // 100kb\r\n        resultConfig.disableTelemetry = () => Util.stringToBoolOrDefault(pluginConfig.disableTelemetry);\r\n        resultConfig.enableSessionStorageBuffer = () => Util.stringToBoolOrDefault(pluginConfig.enableSessionStorageBuffer, true);\r\n        resultConfig.isRetryDisabled = () => Util.stringToBoolOrDefault(pluginConfig.isRetryDisabled);\r\n        resultConfig.isBeaconApiDisabled = () => Util.stringToBoolOrDefault(pluginConfig.isBeaconApiDisabled, true);\r\n\r\n        return resultConfig;\r\n    }\r\n\r\n    private static _validate(envelope: ITelemetryItem): boolean {\r\n        // call the appropriate Validate depending on the baseType\r\n        switch (envelope.baseType) {\r\n            case Event.dataType:\r\n                return EventValidator.EventValidator.Validate(envelope);\r\n            case Trace.dataType:\r\n                return TraceValidator.TraceValidator.Validate(envelope);\r\n            case Exception.dataType:\r\n                return ExceptionValidator.ExceptionValidator.Validate(envelope);\r\n            case Metric.dataType:\r\n                return MetricValidator.MetricValidator.Validate(envelope);\r\n            case PageView.dataType:\r\n                return PageViewValidator.PageViewValidator.Validate(envelope);\r\n            case PageViewPerformance.dataType:\r\n                return PageViewPerformanceValidator.PageViewPerformanceValidator.Validate(envelope);\r\n            case RemoteDependencyData.dataType:\r\n                return RemoteDepdencyValidator.RemoteDepdencyValidator.Validate(envelope);\r\n        }\r\n        return false;\r\n    }\r\n\r\n    private static _constructEnvelope(envelope: ITelemetryItem): IEnvelope {\r\n        switch (envelope.baseType) {\r\n            case Event.dataType:\r\n                return EventEnvelopeCreator.EventEnvelopeCreator.Create(envelope);\r\n            case Trace.dataType:\r\n                return TraceEnvelopeCreator.TraceEnvelopeCreator.Create(envelope);\r\n            case PageView.dataType:\r\n                return PageViewEnvelopeCreator.PageViewEnvelopeCreator.Create(envelope);\r\n            case PageViewPerformance.dataType:\r\n                return PageViewPerformanceEnvelopeCreator.PageViewPerformanceEnvelopeCreator.Create(envelope);\r\n            case Exception.dataType:\r\n                return ExceptionEnvelopeCreator.ExceptionEnvelopeCreator.Create(envelope);\r\n            case Metric.dataType:\r\n                return MetricEnvelopeCreator.MetricEnvelopeCreator.Create(envelope);\r\n            case RemoteDependencyData.dataType:\r\n                return DependencyEnvelopeCreator.DependencyEnvelopeCreator.Create(envelope);\r\n            default:\r\n                return null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Send Beacon API request\r\n     * @param payload {string} - The data payload to be sent.\r\n     * @param isAsync {boolean} - not used\r\n     * Note: Beacon API does not support custom headers and we are not able to get\r\n     * appId from the backend for the correct correlation.\r\n     */\r\n    private _beaconSender(payload: string[], isAsync: boolean) {\r\n        var url = this._config.endpointUrl();\r\n        var batch = this._buffer.batchPayloads(payload);\r\n\r\n        // Chrome only allows CORS-safelisted values for the sendBeacon data argument\r\n        // see: https://bugs.chromium.org/p/chromium/issues/detail?id=720283\r\n        let plainTextBatch = new Blob([batch], { type: 'text/plain;charset=UTF-8' });\r\n\r\n        // The sendBeacon method returns true if the user agent is able to successfully queue the data for transfer. Otherwise it returns false.\r\n        var queued = navigator.sendBeacon(url, plainTextBatch);\r\n\r\n        if (queued) {\r\n            this._buffer.markAsSent(payload);\r\n        } else {\r\n            _InternalLogging.throwInternal(LoggingSeverity.CRITICAL, _InternalMessageId.TransmissionFailed, \". \" + \"Failed to send telemetry with Beacon API.\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Send XMLHttpRequest\r\n     * @param payload {string} - The data payload to be sent.\r\n     * @param isAsync {boolean} - Indicates if the request should be sent asynchronously\r\n     */\r\n    private _xhrSender(payload: string[], isAsync: boolean) {\r\n        var xhr = new XMLHttpRequest();\r\n        xhr[DisabledPropertyName] = true;\r\n        xhr.open(\"POST\", this._config.endpointUrl(), isAsync);\r\n        xhr.setRequestHeader(\"Content-type\", \"application/json\");\r\n\r\n        // append Sdk-Context request header only in case of breeze endpoint \r\n        if (Util.isInternalApplicationInsightsEndpoint(this._config.endpointUrl())) {\r\n            xhr.setRequestHeader(RequestHeaders.sdkContextHeader, RequestHeaders.sdkContextHeaderAppIdRequest);\r\n        }\r\n\r\n        xhr.onreadystatechange = () => this._xhrReadyStateChange(xhr, payload, payload.length);\r\n        xhr.onerror = (event: ErrorEvent) => this._onError(payload, this._formatErrorMessageXhr(xhr), event);\r\n\r\n        // compose an array of payloads\r\n        var batch = this._buffer.batchPayloads(payload);\r\n        xhr.send(batch);\r\n\r\n        this._buffer.markAsSent(payload);\r\n    }\r\n\r\n    /**\r\n     * Parses the response from the backend. \r\n     * @param response - XMLHttpRequest or XDomainRequest response\r\n     */\r\n    private _parseResponse(response: any): IBackendResponse {\r\n        try {\r\n            if (response && response !== \"\") {\r\n                var result = JSON.parse(response);\r\n\r\n                if (result && result.itemsReceived && result.itemsReceived >= result.itemsAccepted &&\r\n                    result.itemsReceived - result.itemsAccepted == result.errors.length) {\r\n                    return result;\r\n                }\r\n            }\r\n        } catch (e) {\r\n            _InternalLogging.throwInternal(\r\n                LoggingSeverity.CRITICAL,\r\n                _InternalMessageId.InvalidBackendResponse,\r\n                \"Cannot parse the response. \" + Util.getExceptionName(e),\r\n                {\r\n                    response: response\r\n                });\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Resend payload. Adds payload back to the send buffer and setup a send timer (with exponential backoff).\r\n     * @param payload\r\n     */\r\n    private _resendPayload(payload: string[]) {\r\n        if (!payload || payload.length === 0) {\r\n            return;\r\n        }\r\n\r\n        this._buffer.clearSent(payload);\r\n        this._consecutiveErrors++;\r\n\r\n        for (var item of payload) {\r\n            this._buffer.enqueue(item);\r\n        }\r\n\r\n        // setup timer\r\n        this._setRetryTime();\r\n        this._setupTimer();\r\n    }\r\n\r\n    /** Calculates the time to wait before retrying in case of an error based on\r\n     * http://en.wikipedia.org/wiki/Exponential_backoff\r\n     */\r\n    private _setRetryTime() {\r\n        const SlotDelayInSeconds = 10;\r\n        var delayInSeconds: number;\r\n\r\n        if (this._consecutiveErrors <= 1) {\r\n            delayInSeconds = SlotDelayInSeconds;\r\n        } else {\r\n            var backOffSlot = (Math.pow(2, this._consecutiveErrors) - 1) / 2;\r\n            var backOffDelay = Math.floor(Math.random() * backOffSlot * SlotDelayInSeconds) + 1;\r\n            delayInSeconds = Math.max(Math.min(backOffDelay, 3600), SlotDelayInSeconds);\r\n        }\r\n\r\n        // TODO: Log the backoff time like the C# version does.\r\n        var retryAfterTimeSpan = Date.now() + (delayInSeconds * 1000);\r\n\r\n        // TODO: Log the retry at time like the C# version does.\r\n        this._retryAt = retryAfterTimeSpan;\r\n    }\r\n\r\n    /**\r\n     * Sets up the timer which triggers actually sending the data.\r\n     */\r\n    private _setupTimer() {\r\n        if (!this._timeoutHandle) {\r\n            var retryInterval = this._retryAt ? Math.max(0, this._retryAt - Date.now()) : 0;\r\n            var timerValue = Math.max(this._config.maxBatchInterval(), retryInterval);\r\n\r\n            this._timeoutHandle = setTimeout(() => {\r\n                this.triggerSend();\r\n            }, timerValue);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Checks if the SDK should resend the payload after receiving this status code from the backend.\r\n     * @param statusCode\r\n     */\r\n    private _isRetriable(statusCode: number): boolean {\r\n        return statusCode == 408 // Timeout\r\n            || statusCode == 429 // Too many requests.\r\n            || statusCode == 500 // Internal server error.\r\n            || statusCode == 503; // Service unavailable.\r\n    }\r\n\r\n    private _formatErrorMessageXhr(xhr: XMLHttpRequest, message?: string): string {\r\n        if (xhr) {\r\n            return \"XMLHttpRequest,Status:\" + xhr.status + \",Response:\" + xhr.responseText || xhr.response || \"\";\r\n        }\r\n\r\n        return message;\r\n    }\r\n\r\n    /**\r\n     * Send XDomainRequest\r\n     * @param payload {string} - The data payload to be sent.\r\n     * @param isAsync {boolean} - Indicates if the request should be sent asynchronously\r\n     * \r\n     * Note: XDomainRequest does not support sync requests. This 'isAsync' parameter is added\r\n     * to maintain consistency with the xhrSender's contract\r\n     * Note: XDomainRequest does not support custom headers and we are not able to get\r\n     * appId from the backend for the correct correlation.\r\n     */\r\n    private _xdrSender(payload: string[], isAsync: boolean) {\r\n        var xdr = new XDomainRequest();\r\n        xdr.onload = () => this._xdrOnLoad(xdr, payload);\r\n        xdr.onerror = (event: ErrorEvent) => this._onError(payload, this._formatErrorMessageXdr(xdr), event);\r\n\r\n        // XDomainRequest requires the same protocol as the hosting page. \r\n        // If the protocol doesn't match, we can't send the telemetry :(. \r\n        var hostingProtocol = window.location.protocol\r\n        if (this._config.endpointUrl().lastIndexOf(hostingProtocol, 0) !== 0) {\r\n            _InternalLogging.throwInternal(\r\n                LoggingSeverity.WARNING,\r\n                _InternalMessageId.TransmissionFailed, \". \" +\r\n                \"Cannot send XDomain request. The endpoint URL protocol doesn't match the hosting page protocol.\");\r\n\r\n            this._buffer.clear();\r\n            return;\r\n        }\r\n\r\n        var endpointUrl = this._config.endpointUrl().replace(/^(https?:)/, \"\");\r\n        xdr.open('POST', endpointUrl);\r\n\r\n        // compose an array of payloads\r\n        var batch = this._buffer.batchPayloads(payload);\r\n        xdr.send(batch);\r\n\r\n        this._buffer.markAsSent(payload);\r\n    }\r\n\r\n    private _formatErrorMessageXdr(xdr: IXDomainRequest, message?: string): string {\r\n        if (xdr) {\r\n            return \"XDomainRequest,Response:\" + xdr.responseText || \"\";\r\n        }\r\n\r\n        return message;\r\n    }\r\n}","/// <reference path=\"../TestFramework/Common.ts\" />\r\n/// <reference path=\"../../Sender.ts\" />\r\n\r\nclass AppInsightsChannelTests extends TestClass {\r\n    public testInitialize() {\r\n        this.clock.reset();\r\n    }\r\n\r\n    public testCleanup() {\r\n    }\r\n\r\n    public registerTests() {\r\n\r\n        this.testCase({\r\n            name: \"AppInsightsTests: public members are correct\",\r\n            test: () => {\r\n                Assert.ok(true);\r\n            }\r\n        });\r\n    }\r\n}\r\nnew AppInsightsChannelTests().registerTests();","/// <reference path=\"../CheckinTests/aichannel.tests.ts\" />\r\n\r\n \r\n"]}