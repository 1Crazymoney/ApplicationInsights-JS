{"version":3,"file":"dependencies.tests.js","sourceRoot":"","sources":["../TestFramework/Assert.ts","../TestFramework/TestCase.ts","../TestFramework/TestClass.ts","../../ajaxRecord.ts","../../ajaxUtils.ts","../../ajax.ts","ajax.tests.ts","dependencies.tests.ts"],"names":[],"mappings":"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","sourcesContent":["/// <reference path=\"../External/qunit.d.ts\" />\n\n/** Wrapper around QUnit asserts. This class has two purposes:\n * - Make Assertion methods easy to discover.\n * - Make them consistent with XUnit assertions in the order of the actual and expected parameter values.\n */\nclass Assert {\n    /**\n    * A deep recursive comparison assertion, working on primitive types, arrays, objects, \n    * regular expressions, dates and functions.\n    *\n    * The deepEqual() assertion can be used just like equal() when comparing the value of \n    * objects, such that { key: value } is equal to { key: value }. For non-scalar values, \n    * identity will be disregarded by deepEqual.\n    *\n    * @param expected Known comparison value\n    * @param actual Object or Expression being tested\n    * @param message A short description of the assertion\n    */\n    public static deepEqual(expected: any, actual: any, message?: string): any {\n        return deepEqual(actual, expected, message);\n    }\n\n    /** \n    * A non-strict comparison assertion, roughly equivalent to JUnit assertEquals.\n    *\n    * The equal assertion uses the simple comparison operator (==) to compare the actual \n    * and expected arguments. When they are equal, the assertion passes: any; otherwise, it fails. \n    * When it fails, both actual and expected values are displayed in the test result, \n    * in addition to a given message.\n    * \n    * @param expected Known comparison value\n    * @param actual Expression being tested\n    * @param message A short description of the assertion\n    */\n    public static equal(expected: any, actual: any, message?: string): any {\n        return equal(actual, expected, message);\n    }\n\n    /**\n    * An inverted deep recursive comparison assertion, working on primitive types, \n    * arrays, objects, regular expressions, dates and functions.\n    *\n    * The notDeepEqual() assertion can be used just like equal() when comparing the \n    * value of objects, such that { key: value } is equal to { key: value }. For non-scalar \n    * values, identity will be disregarded by notDeepEqual.\n    * \n    * @param expected Known comparison value\n    * @param actual Object or Expression being tested\n    * @param message A short description of the assertion\n    */\n    public static notDeepEqual(expected: any, actual: any, message?: string): any {\n        return notDeepEqual(actual, expected, message);\n    }\n\n    /**\n    * A non-strict comparison assertion, checking for inequality.\n    *\n    * The notEqual assertion uses the simple inverted comparison operator (!=) to compare \n    * the actual and expected arguments. When they aren't equal, the assertion passes: any; \n    * otherwise, it fails. When it fails, both actual and expected values are displayed \n    * in the test result, in addition to a given message.\n    * \n    * @param expected Known comparison value\n    * @param actual Expression being tested\n    * @param message A short description of the assertion\n    */\n    public static notEqual(expected: any, actual: any, message?: string): any {\n        return notEqual(actual, expected, message);\n    }\n\n    public static notPropEqual(expected: any, actual: any, message?: string): any {\n        return notPropEqual(actual, expected, message);\n    }\n\n    public static propEqual(expected: any, actual: any, message?: string): any {\n        return propEqual(actual, expected, message);\n    }\n\n    /**\n    * A non-strict comparison assertion, checking for inequality.\n    *\n    * The notStrictEqual assertion uses the strict inverted comparison operator (!==) \n    * to compare the actual and expected arguments. When they aren't equal, the assertion \n    * passes: any; otherwise, it fails. When it fails, both actual and expected values are \n    * displayed in the test result, in addition to a given message.\n    * \n    * @param expected Known comparison value\n    * @param actual Expression being tested\n    * @param message A short description of the assertion\n    */\n    public static notStrictEqual(expected: any, actual: any, message?: string): any {\n        return notStrictEqual(actual, expected, message);\n    }\n\n    /**\n    * A boolean assertion, equivalent to CommonJS's assert.ok() and JUnit's assertTrue(). \n    * Passes if the first argument is truthy.\n    *\n    * The most basic assertion in QUnit, ok() requires just one argument. If the argument \n    * evaluates to true, the assertion passes; otherwise, it fails. If a second message \n    * argument is provided, it will be displayed in place of the result.\n    * \n    * @param state Expression being tested\n    * @param message A short description of the assertion\n    */\n    public static ok(state: any, message?: string): any {\n        return ok(state, message);\n    }\n\n    /**\n    * A strict type and value comparison assertion.\n    *\n    * The strictEqual() assertion provides the most rigid comparison of type and value with \n    * the strict equality operator (===)\n    * \n    * @param expected Known comparison value\n    * @param actual Expression being tested\n    * @param message A short description of the assertion\n    */\n    public static strictEqual(expected: any, actual: any, message?: string): any {\n        return strictEqual(actual, expected, message);\n    }\n\n    /**\n    * Assertion to test if a callback throws an exception when run.\n    * \n    * When testing code that is expected to throw an exception based on a specific set of \n    * circumstances, use throws() to catch the error object for testing and comparison.\n    * \n    * @param block Function to execute\n    * @param expected Error Object to compare\n    * @param message A short description of the assertion\n    */\n    public static throws(block: () => any, expected: any, message?: string): any;\n\n    /**\n    * @param block Function to execute\n    * @param message A short description of the assertion\n    */\n    public static throws(block: () => any, message?: string): any;\n\n    public static throws(block: () => any, expected?: any, message?: string): any {\n        return throws(block, expected, message);\n    }\n}","\n/** Defines a test case */\nclass TestCase {\n    /** Name to use for the test case */\n    public name: string;\n\n    /** Test case method */\n    public test: () => void;\n}\n\n\n/** Defines a test case */\ninterface TestCaseAsync {\n    /** Name to use for the test case */\n    name: string;\n\n    /** time to wait after pre before invoking post and calling start() */\n    stepDelay: number;\n\n    /** async steps */\n    steps: Array<() => void>;\n}","/// <reference path=\"../External/sinon.d.ts\" />\n/// <reference path=\"../External/qunit.d.ts\" />\n/// <reference path=\"Assert.ts\" />\n/// <reference path=\"./TestCase.ts\"/>\n\nclass TestClass {\n\n    constructor(name?: string) {\n        QUnit.module(name);\n    }\n\n    public static isPollingStepFlag = \"isPollingStep\";\n\n    /** The instance of the currently running suite. */\n    public static currentTestClass: TestClass;\n\n    /** Turns on/off sinon's syncronous implementation of setTimeout. On by default. */\n    public useFakeTimers: boolean = true;\n\n    /** Turns on/off sinon's fake implementation of XMLHttpRequest. On by default. */\n    public useFakeServer: boolean = true;\n\n    /** Method called before the start of each test method */\n    public testInitialize() {\n    }\n\n    /** Method called after each test method has completed */\n    public testCleanup() {\n    }\n\n    /** Method in which test class intances should call this.testCase(...) to register each of this suite's tests. */\n    public registerTests() {\n    }\n\n    /** Register an async Javascript unit testcase. */\n    public testCaseAsync(testInfo: TestCaseAsync) {\n        if (!testInfo.name) {\n            throw new Error(\"Must specify name in testInfo context in registerTestcase call\");\n        }\n\n        if (isNaN(testInfo.stepDelay)) {\n            throw new Error(\"Must specify 'stepDelay' period between pre and post\");\n        }\n\n        if (!testInfo.steps) {\n            throw new Error(\"Must specify 'steps' to take asynchronously\");\n        }\n\n        // Create a wrapper around the test method so we can do test initilization and cleanup.\n        var testMethod = (assert) => {\n            var done = assert.async();\n\n            // Save off the instance of the currently running suite.\n            TestClass.currentTestClass = this;\n\n            // Run the test.\n            try {\n                this._testStarting();\n\n                var steps = testInfo.steps;\n                var trigger = () => {\n                    if (steps.length) {\n                        var step = steps.shift();\n\n                        // The callback which activates the next test step. \n                        var nextTestStepTrigger = () => {\n                            setTimeout(() => {\n                                trigger();\n                            }, testInfo.stepDelay);\n                        };\n\n                        // There 2 types of test steps - simple and polling.\n                        // Upon completion of the simple test step the next test step will be called.\n                        // In case of polling test step the next test step is passed to the polling test step, and\n                        // it is responsibility of the polling test step to call the next test step.\n                        try {\n                            if (step[TestClass.isPollingStepFlag]) {\n                                step.call(this, nextTestStepTrigger);\n                            } else {\n                                step.call(this);\n                                nextTestStepTrigger.call(this);\n                            }\n                        } catch (e) {\n                            this._testCompleted();\n                            Assert.ok(false, e.toString());\n\n                            // done is QUnit callback indicating the end of the test\n                            done();\n\n                            return;\n                        }\n                    } else {\n                        this._testCompleted();\n\n                        // done is QUnit callback indicating the end of the test\n                        done();\n                    }\n                };\n\n                trigger();\n            } catch (ex) {\n                Assert.ok(false, \"Unexpected Exception: \" + ex);\n                this._testCompleted(true);\n\n                // done is QUnit callback indicating the end of the test\n                done();\n            }\n        };\n\n        // Register the test with QUnit\n        QUnit.test(testInfo.name, testMethod);\n    }\n\n    /** Register a Javascript unit testcase. */\n    public testCase(testInfo: TestCase) {\n        if (!testInfo.name) {\n            throw new Error(\"Must specify name in testInfo context in registerTestcase call\");\n        }\n\n        if (!testInfo.test) {\n            throw new Error(\"Must specify 'test' method in testInfo context in registerTestcase call\");\n        }\n\n        // Create a wrapper around the test method so we can do test initilization and cleanup.\n        var testMethod = () => {\n            // Save off the instance of the currently running suite.\n            TestClass.currentTestClass = this;\n\n            // Run the test.\n            try {\n                this._testStarting();\n\n                testInfo.test.call(this);\n\n                this._testCompleted();\n            }\n            catch (ex) {\n                Assert.ok(false, \"Unexpected Exception: \" + ex);\n                this._testCompleted(true);\n            }\n        };\n\n        // Register the test with QUnit\n        test(testInfo.name, testMethod);\n    }\n\n    /** Called when the test is starting. */\n    private _testStarting() {\n        // Initialize the sandbox similar to what is done in sinon.js \"test()\" override. See note on class.\n        var config = (<any>sinon).getConfig(sinon.config);\n        config.useFakeTimers = this.useFakeTimers;\n        config.useFakeServer = this.useFakeServer;\n\n        config.injectInto = config.injectIntoThis && this || config.injectInto;\n        this.sandbox = sinon.sandbox.create(config);\n        this.server = this.sandbox.server;\n\n        // Allow the derived class to perform test initialization.\n        this.testInitialize();\n    }\n\n    /** Called when the test is completed. */\n    private _testCompleted(failed?: boolean) {\n        if (failed) {\n            // Just cleanup the sandbox since the test has already failed.\n            this.sandbox.restore();\n        }\n        else {\n            // Verify the sandbox and restore.\n            (<any>this.sandbox).verifyAndRestore();\n        }\n\n        this.testCleanup();\n\n        // Clear the instance of the currently running suite.\n        TestClass.currentTestClass = null;\n    }\n\n    /**** Sinon methods and properties ***/\n\n    // These methods and properties are injected by Sinon and will override the implementation here.\n    // These are here purely to make typescript happy.\n    public clock: SinonFakeTimers;\n    public server: SinonFakeServer;\n    public sandbox: SinonSandbox;\n\n    /** Creates an anonymous function that records arguments, this value, exceptions and return values for all calls. */\n    public spy(): SinonSpy;\n    /** Spies on the provided function */\n    public spy(funcToWrap: Function): SinonSpy;\n    /** Creates a spy for object.methodName and replaces the original method with the spy. The spy acts exactly like the original method in all cases. The original method can be restored by calling object.methodName.restore(). The returned spy is the function object which replaced the original method. spy === object.method. */\n    public spy(object: any, methodName: string, func?: Function): SinonSpy;\n    public spy(...args: any[]): SinonSpy { return null; }\n\n    /** Creates an anonymous stub function. */\n    public stub(): SinonStub;\n    /** Stubs all the object's methods. */\n    public stub(object: any): SinonStub;\n    /** Replaces object.methodName with a func, wrapped in a spy. As usual, object.methodName.restore(); can be used to restore the original method. */\n    public stub(object: any, methodName: string, func?: Function): SinonStub;\n    public stub(...args: any[]): SinonStub { return null; }\n\n    /** Creates a mock for the provided object.Does not change the object, but returns a mock object to set expectations on the object's methods. */\n    public mock(object: any): SinonMock { return null; }\n\n    /**** end: Sinon methods and properties ***/\n\n    /** Sends a JSON response to the provided request.\n     * @param request The request to respond to.\n     * @param data Data to respond with.\n     * @param errorCode Optional error code to send with the request, default is 200\n    */\n    public sendJsonResponse(request: SinonFakeXMLHttpRequest, data: any, errorCode?: number) {\n        if (errorCode === undefined) {\n            errorCode = 200;\n        }\n\n        request.respond(\n            errorCode,\n            { \"Content-Type\": \"application/json\" },\n            JSON.stringify(data));\n    }\n\n    protected setUserAgent(userAgent: string) {\n        Object.defineProperty(window.navigator, 'userAgent',\n            {\n                configurable: true,\n                get: function () {\n                    return userAgent;\n                }\n            });\n    }\n}\n\n// Configure Sinon\nsinon.assert.fail = function (msg?) {\n    Assert.ok(false, msg);\n};\n\nsinon.assert.pass = function (assertion) {\n    Assert.ok(assertion, \"sinon assert\");\n};\n\nsinon.config = {\n    injectIntoThis: true,\n    injectInto: null,\n    properties: [\"spy\", \"stub\", \"mock\", \"clock\", \"sandbox\"],\n    useFakeTimers: true,\n    useFakeServer: true\n};\n","import { DataSanitizer, UrlHelper, DateTimeUtils } from 'applicationinsights-common';\r\nimport { IDiagnosticLogger } from 'applicationinsights-core-js';\r\n\r\nexport class XHRMonitoringState {\r\n    public openDone: boolean = false;\r\n    public setRequestHeaderDone: boolean = false;\r\n    public sendDone: boolean = false;\r\n    public abortDone: boolean = false;\r\n\r\n    //<summary>True, if onreadyStateChangeCallback function attached to xhr, otherwise false</summary>\r\n    public onreadystatechangeCallbackAttached = false;\r\n}\r\n\r\nexport class ajaxRecord {\r\n    public completed = false;\r\n    public requestHeadersSize = null;\r\n    public ttfb = null;\r\n    public responseReceivingDuration = null;\r\n    public callbackDuration = null;\r\n    public ajaxTotalDuration = null;\r\n    public aborted = null;\r\n    public pageUrl = null;\r\n    public requestUrl = null;\r\n    public requestSize = 0;\r\n    public method = null;\r\n\r\n    ///<summary>Returns the HTTP status code.</summary>\r\n    public status = null;\r\n\r\n    //<summary>The timestamp when open method was invoked</summary>\r\n    public requestSentTime = null;\r\n\r\n    //<summary>The timestamps when first byte was received</summary>\r\n    public responseStartedTime = null;\r\n\r\n    //<summary>The timestamp when last byte was received</summary>\r\n    public responseFinishedTime = null;\r\n\r\n    //<summary>The timestamp when onreadystatechange callback in readyState 4 finished</summary>\r\n    public callbackFinishedTime = null;\r\n\r\n    //<summary>The timestamp at which ajax was ended</summary>\r\n    public endTime = null;\r\n\r\n    //<summary>The original xhr onreadystatechange event</summary>\r\n    public originalOnreadystatechage = null;\r\n\r\n    public xhrMonitoringState: XHRMonitoringState = new XHRMonitoringState();\r\n\r\n    private _logger: IDiagnosticLogger;\r\n\r\n    //<summary>Determines whether or not JavaScript exception occured in xhr.onreadystatechange code. 1 if occured, otherwise 0.</summary>\r\n    public clientFailure = 0;\r\n\r\n\r\n    public id: string;\r\n\r\n    constructor(id: string, logger: IDiagnosticLogger) {\r\n        this.id = id;\r\n        this._logger = logger;\r\n    }\r\n\r\n\r\n    public getAbsoluteUrl() {\r\n        return this.requestUrl ? UrlHelper.getAbsoluteUrl(this.requestUrl) : null;\r\n    }\r\n\r\n    public getPathName() {\r\n        return this.requestUrl ? DataSanitizer.sanitizeUrl(this._logger, UrlHelper.getCompleteUrl(this.method, this.requestUrl)) : null;\r\n    }\r\n\r\n    public CalculateMetrics = function () {\r\n        var self = this;\r\n        // round to 3 decimal points\r\n        self.ajaxTotalDuration = Math.round(DateTimeUtils.GetDuration(self.requestSentTime, self.responseFinishedTime) * 1000) / 1000;\r\n    }\r\n};\r\n\r\n","import { CoreUtils } from 'applicationinsights-core-js';\r\n\r\nexport class stringUtils {\r\n    public static GetLength(strObject) {\r\n        var res = 0;\r\n        if (!CoreUtils.isNullOrUndefined(strObject)) {\r\n            var stringified = \"\";\r\n            try {\r\n                stringified = strObject.toString();\r\n            } catch (ex) {\r\n                // some troubles with complex object\r\n            }\r\n\r\n            res = stringified.length;\r\n            res = isNaN(res) ? 0 : res;\r\n        }\r\n\r\n        return res;\r\n    }\r\n}\r\n\r\nexport class EventHelper {\r\n    ///<summary>Binds the specified function to an event, so that the function gets called whenever the event fires on the object</summary>\r\n    ///<param name=\"obj\">Object to which </param>\r\n    ///<param name=\"eventNameWithoutOn\">String that specifies any of the standard DHTML Events without \"on\" prefix</param>\r\n    ///<param name=\"handlerRef\">Pointer that specifies the function to call when event fires</param>\r\n    ///<returns>True if the function was bound successfully to the event, otherwise false</returns>\r\n    public static AttachEvent(obj, eventNameWithoutOn, handlerRef) {\r\n        var result = false;\r\n        if (!CoreUtils.isNullOrUndefined(obj)) {\r\n            if (!CoreUtils.isNullOrUndefined(obj.attachEvent)) {\r\n                // IE before version 9                    \r\n                obj.attachEvent(\"on\" + eventNameWithoutOn, handlerRef);\r\n                result = true;\r\n            }\r\n            else {\r\n                if (!CoreUtils.isNullOrUndefined(obj.addEventListener)) {\r\n                    // all browsers except IE before version 9\r\n                    obj.addEventListener(eventNameWithoutOn, handlerRef, false);\r\n                    result = true;\r\n                }\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    public static DetachEvent(obj, eventNameWithoutOn, handlerRef) {\r\n        if (!CoreUtils.isNullOrUndefined(obj)) {\r\n            if (!CoreUtils.isNullOrUndefined(obj.detachEvent)) {\r\n                obj.detachEvent(\"on\" + eventNameWithoutOn, handlerRef);\r\n            }\r\n            else {\r\n                if (!CoreUtils.isNullOrUndefined(obj.removeEventListener)) {\r\n                    obj.removeEventListener(eventNameWithoutOn, handlerRef, false);\r\n                }\r\n            }\r\n        }\r\n    }\r\n}","import {\r\n    RequestHeaders, Util, CorrelationIdHelper, TelemetryItemCreator, ICorrelationConfig,\r\n    RemoteDependencyData, DateTimeUtils, DisabledPropertyName, Data\r\n} from 'applicationinsights-common';\r\nimport {\r\n    CoreUtils, LoggingSeverity, _InternalMessageId, IDiagnosticLogger,\r\n    IAppInsightsCore, ITelemetryPlugin, IConfiguration, IPlugin, ITelemetryItem\r\n} from 'applicationinsights-core-js';\r\nimport { ajaxRecord } from './ajaxRecord';\r\nimport { EventHelper } from './ajaxUtils';\r\n\r\nexport interface XMLHttpRequestInstrumented extends XMLHttpRequest {\r\n    ajaxData: ajaxRecord;\r\n}\r\n\r\nexport class AjaxMonitor implements ITelemetryPlugin {\r\n    private initialized: boolean;\r\n    private currentWindowHost;\r\n    private _core;\r\n    private _config: ICorrelationConfig;\r\n    private _nextPlugin: ITelemetryPlugin;\r\n    private _trackAjaxAttempts: number = 0;    \r\n\r\n    constructor() {\r\n        this.currentWindowHost = window && window.location.host && window.location.host.toLowerCase();\r\n        this.initialized = false;\r\n    }\r\n\r\n    ///<summary>Verifies that particalar instance of XMLHttpRequest needs to be monitored</summary>\r\n    ///<param name=\"excludeAjaxDataValidation\">Optional parameter. True if ajaxData must be excluded from verification</param>\r\n    ///<returns type=\"bool\">True if instance needs to be monitored, otherwise false</returns>\r\n    private isMonitoredInstance(xhr: XMLHttpRequestInstrumented, excludeAjaxDataValidation?: boolean): boolean {\r\n\r\n        // checking to see that all interested functions on xhr were instrumented\r\n        return this.initialized\r\n\r\n            // checking on ajaxData to see that it was not removed in user code\r\n            && (excludeAjaxDataValidation === true || !CoreUtils.isNullOrUndefined(xhr.ajaxData))\r\n\r\n            // check that this instance is not not used by ajax call performed inside client side monitoring to send data to collector\r\n            && xhr[DisabledPropertyName] !== true;\r\n\r\n    }\r\n\r\n    ///<summary>Determines whether ajax monitoring can be enabled on this document</summary>\r\n    ///<returns>True if Ajax monitoring is supported on this page, otherwise false</returns>\r\n    private supportsMonitoring(): boolean {\r\n        var result = true;\r\n        if (CoreUtils.isNullOrUndefined(XMLHttpRequest) ||\r\n            CoreUtils.isNullOrUndefined(XMLHttpRequest.prototype) ||\r\n            CoreUtils.isNullOrUndefined(XMLHttpRequest.prototype.open) ||\r\n            CoreUtils.isNullOrUndefined(XMLHttpRequest.prototype.send) ||\r\n            CoreUtils.isNullOrUndefined(XMLHttpRequest.prototype.abort)) {\r\n            result = false;\r\n        }\r\n\r\n        // disable in IE8 or older (https://www.w3schools.com/jsref/jsref_trim_string.asp)\r\n        try {\r\n            \" a \".trim();\r\n        } catch (ex) {\r\n            result = false;\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    private instrumentOpen() {\r\n        var originalOpen = XMLHttpRequest.prototype.open;\r\n        var ajaxMonitorInstance = this;\r\n        XMLHttpRequest.prototype.open = function (method, url, async) {\r\n            try {\r\n                if (ajaxMonitorInstance.isMonitoredInstance(this, true) &&\r\n                    (\r\n                        !(<XMLHttpRequestInstrumented>this).ajaxData ||\r\n                        !(<XMLHttpRequestInstrumented>this).ajaxData.xhrMonitoringState.openDone\r\n                    )) {\r\n                    ajaxMonitorInstance.openHandler(this, method, url, async);\r\n                }\r\n            } catch (e) {\r\n                this._core.logger.throwInternal(\r\n                    LoggingSeverity.CRITICAL,\r\n                    _InternalMessageId.FailedMonitorAjaxOpen,\r\n                    \"Failed to monitor XMLHttpRequest.open, monitoring data for this ajax call may be incorrect.\",\r\n                    {\r\n                        ajaxDiagnosticsMessage: AjaxMonitor.getFailedAjaxDiagnosticsMessage(this),\r\n                        exception: Util.dump(e)\r\n                    });\r\n            }\r\n\r\n            return originalOpen.apply(this, arguments);\r\n        };\r\n    }\r\n\r\n    private openHandler(xhr: XMLHttpRequestInstrumented, method, url, async) {\r\n        /* todo:\r\n        Disabling the following block of code as CV is not yet supported in 1DS for 3rd Part. \r\n        // this format corresponds with activity logic on server-side and is required for the correct correlation\r\n        var id = \"|\" + this.appInsights.context.operation.id + \".\" + Util.newId();\r\n        */\r\n       var id = Util.newId();\r\n\r\n        var ajaxData = new ajaxRecord(id, this._core._logger);\r\n        ajaxData.method = method;\r\n        ajaxData.requestUrl = url;\r\n        ajaxData.xhrMonitoringState.openDone = true\r\n        xhr.ajaxData = ajaxData;\r\n\r\n        this.attachToOnReadyStateChange(xhr);\r\n    }\r\n\r\n    private static getFailedAjaxDiagnosticsMessage(xhr: XMLHttpRequestInstrumented): string {\r\n        var result = \"\";\r\n        try {\r\n            if (!CoreUtils.isNullOrUndefined(xhr) &&\r\n                !CoreUtils.isNullOrUndefined(xhr.ajaxData) &&\r\n                !CoreUtils.isNullOrUndefined(xhr.ajaxData.requestUrl)) {\r\n                result += \"(url: '\" + xhr.ajaxData.requestUrl + \"')\";\r\n            }\r\n        } catch (e) { }\r\n\r\n        return result;\r\n    }\r\n\r\n    private instrumentSend() {\r\n        var originalSend = XMLHttpRequest.prototype.send;\r\n        var ajaxMonitorInstance = this;\r\n        XMLHttpRequest.prototype.send = function (content) {\r\n            try {\r\n                if (ajaxMonitorInstance.isMonitoredInstance(this) && !(<XMLHttpRequestInstrumented>this).ajaxData.xhrMonitoringState.sendDone) {\r\n                    ajaxMonitorInstance.sendHandler(this, content);\r\n                }\r\n            } catch (e) {\r\n                this._core.logger.throwInternal(\r\n                    LoggingSeverity.CRITICAL,\r\n                    _InternalMessageId.FailedMonitorAjaxSend,\r\n                    \"Failed to monitor XMLHttpRequest, monitoring data for this ajax call may be incorrect.\",\r\n                    {\r\n                        ajaxDiagnosticsMessage: AjaxMonitor.getFailedAjaxDiagnosticsMessage(this),\r\n                        exception: Util.dump(e)\r\n                    });\r\n            }\r\n\r\n            return originalSend.apply(this, arguments);\r\n        };\r\n    }\r\n\r\n    private sendHandler(xhr: XMLHttpRequestInstrumented, content) {\r\n        xhr.ajaxData.requestSentTime = DateTimeUtils.Now();\r\n\r\n        if (this.currentWindowHost && CorrelationIdHelper.canIncludeCorrelationHeader(this._config, xhr.ajaxData.getAbsoluteUrl(),\r\n            this.currentWindowHost)) {\r\n            xhr.setRequestHeader(RequestHeaders.requestIdHeader, xhr.ajaxData.id);\r\n            var appId = this._config.appId; // Todo: also, get appId from channel as breeze returns it\r\n            if (appId) {\r\n                xhr.setRequestHeader(RequestHeaders.requestContextHeader, RequestHeaders.requestContextAppIdFormat + appId);\r\n            }\r\n        }\r\n        xhr.ajaxData.xhrMonitoringState.sendDone = true;\r\n    }\r\n\r\n    private instrumentAbort() {\r\n        var originalAbort = XMLHttpRequest.prototype.abort;\r\n        var ajaxMonitorInstance = this;\r\n        XMLHttpRequest.prototype.abort = function () {\r\n            try {\r\n                if (ajaxMonitorInstance.isMonitoredInstance(this) && !(<XMLHttpRequestInstrumented>this).ajaxData.xhrMonitoringState.abortDone) {\r\n                    (<XMLHttpRequestInstrumented>this).ajaxData.aborted = 1;\r\n                    (<XMLHttpRequestInstrumented>this).ajaxData.xhrMonitoringState.abortDone = true;\r\n                }\r\n            } catch (e) {\r\n                this._core.logger.throwInternal(\r\n                    LoggingSeverity.CRITICAL,\r\n                    _InternalMessageId.FailedMonitorAjaxAbort,\r\n                    \"Failed to monitor XMLHttpRequest.abort, monitoring data for this ajax call may be incorrect.\",\r\n                    {\r\n                        ajaxDiagnosticsMessage: AjaxMonitor.getFailedAjaxDiagnosticsMessage(this),\r\n                        exception: Util.dump(e)\r\n                    });\r\n            }\r\n\r\n            return originalAbort.apply(this, arguments);\r\n        };\r\n    }\r\n\r\n    private attachToOnReadyStateChange(xhr: XMLHttpRequestInstrumented) {\r\n        var ajaxMonitorInstance = this;\r\n        xhr.ajaxData.xhrMonitoringState.onreadystatechangeCallbackAttached = EventHelper.AttachEvent(xhr, \"readystatechange\", () => {\r\n            try {\r\n                if (ajaxMonitorInstance.isMonitoredInstance(xhr)) {\r\n                    if (xhr.readyState === 4) {\r\n                        ajaxMonitorInstance.onAjaxComplete(xhr);\r\n                    }\r\n                }\r\n            } catch (e) {\r\n                var exceptionText = Util.dump(e);\r\n\r\n                // ignore messages with c00c023f, as this a known IE9 XHR abort issue\r\n                if (!exceptionText || exceptionText.toLowerCase().indexOf(\"c00c023f\") == -1) {\r\n                    this._core.logger.throwInternal(\r\n                        LoggingSeverity.CRITICAL,\r\n                        _InternalMessageId.FailedMonitorAjaxRSC,\r\n                        \"Failed to monitor XMLHttpRequest 'readystatechange' event handler, monitoring data for this ajax call may be incorrect.\",\r\n                        {\r\n                            ajaxDiagnosticsMessage: AjaxMonitor.getFailedAjaxDiagnosticsMessage(xhr),\r\n                            exception: Util.dump(e)\r\n                        });\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    private onAjaxComplete(xhr: XMLHttpRequestInstrumented) {\r\n        xhr.ajaxData.responseFinishedTime = DateTimeUtils.Now();\r\n        xhr.ajaxData.status = xhr.status;\r\n        xhr.ajaxData.CalculateMetrics();\r\n\r\n        if (xhr.ajaxData.ajaxTotalDuration < 0) {\r\n            this._core.logger.throwInternal(\r\n                LoggingSeverity.WARNING,\r\n                _InternalMessageId.FailedMonitorAjaxDur,\r\n                \"Failed to calculate the duration of the ajax call, monitoring data for this ajax call won't be sent.\",\r\n                {\r\n                    ajaxDiagnosticsMessage: AjaxMonitor.getFailedAjaxDiagnosticsMessage(xhr),\r\n                    requestSentTime: xhr.ajaxData.requestSentTime,\r\n                    responseFinishedTime: xhr.ajaxData.responseFinishedTime\r\n                });\r\n        }\r\n        else {\r\n            var dependency = new RemoteDependencyData(this._core._logger, \r\n                xhr.ajaxData.id,\r\n                xhr.ajaxData.getAbsoluteUrl(),\r\n                xhr.ajaxData.getPathName(),\r\n                xhr.ajaxData.ajaxTotalDuration,\r\n                (+(xhr.ajaxData.status)) >= 200 && (+(xhr.ajaxData.status)) < 400,\r\n                +xhr.ajaxData.status,\r\n                xhr.ajaxData.method);\r\n\r\n            // enrich dependency target with correlation context from the server\r\n            var correlationContext = this.getCorrelationContext(xhr);\r\n            if (correlationContext) {\r\n                dependency.target = dependency.target + \" | \" + correlationContext;\r\n            }\r\n\r\n            this.trackDependencyData(dependency);\r\n\r\n            xhr.ajaxData = null;\r\n        }\r\n    }\r\n\r\n    private getCorrelationContext(xhr: XMLHttpRequestInstrumented) {\r\n        try {\r\n            var responseHeadersString = xhr.getAllResponseHeaders();\r\n            if (responseHeadersString !== null) {\r\n                var index = responseHeadersString.toLowerCase().indexOf(RequestHeaders.requestContextHeaderLowerCase);\r\n                if (index !== -1) {\r\n                    var responseHeader = xhr.getResponseHeader(RequestHeaders.requestContextHeader);\r\n                    return CorrelationIdHelper.getCorrelationContext(responseHeader);\r\n                }\r\n            }\r\n        } catch (e) {\r\n            this._core.logger.throwInternal(\r\n                LoggingSeverity.WARNING,\r\n                _InternalMessageId.FailedMonitorAjaxGetCorrelationHeader,\r\n                \"Failed to get Request-Context correlation header as it may be not included in the response or not accessible.\",\r\n                {\r\n                    ajaxDiagnosticsMessage: AjaxMonitor.getFailedAjaxDiagnosticsMessage(xhr),\r\n                    exception: Util.dump(e)\r\n                });\r\n        }\r\n    }\r\n\r\n     /**\r\n         * Logs dependency call\r\n         * @param dependencyData dependency data object\r\n         */\r\n        public trackDependencyData(dependency: RemoteDependencyData, properties?: { [key: string]: any }, systemProperties?: { [key: string]: any }) {\r\n            if (this._config.maxAjaxCallsPerView === -1 || this._trackAjaxAttempts < this._config.maxAjaxCallsPerView) {\r\n                let item = TelemetryItemCreator.create<RemoteDependencyData>(\r\n                    dependency,\r\n                    RemoteDependencyData.dataType,\r\n                    RemoteDependencyData.envelopeType,\r\n                    this._core._logger,\r\n                    properties,\r\n                    systemProperties);\r\n\r\n                this._core.track(item);\r\n            } else if (this._trackAjaxAttempts === this._config.maxAjaxCallsPerView) {\r\n                this._core.logger.throwInternal(LoggingSeverity.CRITICAL,\r\n                    _InternalMessageId.MaxAjaxPerPVExceeded,\r\n                    \"Maximum ajax per page view limit reached, ajax monitoring is paused until the next trackPageView(). In order to increase the limit set the maxAjaxCallsPerView configuration parameter.\",\r\n                    true);\r\n            }\r\n\r\n            ++this._trackAjaxAttempts;\r\n        }\r\n\r\n    public processTelemetry(item: ITelemetryItem) {\r\n        if (this._nextPlugin && this._nextPlugin.processTelemetry) {\r\n            this._nextPlugin.processTelemetry(item);\r\n        }\r\n    }\r\n\r\n    public identifier: string = \"AjaxDependencyPlugin\";\r\n    \r\n    setNextPlugin(next: ITelemetryPlugin) {\r\n        if (next) {\r\n            this._nextPlugin = next;\r\n        }\r\n    }\r\n\r\n    priority: number = 110;\r\n    \r\n    public initialize(config: IConfiguration, core: IAppInsightsCore, extensions: IPlugin[]) {\r\n        if (!this.initialized) {\r\n            this._core = core;\r\n            config.extensionConfig = config.extensionConfig ? config.extensionConfig : {};\r\n            let c = config.extensionConfig[this.identifier] ? config.extensionConfig[this.identifier] : {};\r\n            this._config = {\r\n                maxAjaxCallsPerView: !isNaN(c.maxAjaxCallsPerView) ? c.maxAjaxCallsPerView : 500,\r\n                disableAjaxTracking: Util.stringToBoolOrDefault(c.disableAjaxTracking),\r\n                disableCorrelationHeaders: Util.stringToBoolOrDefault(c.disableCorrelationHeaders),\r\n                correlationHeaderExcludedDomains: c.correlationHeaderExcludedDomains || [\r\n                    \"*.blob.core.windows.net\",\r\n                    \"*.blob.core.chinacloudapi.cn\",\r\n                    \"*.blob.core.cloudapi.de\",\r\n                    \"*.blob.core.usgovcloudapi.net\"],\r\n                appId: c.appId,\r\n                enableCorsCorrelation: Util.stringToBoolOrDefault(c.enableCorsCorrelation)\r\n            };\r\n\r\n            if (this.supportsMonitoring() && !this._config.disableAjaxTracking) {\r\n                this.instrumentOpen();\r\n                this.instrumentSend();\r\n                this.instrumentAbort();\r\n                this.initialized = true;\r\n            }\r\n        }\r\n    }\r\n}\r\n","/// <reference path=\"../TestFramework/TestClass.ts\" />\r\nimport { AjaxMonitor } from \"../../ajax\";\r\nimport { RemoteDependencyData } from \"applicationinsights-common\";\r\nimport { AppInsightsCore, IConfiguration, ITelemetryItem, ITelemetryPlugin, IChannelControls } from \"applicationinsights-core-js\";\r\n\r\nexport class AjaxTests extends TestClass {\r\n    \r\n    private appInsightsMock = {\r\n        trackDependency: (id: string, method: string, absoluteUrl: string, isAsync: boolean, totalTime: number, success: boolean) => { },\r\n        trackDependencyData: (dependency: RemoteDependencyData) => { },\r\n        context: {\r\n            operation: {\r\n                id: \"asdf\"\r\n            },\r\n            appId: () => \"someid\"\r\n        },\r\n        config: {\r\n            disableCorrelationHeaders: false,\r\n            enableCorsCorrelation: false\r\n        }\r\n    }\r\n    private trackDependencySpy;\r\n\r\n    public testInitialize() {\r\n        this.trackDependencySpy = this.sandbox.spy(this.appInsightsMock, \"trackDependencyData\");\r\n        this.trackDependencySpy.reset();\r\n        var xhr = sinon.useFakeXMLHttpRequest();\r\n    }\r\n\r\n    public testCleanup() {\r\n    }\r\n\r\n    public registerTests() {\r\n\r\n        this.testCase({\r\n            name: \"Ajax: xhr.open gets instrumented\",\r\n            test: () => {\r\n                let ajaxMonitor = new AjaxMonitor();\r\n                let appInsightsCore = new AppInsightsCore();\r\n                let coreConfig = { instrumentationKey: \"instrumentationKey\", extensionConfig: {\"AjaxPlugin\": {}}};\r\n                appInsightsCore.initialize(coreConfig, [ajaxMonitor, new TestChannelPlugin()]);\r\n        \r\n                // act\r\n                var xhr = new XMLHttpRequest();                \r\n                xhr.open(\"GET\", \"http://microsoft.com\");\r\n\r\n                // assert\r\n                var ajaxData = (<any>xhr).ajaxData;\r\n                Assert.equal(\"http://microsoft.com\", ajaxData.requestUrl, \"RequestUrl is collected correctly\");\r\n            }\r\n        });\r\n\r\n        this.testCase({\r\n            name: \"Ajax: successful request, ajax monitor doesn't change payload\",\r\n            test: () => {\r\n                var callback = this.sandbox.spy();\r\n                let ajaxMonitor = new AjaxMonitor();\r\n                let appInsightsCore = new AppInsightsCore();\r\n                let coreConfig = { instrumentationKey: \"instrumentationKey\", extensionConfig: {\"AjaxPlugin\": {}}};\r\n                appInsightsCore.initialize(coreConfig, [ajaxMonitor, new TestChannelPlugin()]);\r\n\r\n                // Act\r\n                var xhr = new XMLHttpRequest();\r\n                xhr.onload = callback;\r\n                xhr.open(\"GET\", \"/bla\");\r\n                xhr.send();\r\n\r\n                \r\n                // Emulate response\r\n                (<any>xhr).respond(200, { \"Content-Type\": \"application/json\" }, \"bla\");\r\n                Assert.ok((<any>ajaxMonitor)._trackAjaxAttempts === 1, \"TrackAjax is called\");\r\n                                \r\n                // Assert\r\n                var result = callback.args[0][0].target;\r\n                Assert.ok(callback.called, \"Ajax callback is called\");\r\n                Assert.equal(\"bla\", result.responseText, \"Expected result match\");\r\n                Assert.equal(200, result.status, \"Expected 200 response code\");\r\n                Assert.equal(4, xhr.readyState, \"Expected readyState is 4 after request is finished\");\r\n            }\r\n        });\r\n\r\n        // this.testCase({\r\n        //     name: \"Ajax: custom onreadystatechange gets called\",\r\n        //     test: () => {\r\n        //         var onreadystatechangeSpy = this.sandbox.spy();\r\n        //         var ajax = new AjaxMonitor();\r\n\r\n        //         // Act\r\n        //         var xhr = new XMLHttpRequest();\r\n        //         xhr.onreadystatechange = onreadystatechangeSpy;\r\n        //         xhr.open(\"GET\", \"/bla\");\r\n        //         xhr.send();\r\n\r\n        //         Assert.ok(!this.trackDependencySpy.called, \"TrackAjax should not be called yet\");\r\n\r\n        //         // Emulate response                \r\n        //         (<any>xhr).respond();\r\n\r\n        //         // Assert\r\n        //         Assert.ok(this.trackDependencySpy.called, \"TrackAjax is called\");\r\n        //         Assert.ok(onreadystatechangeSpy.called, \"custom onreadystatechange should be called\");\r\n\r\n        //     }\r\n        // });\r\n\r\n        // this.testCase({\r\n        //     name: \"Ajax: 200 means success\",\r\n        //     test: () => {\r\n        //         var ajax = new AjaxMonitor();\r\n        //         // Act\r\n        //         var xhr = new XMLHttpRequest();\r\n        //         xhr.open(\"GET\", \"/bla\");\r\n        //         xhr.send();\r\n                \r\n        //         // Emulate response                \r\n        //         (<any>xhr).respond(200, {}, \"\");\r\n\r\n        //         // Assert\r\n        //         Assert.equal(true, this.trackDependencySpy.args[0][0].success, \"TrackAjax should receive true as a 'success' argument\");\r\n\r\n        //     }\r\n        // });\r\n\r\n        // this.testCase({\r\n        //     name: \"Ajax: non 200 means failure\",\r\n        //     test: () => {\r\n        //         var ajax = new AjaxMonitor();\r\n\r\n        //         // Act\r\n        //         var xhr = new XMLHttpRequest();\r\n        //         xhr.open(\"GET\", \"/bla\");\r\n        //         xhr.send();\r\n                \r\n        //         // Emulate response                \r\n        //         (<any>xhr).respond(404, {}, \"\");\r\n\r\n        //         // Assert\r\n        //         Assert.equal(false, this.trackDependencySpy.args[0][0].success, \"TrackAjax should receive false as a 'success' argument\");\r\n\r\n        //     }\r\n        // });\r\n\r\n        // [200, 201, 202, 203, 204, 301, 302, 303, 304].forEach((responseCode) => {\r\n        //     this.testCase({\r\n        //         name: \"Ajax: test success http response code: \" + responseCode,\r\n        //         test: () => {\r\n        //             this.testAjaxSuccess(responseCode, true);\r\n        //         }\r\n        //     })\r\n        // });\r\n\r\n        // [400, 401, 402, 403, 404, 500, 501].forEach((responseCode) => {\r\n        //     this.testCase({\r\n        //         name: \"Ajax: test failure http response code: \" + responseCode,\r\n        //         test: () => {\r\n        //             this.testAjaxSuccess(responseCode, false);\r\n        //         }\r\n        //     })\r\n        // });\r\n\r\n        // this.testCase({\r\n        //     name: \"Ajax: overriding ready state change handlers in all possible ways\",\r\n        //     test: () => {\r\n        //         var ajax = new AjaxMonitor();\r\n        //         var cb1 = this.sandbox.spy();\r\n        //         var cb2 = this.sandbox.spy();\r\n        //         var cb3 = this.sandbox.spy();\r\n        //         var cb4 = this.sandbox.spy();\r\n        //         var cb5 = this.sandbox.spy();\r\n        //         var cb6 = this.sandbox.spy();\r\n        //         var cb7 = this.sandbox.spy();\r\n\r\n        //         // Act\r\n        //         var xhr = new XMLHttpRequest();\r\n        //         xhr.addEventListener(\"readystatechange\", cb1);\r\n        //         xhr.addEventListener(\"readystatechange\", cb2);\r\n        //         xhr.open(\"GET\", \"/bla\");\r\n        //         xhr.onreadystatechange = cb3;\r\n        //         xhr.addEventListener(\"readystatechange\", cb4);\r\n        //         xhr.addEventListener(\"readystatechange\", cb5);\r\n        //         xhr.send();\r\n        //         xhr.addEventListener(\"readystatechange\", cb6);\r\n        //         xhr.addEventListener(\"readystatechange\", cb7);\r\n\r\n        //         Assert.ok(!this.trackDependencySpy.called, \"TrackAjax should not be called yet\");\r\n\r\n        //         // Emulate response                \r\n        //         (<any>xhr).respond(404, {}, \"\");\r\n\r\n        //         // Assert\r\n        //         Assert.ok(this.trackDependencySpy.calledOnce, \"TrackAjax should be called\");\r\n        //         Assert.ok(cb1.called, \"callback 1 should be called\");\r\n        //         Assert.ok(cb2.called, \"callback 2 should be called\");\r\n        //         Assert.ok(cb3.called, \"callback 3 should be called\");\r\n        //         Assert.ok(cb4.called, \"callback 4 should be called\");\r\n        //         Assert.ok(cb5.called, \"callback 5 should be called\");\r\n        //         Assert.ok(cb6.called, \"callback 6 should be called\");\r\n        //         Assert.ok(cb7.called, \"callback 7 should be called\");\r\n\r\n        //     }\r\n        // });\r\n\r\n        // this.testCase({\r\n        //     name: \"Ajax: test ajax duration is calculated correctly\",\r\n        //     test: () => {\r\n        //         var initialPerformance = window.performance;\r\n        //         try {\r\n        //             // Mocking window performance (sinon doesn't have it).\r\n        //             // tick() is similar to sinon's clock.tick()\r\n        //             (<any>window).performance = <any>{\r\n        //                 current: 0,\r\n\r\n        //                 now: function () {\r\n        //                     return this.current;\r\n        //                 },\r\n\r\n        //                 tick: function (ms: number) {\r\n        //                     this.current += ms;\r\n        //                 },\r\n\r\n        //                 timing: initialPerformance.timing\r\n        //             };\r\n\r\n        //             var ajax = new AjaxMonitor();\r\n        //             // tick to set the initial time be non zero\r\n        //             (<any>window.performance).tick(23);\r\n                \r\n        //             // Act\r\n        //             var xhr = new XMLHttpRequest();\r\n        //             var clock = this.clock;\r\n        //             var expectedResponseDuration = 50;\r\n        //             xhr.onreadystatechange = () => {\r\n        //                 if (xhr.readyState == 3) {\r\n        //                     (<any>window.performance).tick(expectedResponseDuration);\r\n        //                 }\r\n        //             }\r\n        //             xhr.open(\"GET\", \"/bla\");\r\n        //             xhr.send();\r\n        //             // Emulate response                \r\n        //             (<any>xhr).respond(404, {}, \"\");\r\n\r\n        //             // Assert\r\n        //             Assert.ok(this.trackDependencySpy.calledOnce, \"TrackAjax should be called\");\r\n        //             Assert.equal(\"00:00:00.050\", this.trackDependencySpy.args[0][0].duration, \"Ajax duration should match expected duration\");\r\n        //         } finally {\r\n        //             (<any>window.performance).performance = initialPerformance;\r\n        //         }\r\n        //     }\r\n        // });\r\n\r\n        // this.testCase({\r\n        //     name: \"Ajax: 2nd invokation of xhr.send doesn't cause send wrapper to execute 2nd time\",\r\n        //     test: () => {\r\n        //         var ajax = new AjaxMonitor();\r\n        //         var spy = this.sandbox.spy(ajax, \"sendHandler\");\r\n                \r\n        //         // Act\r\n        //         var xhr = new XMLHttpRequest();\r\n        //         xhr.open(\"GET\", \"/bla\");\r\n        //         xhr.send();\r\n\r\n        //         try {\r\n        //             xhr.send();\r\n        //         } catch (e) { }\r\n                                \r\n\r\n        //         // Assert\r\n        //         Assert.ok(spy.calledOnce, \"sendPrefixInstrumentor should be called only once\");\r\n        //     }\r\n        // });\r\n\r\n        // this.testCase({\r\n        //     name: \"Ajax: 2 invokation of xhr.open() doesn't cause send wrapper to execute 2nd time\",\r\n        //     test: () => {\r\n        //         var ajax = new AjaxMonitor();\r\n        //         var spy = this.sandbox.spy(ajax, \"openHandler\");\r\n                \r\n        //         // Act\r\n        //         var xhr = new XMLHttpRequest();\r\n        //         xhr.open(\"GET\", \"/bla\");\r\n\r\n        //         try {\r\n        //             xhr.open(\"GET\", \"/bla\");\r\n        //         } catch (e) { }\r\n                                \r\n\r\n        //         // Assert\r\n        //         Assert.ok(spy.calledOnce, \"sendPrefixInstrumentor should be called only once\");\r\n        //     }\r\n        // });\r\n    }\r\n\r\n    private testAjaxSuccess(responseCode: number, success: boolean) {\r\n        var ajax = new AjaxMonitor();\r\n\r\n        // Act\r\n        var xhr = new XMLHttpRequest();\r\n        xhr.open(\"GET\", \"/bla\");\r\n        xhr.send();\r\n                \r\n        // Emulate response                \r\n        (<any>xhr).respond(responseCode, {}, \"\");\r\n\r\n        // Assert\r\n        Assert.equal(success, this.trackDependencySpy.args[0][0].success, \"TrackAjax should receive \" + success + \" as a 'success' argument\");\r\n    }\r\n}\r\n\r\nclass TestChannelPlugin implements IChannelControls {\r\n\r\n    public isFlushInvoked = false;\r\n    public isTearDownInvoked = false;\r\n    public isResumeInvoked = false;\r\n    public isPauseInvoked = false;\r\n\r\n    constructor() {\r\n        this.processTelemetry = this._processTelemetry.bind(this);\r\n    }\r\n    public pause(): void {\r\n        this.isPauseInvoked = true;\r\n    }    \r\n    \r\n    public resume(): void {\r\n        this.isResumeInvoked = true;\r\n    }\r\n\r\n    public teardown(): void {\r\n        this.isTearDownInvoked = true;\r\n    }\r\n\r\n    flush(async?: boolean, callBack?: () => void): void {\r\n        this.isFlushInvoked = true;\r\n        if (callBack) {\r\n            callBack();\r\n        }\r\n    }\r\n\r\n    public processTelemetry;\r\n\r\n    public identifier = \"Sender\";\r\n    \r\n    setNextPlugin(next: ITelemetryPlugin) {\r\n        // no next setup\r\n    }\r\n\r\n    public priority: number = 201;\r\n\r\n    public initialize = (config: IConfiguration) => {\r\n    }\r\n\r\n    private _processTelemetry(env: ITelemetryItem) {\r\n\r\n    }\r\n}\r\n\r\nclass TestAjaxMonitor extends AjaxMonitor {\r\n\r\n}","import { AjaxTests} from \"./ajax.tests\";\r\n\r\nexport function runTests() {\r\n    new AjaxTests().registerTests();\r\n}"]}